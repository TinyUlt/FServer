// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace gt_msg {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class GtXzdd {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_gt_msg_JoinFreeRequestxzdd__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.JoinFreeRequestxzdd, global::gt_msg.JoinFreeRequestxzdd.Builder> internal__static_gt_msg_JoinFreeRequestxzdd__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_JoinFreeResponsexzdd__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.JoinFreeResponsexzdd, global::gt_msg.JoinFreeResponsexzdd.Builder> internal__static_gt_msg_JoinFreeResponsexzdd__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_ActionRequestxzdd__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.ActionRequestxzdd, global::gt_msg.ActionRequestxzdd.Builder> internal__static_gt_msg_ActionRequestxzdd__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_ActionResponsexzdd__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.ActionResponsexzdd, global::gt_msg.ActionResponsexzdd.Builder> internal__static_gt_msg_ActionResponsexzdd__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_CardGroupxzdd__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.CardGroupxzdd, global::gt_msg.CardGroupxzdd.Builder> internal__static_gt_msg_CardGroupxzdd__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_TableUserStatsxzdd__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.TableUserStatsxzdd, global::gt_msg.TableUserStatsxzdd.Builder> internal__static_gt_msg_TableUserStatsxzdd__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_TableStatsxzdd__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.TableStatsxzdd, global::gt_msg.TableStatsxzdd.Builder> internal__static_gt_msg_TableStatsxzdd__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_TableUserResultxzdd__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.TableUserResultxzdd, global::gt_msg.TableUserResultxzdd.Builder> internal__static_gt_msg_TableUserResultxzdd__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_RoundEndedEventxzdd__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.RoundEndedEventxzdd, global::gt_msg.RoundEndedEventxzdd.Builder> internal__static_gt_msg_RoundEndedEventxzdd__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_ForceExitTableRequestxzdd__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.ForceExitTableRequestxzdd, global::gt_msg.ForceExitTableRequestxzdd.Builder> internal__static_gt_msg_ForceExitTableRequestxzdd__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_ForceExitTableResponsexzdd__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.ForceExitTableResponsexzdd, global::gt_msg.ForceExitTableResponsexzdd.Builder> internal__static_gt_msg_ForceExitTableResponsexzdd__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_GameLifeRequestxzdd__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.GameLifeRequestxzdd, global::gt_msg.GameLifeRequestxzdd.Builder> internal__static_gt_msg_GameLifeRequestxzdd__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_GameLifeResponsexzdd__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.GameLifeResponsexzdd, global::gt_msg.GameLifeResponsexzdd.Builder> internal__static_gt_msg_GameLifeResponsexzdd__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_GameRankListRequestxzdd__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.GameRankListRequestxzdd, global::gt_msg.GameRankListRequestxzdd.Builder> internal__static_gt_msg_GameRankListRequestxzdd__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_GameRankListResponsexzdd__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.GameRankListResponsexzdd, global::gt_msg.GameRankListResponsexzdd.Builder> internal__static_gt_msg_GameRankListResponsexzdd__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_GameReadyRequestxzdd__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.GameReadyRequestxzdd, global::gt_msg.GameReadyRequestxzdd.Builder> internal__static_gt_msg_GameReadyRequestxzdd__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_GameReadyResponsexzdd__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.GameReadyResponsexzdd, global::gt_msg.GameReadyResponsexzdd.Builder> internal__static_gt_msg_GameReadyResponsexzdd__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_TableRunTimeResult__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.TableRunTimeResult, global::gt_msg.TableRunTimeResult.Builder> internal__static_gt_msg_TableRunTimeResult__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_GMInfoxzdd__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.GMInfoxzdd, global::gt_msg.GMInfoxzdd.Builder> internal__static_gt_msg_GMInfoxzdd__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_TablePlayStateRequestxzdd__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.TablePlayStateRequestxzdd, global::gt_msg.TablePlayStateRequestxzdd.Builder> internal__static_gt_msg_TablePlayStateRequestxzdd__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_UserPlayStatexzdd__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.UserPlayStatexzdd, global::gt_msg.UserPlayStatexzdd.Builder> internal__static_gt_msg_UserPlayStatexzdd__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_TablePlayStateResponsexzdd__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.TablePlayStateResponsexzdd, global::gt_msg.TablePlayStateResponsexzdd.Builder> internal__static_gt_msg_TablePlayStateResponsexzdd__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static GtXzdd() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1ndF94emRkLnByb3RvEgZndF9tc2caDWd0X2Jhc2UucHJvdG8iwQEKE0pv", 
            "aW5GcmVlUmVxdWVzdHh6ZGQSDwoHdXNlcl9pZBgBIAIoCRImCgRydWxlGAIg", 
            "AigOMgwuZ3RfbXNnLlJ1bGU6ClJ1bGVOb3JtYWwSHwoEcmFuaxgDIAIoDjIM", 
            "Lmd0X21zZy5SYW5rOgNMVjASEAoIdGFibGVfaWQYBCABKAUSFQoNam9pbl9w", 
            "YXNzd29yZBgFIAEoCRIRCgliYXNlUG9pbnQYBiABKAUSFAoMY2FucGxheXRp", 
            "bWVzGAcgASgFIrIEChRKb2luRnJlZVJlc3BvbnNleHpkZBI/CgRjb2RlGAEg", 
            "AigOMjEuZ3RfbXNnLkpvaW5GcmVlUmVzcG9uc2V4emRkLkpvaW5GcmVlUmVz", 
            "cG9uc2VDb2RlEhgKEHJlY29ubmVjdGVkX3VzZXIYAiABKAgSEQoJbWluX2Nv", 
            "aW5zGAMgASgFEhgKEGhhc19iYXNpY19saXZpbmcYBCABKAgSHgoWYmFzaWNf", 
            "bGl2aW5nX2FsbF90aW1lcxgFIAEoBRIeChZiYXNpY19saXZpbmdfdXNlX3Rp", 
            "bWVzGAYgASgFEhoKEmJhc2ljX2xpdmluZ19jb2lucxgHIAEoBRIiCgxyYW5r", 
            "X3JlcXVlc3QYCCABKA4yDC5ndF9tc2cuUmFuaxIaCgRyYW5rGAkgASgOMgwu", 
            "Z3RfbXNnLlJhbmsSKgoKZ2FtZV9zdGF0cxgKIAEoCzIWLmd0X21zZy5UYWJs", 
            "ZVN0YXRzeHpkZBIVCg1UYWJsZVBhc3NXb3JkGAsgASgJEhAKCEl0ZW1UeXBl", 
            "GAwgASgFIqABChRKb2luRnJlZVJlc3BvbnNlQ29kZRIGCgJPaxAAEhgKFE1p", 
            "bmltdW1Db2luc1JlcXVpcmVkEAESGgoWTWluaW11bURpYW1vbmRSZXF1aXJl", 
            "ZBACEhAKDE5vVGFibGVBdmFpbBADEg0KCUNyZWF0ZUVychAEEg0KCVJvb21J", 
            "ZEVychAFEg8KC1Bhc3NXb3JkRXJyEAYSCQoFT3RoZXIQByKVAgoRQWN0aW9u", 
            "UmVxdWVzdHh6ZGQSMgoEY29kZRgBIAIoDjIkLmd0X21zZy5BY3Rpb25SZXF1", 
            "ZXN0eHpkZC5BY3Rpb25Db2RlEhIKBkNhcmRzMRgCIAMoBUICEAESEgoGQ2Fy", 
            "ZHMyGAMgAygFQgIQARInCghDYXJkVHlwZRgEIAEoDjIVLmd0X21zZy5DYXJk", 
            "c1R5cGV4emRkInsKCkFjdGlvbkNvZGUSDwoLQ2hhbmdlQ2FyZHMQABIOCgpO", 
            "b1dpblN1aXRlEAESCAoEUGVuZxACEgYKAkh1EAMSCQoFR2FuZzEQBBIJCgVH", 
            "YW5nMhAFEgkKBUdhbmczEAYSDQoJUGxheUNhcmRzEAcSCgoGR2l2ZVVwEAgi", 
            "nQEKEkFjdGlvblJlc3BvbnNleHpkZBI7CgRjb2RlGAEgAigOMi0uZ3RfbXNn", 
            "LkFjdGlvblJlc3BvbnNleHpkZC5BY3Rpb25SZXNwb25zZUNvZGUiSgoSQWN0", 
            "aW9uUmVzcG9uc2VDb2RlEgYKAk9LEAASEAoMQ2Fubm90QWN0aW9uEAESCwoH", 
            "RXJyVHlwZRACEg0KCU90aGVyVHlwZRADIkQKDUNhcmRHcm91cHh6ZGQSEQoJ", 
            "R3JvdXBUeXBlGAEgAigFEhEKBUNhcmRzGAIgAygFQgIQARINCgVMem51bRgD", 
            "IAEoBSKLBAoSVGFibGVVc2VyU3RhdHN4emRkEh8KCXVzZXJfaW5mbxgBIAIo", 
            "CzIMLmd0X21zZy5Vc2VyEg8KB05vd1NlYXQYAiACKAUSDQoFU3RhdGUYAyAC", 
            "KAUSFQoJSGFuZENhcmRzGAQgAygFQgIQARIOCgZJc0hvc3QYBSABKAUSEQoJ", 
            "TGVmdENhcmRzGAYgASgFEgoKAlRHGAcgASgFEjAKDU9sZEFjdGlvbkxpc3QY", 
            "CCADKAsyGS5ndF9tc2cuQWN0aW9uUmVxdWVzdHh6ZGQSMAoNTmV3QWN0aW9u", 
            "TGlzdBgJIAMoCzIZLmd0X21zZy5BY3Rpb25SZXF1ZXN0eHpkZBIVCg1MYXN0", 
            "QWN0b25TdGVwGAogASgFEi0KCkxhc3RBY3Rpb24YCyABKAsyGS5ndF9tc2cu", 
            "QWN0aW9uUmVxdWVzdHh6ZGQSJQoGR3JvdXBzGAwgAygLMhUuZ3RfbXNnLkNh", 
            "cmRHcm91cHh6ZGQSEwoLQ2hhbmdlQ2FyZHMYDSADKAUSFAoMQ2hhbmdlZENh", 
            "cmRzGA4gAygFEhIKCk5vV2luU3VpdGUYDyABKAUSEQoJU2FmZUNhcmRzGBAg", 
            "AygFEhEKCVRpbmdDYXJkcxgRIAMoBRISCgpHYW5nMUNhcmRzGBIgAygFEhEK", 
            "CVBlbmdDYXJkcxgTIAMoBRIRCglQbGF5Q2FyZHMYFCADKAUi9QQKDlRhYmxl", 
            "U3RhdHN4emRkEg8KB1RhYmxlSUQYASACKAUSJAoFU3RhZ2UYAiACKA4yFS5n", 
            "dF9tc2cuR2FtZVN0YWdleHpkZBIaCgRyYW5rGAMgAigOMgwuZ3RfbXNnLlJh", 
            "bmsSGgoEcnVsZRgEIAIoDjIMLmd0X21zZy5SdWxlEgwKBFN0ZXAYBSACKAUS", 
            "GQoRTmV4dEFjdGlvblRpbWVPdXQYBiACKAUSDgoGTXlTZWF0GAcgAigFEhEK", 
            "CUJhc2VQb2ludBgIIAIoBRITCgdOb3dTZWF0GAkgAygFQgIQARItCglTZWF0", 
            "VXNlcjEYCiABKAsyGi5ndF9tc2cuVGFibGVVc2VyU3RhdHN4emRkEi0KCVNl", 
            "YXRVc2VyMhgLIAEoCzIaLmd0X21zZy5UYWJsZVVzZXJTdGF0c3h6ZGQSLQoJ", 
            "U2VhdFVzZXIzGAwgASgLMhouZ3RfbXNnLlRhYmxlVXNlclN0YXRzeHpkZBIt", 
            "CglTZWF0VXNlcjQYDSABKAsyGi5ndF9tc2cuVGFibGVVc2VyU3RhdHN4emRk", 
            "Eg0KBVJvdW5kGA4gASgFEhAKCEhvc3RTZWF0GA8gASgFEgoKAlNaGBAgASgF", 
            "EhYKDkxhc3RBY3Rpb25TZWF0GBEgASgFEhEKCUxlZnRDYXJkcxgSIAEoBRIT", 
            "CgtTdGVwQ2hhbmdlZBgTIAEoBRISCgpJc1BsYXlDYXJkGBQgASgFEhAKCERy", 
            "YXdDYXJkGBUgASgFEi0KCkxhc3RBY3Rpb24YFiABKAsyGS5ndF9tc2cuQWN0", 
            "aW9uUmVxdWVzdHh6ZGQSFQoNTGVmdFBsYXlUaW1lcxgXIAEoBSLWAgoTVGFi", 
            "bGVVc2VyUmVzdWx0eHpkZBIfCgl1c2VyX2luZm8YASABKAsyDC5ndF9tc2cu", 
            "VXNlchIPCgdOb3dTZWF0GAIgAigFEikKB0xvc3RXaW4YAyABKAsyGC5ndF9t", 
            "c2cuSXRlbUNoYW5nZWRFdmVudBILCgNUYXgYBCABKAUSDgoGSXNIb3N0GAUg", 
            "ASgIEgwKBFJhdGUYBiABKAUSJgoHV2luVHlwZRgHIAEoDjIVLmd0X21zZy5D", 
            "YXJkc1R5cGV4emRkEhEKCUhhbmRDYXJkcxgIIAMoBRIlCgZHcm91cHMYCSAD", 
            "KAsyFS5ndF9tc2cuQ2FyZEdyb3VweHpkZBIxCg1ydW50aW1lcmVzdWx0GAog", 
            "AygLMhouZ3RfbXNnLlRhYmxlUnVuVGltZVJlc3VsdBIRCglQbGF5Q2FyZHMY", 
            "CyADKAUSDwoHV2luQ2FyZBgMIAEoBSK3AgoTUm91bmRFbmRlZEV2ZW50eHpk", 
            "ZBIPCgdUYWJsZUlEGAEgAigFEg4KBk15U2VhdBgCIAIoBRIOCgZIb3N0bHcY", 
            "AyACKAUSEQoJQmFzZVBvaW50GAQgAigFEhwKFE5leHRTdGFydFRpbWVvdXRT", 
            "ZWNzGAUgAigFEi4KCVNlYXRVc2VyMRgGIAEoCzIbLmd0X21zZy5UYWJsZVVz", 
            "ZXJSZXN1bHR4emRkEi4KCVNlYXRVc2VyMhgHIAEoCzIbLmd0X21zZy5UYWJs", 
            "ZVVzZXJSZXN1bHR4emRkEi4KCVNlYXRVc2VyMxgIIAEoCzIbLmd0X21zZy5U", 
            "YWJsZVVzZXJSZXN1bHR4emRkEi4KCVNlYXRVc2VyNBgJIAEoCzIbLmd0X21z", 
            "Zy5UYWJsZVVzZXJSZXN1bHR4emRkIhsKGUZvcmNlRXhpdFRhYmxlUmVxdWVz", 
            "dHh6ZGQivAEKGkZvcmNlRXhpdFRhYmxlUmVzcG9uc2V4emRkEjUKBGNvZGUY", 
            "ASACKA4yJy5ndF9tc2cuRm9yY2VFeGl0VGFibGVSZXNwb25zZXh6ZGQuQ29k", 
            "ZSJnCgRDb2RlEgoKBk5vcm1hbBAAEgoKBkdpdmVVcBABEhEKDU5vRW5vdWdo", 
            "TW9uZXkQAhIPCgtDaGFuZ2VUYWJsZRADEhEKDVBsYXlpbmdOb0V4aXQQBBIQ", 
            "CgxUYWJsZVJlbGVhc2UQBSIiChNHYW1lTGlmZVJlcXVlc3R4emRkEgsKA3Vp", 
            "ZBgBIAIoCSLaAwoUR2FtZUxpZmVSZXNwb25zZXh6ZGQSLwoEY29kZRgBIAIo", 
            "DjIhLmd0X21zZy5HYW1lTGlmZVJlc3BvbnNleHpkZC5Db2RlEh8KCXVzZXJf", 
            "aW5mbxgCIAIoCzIMLmd0X21zZy5Vc2VyEhAKCHdpblRpbWVzGAMgASgFEhEK", 
            "CWxvc3RUaW1lcxgEIAEoBRITCgtjb250aW51ZVdpbhgFIAEoBRIWCg5sZXZl", 
            "bDFXaW5DaGlwcxgGIAEoAxIaChJsZXZlbDFXaW5DaGlwc1JhbmsYByABKAUS", 
            "FgoObGV2ZWwyV2luQ2hpcHMYCCABKAMSGgoSbGV2ZWwyV2luQ2hpcHNSYW5r", 
            "GAkgASgFEhYKDmxldmVsM1dpbkNoaXBzGAogASgDEhoKEmxldmVsM1dpbkNo", 
            "aXBzUmFuaxgLIAEoBRIWCg5sZXZlbDRXaW5DaGlwcxgMIAEoAxIaChJsZXZl", 
            "bDRXaW5DaGlwc1JhbmsYDSABKAUSFgoObGV2ZWw1V2luQ2hpcHMYDiABKAMS", 
            "GgoSbGV2ZWw1V2luQ2hpcHNSYW5rGA8gASgFEhYKDmdhbWVBbGxVc2VyTnVt", 
            "GBAgASgFIhoKBENvZGUSBgoCT2sQABIKCgZGYWlsZWQQASIZChdHYW1lUmFu", 
            "a0xpc3RSZXF1ZXN0eHpkZCK1AQoYR2FtZVJhbmtMaXN0UmVzcG9uc2V4emRk", 
            "EjMKBGNvZGUYASACKA4yJS5ndF9tc2cuR2FtZVJhbmtMaXN0UmVzcG9uc2V4", 
            "emRkLkNvZGUSCwoDdWlkGAIgAigJEhUKDWRheV93aW5fY2hpcHMYAyADKAkS", 
            "EQoJYWxsX3RpbWVzGAQgAygJEhEKCWFsbF9jaGlwcxgFIAMoCSIaCgRDb2Rl", 
            "EgYKAk9rEAASCgoGRmFpbGVkEAEiFgoUR2FtZVJlYWR5UmVxdWVzdHh6ZGQi", 
            "egoVR2FtZVJlYWR5UmVzcG9uc2V4emRkEjAKBGNvZGUYASACKA4yIi5ndF9t", 
            "c2cuR2FtZVJlYWR5UmVzcG9uc2V4emRkLkNvZGUSEwoLcGxheWVyUmVhZHkY", 
            "AiADKAUiGgoEQ29kZRIGCgJPSxAAEgoKBkZhaWxlZBABIogCChJUYWJsZVJ1", 
            "blRpbWVSZXN1bHQSEAoISXRlbVR5cGUYASACKAUSDQoFdG91aWQYAiADKAkS", 
            "DQoFdG9OdW0YAyADKAMSDQoFdG9UYXgYBCADKAMSDwoHZnJvbVVpZBgFIAMo", 
            "CRIPCgdmcm9tbnVtGAYgAygDEhAKCGZyb21yYXRlGAcgAygDEhIKCnJlc3Vs", 
            "dFR5cGUYCCACKAUSEAoIZ2FuZ3JhdGUYCSABKAUSEAoIZ2VuZ3JhdGUYCiAB", 
            "KAUSEgoKZ2FuZ2ZvbGxvdxgLIAEoBRIPCgdnYW5ncGFvGAwgASgFEhEKCXFp", 
            "YW5nZ2FuZxgNIAEoBRIPCgdiYW9zZWF0GA4gASgFImwKCkdNSW5mb3h6ZGQS", 
            "FgoKSGFuZENhcmRzMRgBIAMoBUICEAESFgoKSGFuZENhcmRzMhgCIAMoBUIC", 
            "EAESFgoKSGFuZENhcmRzMxgDIAMoBUICEAESFgoKSGFuZENhcmRzNBgEIAMo", 
            "BUICEAEiGwoZVGFibGVQbGF5U3RhdGVSZXF1ZXN0eHpkZCJbChFVc2VyUGxh", 
            "eVN0YXRleHpkZBILCgN1aWQYASACKAkSDAoEbmljaxgCIAIoCRINCgV0aW1l", 
            "cxgDIAEoBRIQCgh3aW50aW1lcxgEIAEoBRIKCgJsdxgFIAEoAyJLChpUYWJs", 
            "ZVBsYXlTdGF0ZVJlc3BvbnNleHpkZBItCgpVc2VyU3RhdGVzGAEgAygLMhku", 
            "Z3RfbXNnLlVzZXJQbGF5U3RhdGV4emRkKpgCCg1DYXJkc1R5cGV4emRkEgsK", 
            "B0VyclR5cGUQABIKCgZMb3dXaW4QARIMCghQZW5nUGVuZxACEgwKCEFsbENv", 
            "bG9yEAMSCwoHT25lTmluZRAEEgkKBVBhaXI3EAUSDAoIQWxsT3RoZXIQBhIS", 
            "Cg5BbGxDb2xvclBlblBlbhAHEg0KCUdvbGRQYWlyNxAIEhEKDUFsbENvbG9y", 
            "UGFpcjcQCRITCg9BbGxDb2xvck9uZU5pbmUQChIPCgtBbGxPdGhlcjI1OBAL", 
            "EhQKEEFsbENvbG9yQWxsT3RoZXIQDBIKCgZTa3lXaW4QDRIMCghFYXJ0aFdp", 
            "bhAOEhUKEUdvbGRBbGxDb2xvclBhaXI3EA8SCQoFQWxsMTgQECopCg1HYW1l", 
          "U3RhZ2V4emRkEgsKB1dhaXRpbmcQABILCgdQbGF5aW5nEAE="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_gt_msg_JoinFreeRequestxzdd__Descriptor = Descriptor.MessageTypes[0];
        internal__static_gt_msg_JoinFreeRequestxzdd__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.JoinFreeRequestxzdd, global::gt_msg.JoinFreeRequestxzdd.Builder>(internal__static_gt_msg_JoinFreeRequestxzdd__Descriptor,
                new string[] { "UserId", "Rule", "Rank", "TableId", "JoinPassword", "BasePoint", "Canplaytimes", });
        internal__static_gt_msg_JoinFreeResponsexzdd__Descriptor = Descriptor.MessageTypes[1];
        internal__static_gt_msg_JoinFreeResponsexzdd__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.JoinFreeResponsexzdd, global::gt_msg.JoinFreeResponsexzdd.Builder>(internal__static_gt_msg_JoinFreeResponsexzdd__Descriptor,
                new string[] { "Code", "ReconnectedUser", "MinCoins", "HasBasicLiving", "BasicLivingAllTimes", "BasicLivingUseTimes", "BasicLivingCoins", "RankRequest", "Rank", "GameStats", "TablePassWord", "ItemType", });
        internal__static_gt_msg_ActionRequestxzdd__Descriptor = Descriptor.MessageTypes[2];
        internal__static_gt_msg_ActionRequestxzdd__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.ActionRequestxzdd, global::gt_msg.ActionRequestxzdd.Builder>(internal__static_gt_msg_ActionRequestxzdd__Descriptor,
                new string[] { "Code", "Cards1", "Cards2", "CardType", });
        internal__static_gt_msg_ActionResponsexzdd__Descriptor = Descriptor.MessageTypes[3];
        internal__static_gt_msg_ActionResponsexzdd__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.ActionResponsexzdd, global::gt_msg.ActionResponsexzdd.Builder>(internal__static_gt_msg_ActionResponsexzdd__Descriptor,
                new string[] { "Code", });
        internal__static_gt_msg_CardGroupxzdd__Descriptor = Descriptor.MessageTypes[4];
        internal__static_gt_msg_CardGroupxzdd__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.CardGroupxzdd, global::gt_msg.CardGroupxzdd.Builder>(internal__static_gt_msg_CardGroupxzdd__Descriptor,
                new string[] { "GroupType", "Cards", "Lznum", });
        internal__static_gt_msg_TableUserStatsxzdd__Descriptor = Descriptor.MessageTypes[5];
        internal__static_gt_msg_TableUserStatsxzdd__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.TableUserStatsxzdd, global::gt_msg.TableUserStatsxzdd.Builder>(internal__static_gt_msg_TableUserStatsxzdd__Descriptor,
                new string[] { "UserInfo", "NowSeat", "State", "HandCards", "IsHost", "LeftCards", "TG", "OldActionList", "NewActionList", "LastActonStep", "LastAction", "Groups", "ChangeCards", "ChangedCards", "NoWinSuite", "SafeCards", "TingCards", "Gang1Cards", "PengCards", "PlayCards", });
        internal__static_gt_msg_TableStatsxzdd__Descriptor = Descriptor.MessageTypes[6];
        internal__static_gt_msg_TableStatsxzdd__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.TableStatsxzdd, global::gt_msg.TableStatsxzdd.Builder>(internal__static_gt_msg_TableStatsxzdd__Descriptor,
                new string[] { "TableID", "Stage", "Rank", "Rule", "Step", "NextActionTimeOut", "MySeat", "BasePoint", "NowSeat", "SeatUser1", "SeatUser2", "SeatUser3", "SeatUser4", "Round", "HostSeat", "SZ", "LastActionSeat", "LeftCards", "StepChanged", "IsPlayCard", "DrawCard", "LastAction", "LeftPlayTimes", });
        internal__static_gt_msg_TableUserResultxzdd__Descriptor = Descriptor.MessageTypes[7];
        internal__static_gt_msg_TableUserResultxzdd__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.TableUserResultxzdd, global::gt_msg.TableUserResultxzdd.Builder>(internal__static_gt_msg_TableUserResultxzdd__Descriptor,
                new string[] { "UserInfo", "NowSeat", "LostWin", "Tax", "IsHost", "Rate", "WinType", "HandCards", "Groups", "Runtimeresult", "PlayCards", "WinCard", });
        internal__static_gt_msg_RoundEndedEventxzdd__Descriptor = Descriptor.MessageTypes[8];
        internal__static_gt_msg_RoundEndedEventxzdd__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.RoundEndedEventxzdd, global::gt_msg.RoundEndedEventxzdd.Builder>(internal__static_gt_msg_RoundEndedEventxzdd__Descriptor,
                new string[] { "TableID", "MySeat", "Hostlw", "BasePoint", "NextStartTimeoutSecs", "SeatUser1", "SeatUser2", "SeatUser3", "SeatUser4", });
        internal__static_gt_msg_ForceExitTableRequestxzdd__Descriptor = Descriptor.MessageTypes[9];
        internal__static_gt_msg_ForceExitTableRequestxzdd__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.ForceExitTableRequestxzdd, global::gt_msg.ForceExitTableRequestxzdd.Builder>(internal__static_gt_msg_ForceExitTableRequestxzdd__Descriptor,
                new string[] { });
        internal__static_gt_msg_ForceExitTableResponsexzdd__Descriptor = Descriptor.MessageTypes[10];
        internal__static_gt_msg_ForceExitTableResponsexzdd__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.ForceExitTableResponsexzdd, global::gt_msg.ForceExitTableResponsexzdd.Builder>(internal__static_gt_msg_ForceExitTableResponsexzdd__Descriptor,
                new string[] { "Code", });
        internal__static_gt_msg_GameLifeRequestxzdd__Descriptor = Descriptor.MessageTypes[11];
        internal__static_gt_msg_GameLifeRequestxzdd__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.GameLifeRequestxzdd, global::gt_msg.GameLifeRequestxzdd.Builder>(internal__static_gt_msg_GameLifeRequestxzdd__Descriptor,
                new string[] { "Uid", });
        internal__static_gt_msg_GameLifeResponsexzdd__Descriptor = Descriptor.MessageTypes[12];
        internal__static_gt_msg_GameLifeResponsexzdd__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.GameLifeResponsexzdd, global::gt_msg.GameLifeResponsexzdd.Builder>(internal__static_gt_msg_GameLifeResponsexzdd__Descriptor,
                new string[] { "Code", "UserInfo", "WinTimes", "LostTimes", "ContinueWin", "Level1WinChips", "Level1WinChipsRank", "Level2WinChips", "Level2WinChipsRank", "Level3WinChips", "Level3WinChipsRank", "Level4WinChips", "Level4WinChipsRank", "Level5WinChips", "Level5WinChipsRank", "GameAllUserNum", });
        internal__static_gt_msg_GameRankListRequestxzdd__Descriptor = Descriptor.MessageTypes[13];
        internal__static_gt_msg_GameRankListRequestxzdd__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.GameRankListRequestxzdd, global::gt_msg.GameRankListRequestxzdd.Builder>(internal__static_gt_msg_GameRankListRequestxzdd__Descriptor,
                new string[] { });
        internal__static_gt_msg_GameRankListResponsexzdd__Descriptor = Descriptor.MessageTypes[14];
        internal__static_gt_msg_GameRankListResponsexzdd__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.GameRankListResponsexzdd, global::gt_msg.GameRankListResponsexzdd.Builder>(internal__static_gt_msg_GameRankListResponsexzdd__Descriptor,
                new string[] { "Code", "Uid", "DayWinChips", "AllTimes", "AllChips", });
        internal__static_gt_msg_GameReadyRequestxzdd__Descriptor = Descriptor.MessageTypes[15];
        internal__static_gt_msg_GameReadyRequestxzdd__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.GameReadyRequestxzdd, global::gt_msg.GameReadyRequestxzdd.Builder>(internal__static_gt_msg_GameReadyRequestxzdd__Descriptor,
                new string[] { });
        internal__static_gt_msg_GameReadyResponsexzdd__Descriptor = Descriptor.MessageTypes[16];
        internal__static_gt_msg_GameReadyResponsexzdd__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.GameReadyResponsexzdd, global::gt_msg.GameReadyResponsexzdd.Builder>(internal__static_gt_msg_GameReadyResponsexzdd__Descriptor,
                new string[] { "Code", "PlayerReady", });
        internal__static_gt_msg_TableRunTimeResult__Descriptor = Descriptor.MessageTypes[17];
        internal__static_gt_msg_TableRunTimeResult__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.TableRunTimeResult, global::gt_msg.TableRunTimeResult.Builder>(internal__static_gt_msg_TableRunTimeResult__Descriptor,
                new string[] { "ItemType", "Touid", "ToNum", "ToTax", "FromUid", "Fromnum", "Fromrate", "ResultType", "Gangrate", "Gengrate", "Gangfollow", "Gangpao", "Qianggang", "Baoseat", });
        internal__static_gt_msg_GMInfoxzdd__Descriptor = Descriptor.MessageTypes[18];
        internal__static_gt_msg_GMInfoxzdd__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.GMInfoxzdd, global::gt_msg.GMInfoxzdd.Builder>(internal__static_gt_msg_GMInfoxzdd__Descriptor,
                new string[] { "HandCards1", "HandCards2", "HandCards3", "HandCards4", });
        internal__static_gt_msg_TablePlayStateRequestxzdd__Descriptor = Descriptor.MessageTypes[19];
        internal__static_gt_msg_TablePlayStateRequestxzdd__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.TablePlayStateRequestxzdd, global::gt_msg.TablePlayStateRequestxzdd.Builder>(internal__static_gt_msg_TablePlayStateRequestxzdd__Descriptor,
                new string[] { });
        internal__static_gt_msg_UserPlayStatexzdd__Descriptor = Descriptor.MessageTypes[20];
        internal__static_gt_msg_UserPlayStatexzdd__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.UserPlayStatexzdd, global::gt_msg.UserPlayStatexzdd.Builder>(internal__static_gt_msg_UserPlayStatexzdd__Descriptor,
                new string[] { "Uid", "Nick", "Times", "Wintimes", "Lw", });
        internal__static_gt_msg_TablePlayStateResponsexzdd__Descriptor = Descriptor.MessageTypes[21];
        internal__static_gt_msg_TablePlayStateResponsexzdd__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.TablePlayStateResponsexzdd, global::gt_msg.TablePlayStateResponsexzdd.Builder>(internal__static_gt_msg_TablePlayStateResponsexzdd__Descriptor,
                new string[] { "UserStates", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::gt_msg.GtBase.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum CardsTypexzdd {
    ErrType = 0,
    LowWin = 1,
    PengPeng = 2,
    AllColor = 3,
    OneNine = 4,
    Pair7 = 5,
    AllOther = 6,
    AllColorPenPen = 7,
    GoldPair7 = 8,
    AllColorPair7 = 9,
    AllColorOneNine = 10,
    AllOther258 = 11,
    AllColorAllOther = 12,
    SkyWin = 13,
    EarthWin = 14,
    GoldAllColorPair7 = 15,
    All18 = 16,
  }
  
  public enum GameStagexzdd {
    Waiting = 0,
    Playing = 1,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class JoinFreeRequestxzdd : pb::GeneratedMessage<JoinFreeRequestxzdd, JoinFreeRequestxzdd.Builder> {
    private JoinFreeRequestxzdd() { }
    private static readonly JoinFreeRequestxzdd defaultInstance = new JoinFreeRequestxzdd().MakeReadOnly();
    private static readonly string[] _joinFreeRequestxzddFieldNames = new string[] { "basePoint", "canplaytimes", "join_password", "rank", "rule", "table_id", "user_id" };
    private static readonly uint[] _joinFreeRequestxzddFieldTags = new uint[] { 48, 56, 42, 24, 16, 32, 10 };
    public static JoinFreeRequestxzdd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override JoinFreeRequestxzdd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override JoinFreeRequestxzdd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_JoinFreeRequestxzdd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<JoinFreeRequestxzdd, JoinFreeRequestxzdd.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_JoinFreeRequestxzdd__FieldAccessorTable; }
    }
    
    public const int UserIdFieldNumber = 1;
    private bool hasUserId;
    private string userId_ = "";
    public bool HasUserId {
      get { return hasUserId; }
    }
    public string UserId {
      get { return userId_; }
    }
    
    public const int RuleFieldNumber = 2;
    private bool hasRule;
    private global::gt_msg.Rule rule_ = global::gt_msg.Rule.RuleNormal;
    public bool HasRule {
      get { return hasRule; }
    }
    public global::gt_msg.Rule Rule {
      get { return rule_; }
    }
    
    public const int RankFieldNumber = 3;
    private bool hasRank;
    private global::gt_msg.Rank rank_ = global::gt_msg.Rank.LV0;
    public bool HasRank {
      get { return hasRank; }
    }
    public global::gt_msg.Rank Rank {
      get { return rank_; }
    }
    
    public const int TableIdFieldNumber = 4;
    private bool hasTableId;
    private int tableId_;
    public bool HasTableId {
      get { return hasTableId; }
    }
    public int TableId {
      get { return tableId_; }
    }
    
    public const int JoinPasswordFieldNumber = 5;
    private bool hasJoinPassword;
    private string joinPassword_ = "";
    public bool HasJoinPassword {
      get { return hasJoinPassword; }
    }
    public string JoinPassword {
      get { return joinPassword_; }
    }
    
    public const int BasePointFieldNumber = 6;
    private bool hasBasePoint;
    private int basePoint_;
    public bool HasBasePoint {
      get { return hasBasePoint; }
    }
    public int BasePoint {
      get { return basePoint_; }
    }
    
    public const int CanplaytimesFieldNumber = 7;
    private bool hasCanplaytimes;
    private int canplaytimes_;
    public bool HasCanplaytimes {
      get { return hasCanplaytimes; }
    }
    public int Canplaytimes {
      get { return canplaytimes_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUserId) return false;
        if (!hasRule) return false;
        if (!hasRank) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _joinFreeRequestxzddFieldNames;
      if (hasUserId) {
        output.WriteString(1, field_names[6], UserId);
      }
      if (hasRule) {
        output.WriteEnum(2, field_names[4], (int) Rule, Rule);
      }
      if (hasRank) {
        output.WriteEnum(3, field_names[3], (int) Rank, Rank);
      }
      if (hasTableId) {
        output.WriteInt32(4, field_names[5], TableId);
      }
      if (hasJoinPassword) {
        output.WriteString(5, field_names[2], JoinPassword);
      }
      if (hasBasePoint) {
        output.WriteInt32(6, field_names[0], BasePoint);
      }
      if (hasCanplaytimes) {
        output.WriteInt32(7, field_names[1], Canplaytimes);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUserId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, UserId);
      }
      if (hasRule) {
        size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Rule);
      }
      if (hasRank) {
        size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Rank);
      }
      if (hasTableId) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, TableId);
      }
      if (hasJoinPassword) {
        size += pb::CodedOutputStream.ComputeStringSize(5, JoinPassword);
      }
      if (hasBasePoint) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, BasePoint);
      }
      if (hasCanplaytimes) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, Canplaytimes);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static JoinFreeRequestxzdd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JoinFreeRequestxzdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JoinFreeRequestxzdd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JoinFreeRequestxzdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JoinFreeRequestxzdd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JoinFreeRequestxzdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static JoinFreeRequestxzdd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static JoinFreeRequestxzdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static JoinFreeRequestxzdd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JoinFreeRequestxzdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private JoinFreeRequestxzdd MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(JoinFreeRequestxzdd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<JoinFreeRequestxzdd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(JoinFreeRequestxzdd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private JoinFreeRequestxzdd result;
      
      private JoinFreeRequestxzdd PrepareBuilder() {
        if (resultIsReadOnly) {
          JoinFreeRequestxzdd original = result;
          result = new JoinFreeRequestxzdd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override JoinFreeRequestxzdd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.JoinFreeRequestxzdd.Descriptor; }
      }
      
      public override JoinFreeRequestxzdd DefaultInstanceForType {
        get { return global::gt_msg.JoinFreeRequestxzdd.DefaultInstance; }
      }
      
      public override JoinFreeRequestxzdd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is JoinFreeRequestxzdd) {
          return MergeFrom((JoinFreeRequestxzdd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(JoinFreeRequestxzdd other) {
        if (other == global::gt_msg.JoinFreeRequestxzdd.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        if (other.HasRule) {
          Rule = other.Rule;
        }
        if (other.HasRank) {
          Rank = other.Rank;
        }
        if (other.HasTableId) {
          TableId = other.TableId;
        }
        if (other.HasJoinPassword) {
          JoinPassword = other.JoinPassword;
        }
        if (other.HasBasePoint) {
          BasePoint = other.BasePoint;
        }
        if (other.HasCanplaytimes) {
          Canplaytimes = other.Canplaytimes;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_joinFreeRequestxzddFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _joinFreeRequestxzddFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUserId = input.ReadString(ref result.userId_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.rule_, out unknown)) {
                result.hasRule = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.rank_, out unknown)) {
                result.hasRank = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
            case 32: {
              result.hasTableId = input.ReadInt32(ref result.tableId_);
              break;
            }
            case 42: {
              result.hasJoinPassword = input.ReadString(ref result.joinPassword_);
              break;
            }
            case 48: {
              result.hasBasePoint = input.ReadInt32(ref result.basePoint_);
              break;
            }
            case 56: {
              result.hasCanplaytimes = input.ReadInt32(ref result.canplaytimes_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public string UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = "";
        return this;
      }
      
      public bool HasRule {
       get { return result.hasRule; }
      }
      public global::gt_msg.Rule Rule {
        get { return result.Rule; }
        set { SetRule(value); }
      }
      public Builder SetRule(global::gt_msg.Rule value) {
        PrepareBuilder();
        result.hasRule = true;
        result.rule_ = value;
        return this;
      }
      public Builder ClearRule() {
        PrepareBuilder();
        result.hasRule = false;
        result.rule_ = global::gt_msg.Rule.RuleNormal;
        return this;
      }
      
      public bool HasRank {
       get { return result.hasRank; }
      }
      public global::gt_msg.Rank Rank {
        get { return result.Rank; }
        set { SetRank(value); }
      }
      public Builder SetRank(global::gt_msg.Rank value) {
        PrepareBuilder();
        result.hasRank = true;
        result.rank_ = value;
        return this;
      }
      public Builder ClearRank() {
        PrepareBuilder();
        result.hasRank = false;
        result.rank_ = global::gt_msg.Rank.LV0;
        return this;
      }
      
      public bool HasTableId {
        get { return result.hasTableId; }
      }
      public int TableId {
        get { return result.TableId; }
        set { SetTableId(value); }
      }
      public Builder SetTableId(int value) {
        PrepareBuilder();
        result.hasTableId = true;
        result.tableId_ = value;
        return this;
      }
      public Builder ClearTableId() {
        PrepareBuilder();
        result.hasTableId = false;
        result.tableId_ = 0;
        return this;
      }
      
      public bool HasJoinPassword {
        get { return result.hasJoinPassword; }
      }
      public string JoinPassword {
        get { return result.JoinPassword; }
        set { SetJoinPassword(value); }
      }
      public Builder SetJoinPassword(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasJoinPassword = true;
        result.joinPassword_ = value;
        return this;
      }
      public Builder ClearJoinPassword() {
        PrepareBuilder();
        result.hasJoinPassword = false;
        result.joinPassword_ = "";
        return this;
      }
      
      public bool HasBasePoint {
        get { return result.hasBasePoint; }
      }
      public int BasePoint {
        get { return result.BasePoint; }
        set { SetBasePoint(value); }
      }
      public Builder SetBasePoint(int value) {
        PrepareBuilder();
        result.hasBasePoint = true;
        result.basePoint_ = value;
        return this;
      }
      public Builder ClearBasePoint() {
        PrepareBuilder();
        result.hasBasePoint = false;
        result.basePoint_ = 0;
        return this;
      }
      
      public bool HasCanplaytimes {
        get { return result.hasCanplaytimes; }
      }
      public int Canplaytimes {
        get { return result.Canplaytimes; }
        set { SetCanplaytimes(value); }
      }
      public Builder SetCanplaytimes(int value) {
        PrepareBuilder();
        result.hasCanplaytimes = true;
        result.canplaytimes_ = value;
        return this;
      }
      public Builder ClearCanplaytimes() {
        PrepareBuilder();
        result.hasCanplaytimes = false;
        result.canplaytimes_ = 0;
        return this;
      }
    }
    static JoinFreeRequestxzdd() {
      object.ReferenceEquals(global::gt_msg.GtXzdd.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class JoinFreeResponsexzdd : pb::GeneratedMessage<JoinFreeResponsexzdd, JoinFreeResponsexzdd.Builder> {
    private JoinFreeResponsexzdd() { }
    private static readonly JoinFreeResponsexzdd defaultInstance = new JoinFreeResponsexzdd().MakeReadOnly();
    private static readonly string[] _joinFreeResponsexzddFieldNames = new string[] { "ItemType", "TablePassWord", "basic_living_all_times", "basic_living_coins", "basic_living_use_times", "code", "game_stats", "has_basic_living", "min_coins", "rank", "rank_request", "reconnected_user" };
    private static readonly uint[] _joinFreeResponsexzddFieldTags = new uint[] { 96, 90, 40, 56, 48, 8, 82, 32, 24, 72, 64, 16 };
    public static JoinFreeResponsexzdd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override JoinFreeResponsexzdd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override JoinFreeResponsexzdd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_JoinFreeResponsexzdd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<JoinFreeResponsexzdd, JoinFreeResponsexzdd.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_JoinFreeResponsexzdd__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum JoinFreeResponseCode {
        Ok = 0,
        MinimumCoinsRequired = 1,
        MinimumDiamondRequired = 2,
        NoTableAvail = 3,
        CreateErr = 4,
        RoomIdErr = 5,
        PassWordErr = 6,
        Other = 7,
      }
      
    }
    #endregion
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private global::gt_msg.JoinFreeResponsexzdd.Types.JoinFreeResponseCode code_ = global::gt_msg.JoinFreeResponsexzdd.Types.JoinFreeResponseCode.Ok;
    public bool HasCode {
      get { return hasCode; }
    }
    public global::gt_msg.JoinFreeResponsexzdd.Types.JoinFreeResponseCode Code {
      get { return code_; }
    }
    
    public const int ReconnectedUserFieldNumber = 2;
    private bool hasReconnectedUser;
    private bool reconnectedUser_;
    public bool HasReconnectedUser {
      get { return hasReconnectedUser; }
    }
    public bool ReconnectedUser {
      get { return reconnectedUser_; }
    }
    
    public const int MinCoinsFieldNumber = 3;
    private bool hasMinCoins;
    private int minCoins_;
    public bool HasMinCoins {
      get { return hasMinCoins; }
    }
    public int MinCoins {
      get { return minCoins_; }
    }
    
    public const int HasBasicLivingFieldNumber = 4;
    private bool hasHasBasicLiving;
    private bool hasBasicLiving_;
    public bool HasHasBasicLiving {
      get { return hasHasBasicLiving; }
    }
    public bool HasBasicLiving {
      get { return hasBasicLiving_; }
    }
    
    public const int BasicLivingAllTimesFieldNumber = 5;
    private bool hasBasicLivingAllTimes;
    private int basicLivingAllTimes_;
    public bool HasBasicLivingAllTimes {
      get { return hasBasicLivingAllTimes; }
    }
    public int BasicLivingAllTimes {
      get { return basicLivingAllTimes_; }
    }
    
    public const int BasicLivingUseTimesFieldNumber = 6;
    private bool hasBasicLivingUseTimes;
    private int basicLivingUseTimes_;
    public bool HasBasicLivingUseTimes {
      get { return hasBasicLivingUseTimes; }
    }
    public int BasicLivingUseTimes {
      get { return basicLivingUseTimes_; }
    }
    
    public const int BasicLivingCoinsFieldNumber = 7;
    private bool hasBasicLivingCoins;
    private int basicLivingCoins_;
    public bool HasBasicLivingCoins {
      get { return hasBasicLivingCoins; }
    }
    public int BasicLivingCoins {
      get { return basicLivingCoins_; }
    }
    
    public const int RankRequestFieldNumber = 8;
    private bool hasRankRequest;
    private global::gt_msg.Rank rankRequest_ = global::gt_msg.Rank.LV0;
    public bool HasRankRequest {
      get { return hasRankRequest; }
    }
    public global::gt_msg.Rank RankRequest {
      get { return rankRequest_; }
    }
    
    public const int RankFieldNumber = 9;
    private bool hasRank;
    private global::gt_msg.Rank rank_ = global::gt_msg.Rank.LV0;
    public bool HasRank {
      get { return hasRank; }
    }
    public global::gt_msg.Rank Rank {
      get { return rank_; }
    }
    
    public const int GameStatsFieldNumber = 10;
    private bool hasGameStats;
    private global::gt_msg.TableStatsxzdd gameStats_;
    public bool HasGameStats {
      get { return hasGameStats; }
    }
    public global::gt_msg.TableStatsxzdd GameStats {
      get { return gameStats_ ?? global::gt_msg.TableStatsxzdd.DefaultInstance; }
    }
    
    public const int TablePassWordFieldNumber = 11;
    private bool hasTablePassWord;
    private string tablePassWord_ = "";
    public bool HasTablePassWord {
      get { return hasTablePassWord; }
    }
    public string TablePassWord {
      get { return tablePassWord_; }
    }
    
    public const int ItemTypeFieldNumber = 12;
    private bool hasItemType;
    private int itemType_;
    public bool HasItemType {
      get { return hasItemType; }
    }
    public int ItemType {
      get { return itemType_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        if (HasGameStats) {
          if (!GameStats.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _joinFreeResponsexzddFieldNames;
      if (hasCode) {
        output.WriteEnum(1, field_names[5], (int) Code, Code);
      }
      if (hasReconnectedUser) {
        output.WriteBool(2, field_names[11], ReconnectedUser);
      }
      if (hasMinCoins) {
        output.WriteInt32(3, field_names[8], MinCoins);
      }
      if (hasHasBasicLiving) {
        output.WriteBool(4, field_names[7], HasBasicLiving);
      }
      if (hasBasicLivingAllTimes) {
        output.WriteInt32(5, field_names[2], BasicLivingAllTimes);
      }
      if (hasBasicLivingUseTimes) {
        output.WriteInt32(6, field_names[4], BasicLivingUseTimes);
      }
      if (hasBasicLivingCoins) {
        output.WriteInt32(7, field_names[3], BasicLivingCoins);
      }
      if (hasRankRequest) {
        output.WriteEnum(8, field_names[10], (int) RankRequest, RankRequest);
      }
      if (hasRank) {
        output.WriteEnum(9, field_names[9], (int) Rank, Rank);
      }
      if (hasGameStats) {
        output.WriteMessage(10, field_names[6], GameStats);
      }
      if (hasTablePassWord) {
        output.WriteString(11, field_names[1], TablePassWord);
      }
      if (hasItemType) {
        output.WriteInt32(12, field_names[0], ItemType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCode) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Code);
      }
      if (hasReconnectedUser) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, ReconnectedUser);
      }
      if (hasMinCoins) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, MinCoins);
      }
      if (hasHasBasicLiving) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, HasBasicLiving);
      }
      if (hasBasicLivingAllTimes) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, BasicLivingAllTimes);
      }
      if (hasBasicLivingUseTimes) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, BasicLivingUseTimes);
      }
      if (hasBasicLivingCoins) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, BasicLivingCoins);
      }
      if (hasRankRequest) {
        size += pb::CodedOutputStream.ComputeEnumSize(8, (int) RankRequest);
      }
      if (hasRank) {
        size += pb::CodedOutputStream.ComputeEnumSize(9, (int) Rank);
      }
      if (hasGameStats) {
        size += pb::CodedOutputStream.ComputeMessageSize(10, GameStats);
      }
      if (hasTablePassWord) {
        size += pb::CodedOutputStream.ComputeStringSize(11, TablePassWord);
      }
      if (hasItemType) {
        size += pb::CodedOutputStream.ComputeInt32Size(12, ItemType);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static JoinFreeResponsexzdd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JoinFreeResponsexzdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JoinFreeResponsexzdd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JoinFreeResponsexzdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JoinFreeResponsexzdd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JoinFreeResponsexzdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static JoinFreeResponsexzdd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static JoinFreeResponsexzdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static JoinFreeResponsexzdd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JoinFreeResponsexzdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private JoinFreeResponsexzdd MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(JoinFreeResponsexzdd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<JoinFreeResponsexzdd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(JoinFreeResponsexzdd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private JoinFreeResponsexzdd result;
      
      private JoinFreeResponsexzdd PrepareBuilder() {
        if (resultIsReadOnly) {
          JoinFreeResponsexzdd original = result;
          result = new JoinFreeResponsexzdd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override JoinFreeResponsexzdd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.JoinFreeResponsexzdd.Descriptor; }
      }
      
      public override JoinFreeResponsexzdd DefaultInstanceForType {
        get { return global::gt_msg.JoinFreeResponsexzdd.DefaultInstance; }
      }
      
      public override JoinFreeResponsexzdd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is JoinFreeResponsexzdd) {
          return MergeFrom((JoinFreeResponsexzdd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(JoinFreeResponsexzdd other) {
        if (other == global::gt_msg.JoinFreeResponsexzdd.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        if (other.HasReconnectedUser) {
          ReconnectedUser = other.ReconnectedUser;
        }
        if (other.HasMinCoins) {
          MinCoins = other.MinCoins;
        }
        if (other.HasHasBasicLiving) {
          HasBasicLiving = other.HasBasicLiving;
        }
        if (other.HasBasicLivingAllTimes) {
          BasicLivingAllTimes = other.BasicLivingAllTimes;
        }
        if (other.HasBasicLivingUseTimes) {
          BasicLivingUseTimes = other.BasicLivingUseTimes;
        }
        if (other.HasBasicLivingCoins) {
          BasicLivingCoins = other.BasicLivingCoins;
        }
        if (other.HasRankRequest) {
          RankRequest = other.RankRequest;
        }
        if (other.HasRank) {
          Rank = other.Rank;
        }
        if (other.HasGameStats) {
          MergeGameStats(other.GameStats);
        }
        if (other.HasTablePassWord) {
          TablePassWord = other.TablePassWord;
        }
        if (other.HasItemType) {
          ItemType = other.ItemType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_joinFreeResponsexzddFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _joinFreeResponsexzddFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.code_, out unknown)) {
                result.hasCode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 16: {
              result.hasReconnectedUser = input.ReadBool(ref result.reconnectedUser_);
              break;
            }
            case 24: {
              result.hasMinCoins = input.ReadInt32(ref result.minCoins_);
              break;
            }
            case 32: {
              result.hasHasBasicLiving = input.ReadBool(ref result.hasBasicLiving_);
              break;
            }
            case 40: {
              result.hasBasicLivingAllTimes = input.ReadInt32(ref result.basicLivingAllTimes_);
              break;
            }
            case 48: {
              result.hasBasicLivingUseTimes = input.ReadInt32(ref result.basicLivingUseTimes_);
              break;
            }
            case 56: {
              result.hasBasicLivingCoins = input.ReadInt32(ref result.basicLivingCoins_);
              break;
            }
            case 64: {
              object unknown;
              if(input.ReadEnum(ref result.rankRequest_, out unknown)) {
                result.hasRankRequest = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(8, (ulong)(int)unknown);
              }
              break;
            }
            case 72: {
              object unknown;
              if(input.ReadEnum(ref result.rank_, out unknown)) {
                result.hasRank = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(9, (ulong)(int)unknown);
              }
              break;
            }
            case 82: {
              global::gt_msg.TableStatsxzdd.Builder subBuilder = global::gt_msg.TableStatsxzdd.CreateBuilder();
              if (result.hasGameStats) {
                subBuilder.MergeFrom(GameStats);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameStats = subBuilder.BuildPartial();
              break;
            }
            case 90: {
              result.hasTablePassWord = input.ReadString(ref result.tablePassWord_);
              break;
            }
            case 96: {
              result.hasItemType = input.ReadInt32(ref result.itemType_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
       get { return result.hasCode; }
      }
      public global::gt_msg.JoinFreeResponsexzdd.Types.JoinFreeResponseCode Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(global::gt_msg.JoinFreeResponsexzdd.Types.JoinFreeResponseCode value) {
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = global::gt_msg.JoinFreeResponsexzdd.Types.JoinFreeResponseCode.Ok;
        return this;
      }
      
      public bool HasReconnectedUser {
        get { return result.hasReconnectedUser; }
      }
      public bool ReconnectedUser {
        get { return result.ReconnectedUser; }
        set { SetReconnectedUser(value); }
      }
      public Builder SetReconnectedUser(bool value) {
        PrepareBuilder();
        result.hasReconnectedUser = true;
        result.reconnectedUser_ = value;
        return this;
      }
      public Builder ClearReconnectedUser() {
        PrepareBuilder();
        result.hasReconnectedUser = false;
        result.reconnectedUser_ = false;
        return this;
      }
      
      public bool HasMinCoins {
        get { return result.hasMinCoins; }
      }
      public int MinCoins {
        get { return result.MinCoins; }
        set { SetMinCoins(value); }
      }
      public Builder SetMinCoins(int value) {
        PrepareBuilder();
        result.hasMinCoins = true;
        result.minCoins_ = value;
        return this;
      }
      public Builder ClearMinCoins() {
        PrepareBuilder();
        result.hasMinCoins = false;
        result.minCoins_ = 0;
        return this;
      }
      
      public bool HasHasBasicLiving {
        get { return result.hasHasBasicLiving; }
      }
      public bool HasBasicLiving {
        get { return result.HasBasicLiving; }
        set { SetHasBasicLiving(value); }
      }
      public Builder SetHasBasicLiving(bool value) {
        PrepareBuilder();
        result.hasHasBasicLiving = true;
        result.hasBasicLiving_ = value;
        return this;
      }
      public Builder ClearHasBasicLiving() {
        PrepareBuilder();
        result.hasHasBasicLiving = false;
        result.hasBasicLiving_ = false;
        return this;
      }
      
      public bool HasBasicLivingAllTimes {
        get { return result.hasBasicLivingAllTimes; }
      }
      public int BasicLivingAllTimes {
        get { return result.BasicLivingAllTimes; }
        set { SetBasicLivingAllTimes(value); }
      }
      public Builder SetBasicLivingAllTimes(int value) {
        PrepareBuilder();
        result.hasBasicLivingAllTimes = true;
        result.basicLivingAllTimes_ = value;
        return this;
      }
      public Builder ClearBasicLivingAllTimes() {
        PrepareBuilder();
        result.hasBasicLivingAllTimes = false;
        result.basicLivingAllTimes_ = 0;
        return this;
      }
      
      public bool HasBasicLivingUseTimes {
        get { return result.hasBasicLivingUseTimes; }
      }
      public int BasicLivingUseTimes {
        get { return result.BasicLivingUseTimes; }
        set { SetBasicLivingUseTimes(value); }
      }
      public Builder SetBasicLivingUseTimes(int value) {
        PrepareBuilder();
        result.hasBasicLivingUseTimes = true;
        result.basicLivingUseTimes_ = value;
        return this;
      }
      public Builder ClearBasicLivingUseTimes() {
        PrepareBuilder();
        result.hasBasicLivingUseTimes = false;
        result.basicLivingUseTimes_ = 0;
        return this;
      }
      
      public bool HasBasicLivingCoins {
        get { return result.hasBasicLivingCoins; }
      }
      public int BasicLivingCoins {
        get { return result.BasicLivingCoins; }
        set { SetBasicLivingCoins(value); }
      }
      public Builder SetBasicLivingCoins(int value) {
        PrepareBuilder();
        result.hasBasicLivingCoins = true;
        result.basicLivingCoins_ = value;
        return this;
      }
      public Builder ClearBasicLivingCoins() {
        PrepareBuilder();
        result.hasBasicLivingCoins = false;
        result.basicLivingCoins_ = 0;
        return this;
      }
      
      public bool HasRankRequest {
       get { return result.hasRankRequest; }
      }
      public global::gt_msg.Rank RankRequest {
        get { return result.RankRequest; }
        set { SetRankRequest(value); }
      }
      public Builder SetRankRequest(global::gt_msg.Rank value) {
        PrepareBuilder();
        result.hasRankRequest = true;
        result.rankRequest_ = value;
        return this;
      }
      public Builder ClearRankRequest() {
        PrepareBuilder();
        result.hasRankRequest = false;
        result.rankRequest_ = global::gt_msg.Rank.LV0;
        return this;
      }
      
      public bool HasRank {
       get { return result.hasRank; }
      }
      public global::gt_msg.Rank Rank {
        get { return result.Rank; }
        set { SetRank(value); }
      }
      public Builder SetRank(global::gt_msg.Rank value) {
        PrepareBuilder();
        result.hasRank = true;
        result.rank_ = value;
        return this;
      }
      public Builder ClearRank() {
        PrepareBuilder();
        result.hasRank = false;
        result.rank_ = global::gt_msg.Rank.LV0;
        return this;
      }
      
      public bool HasGameStats {
       get { return result.hasGameStats; }
      }
      public global::gt_msg.TableStatsxzdd GameStats {
        get { return result.GameStats; }
        set { SetGameStats(value); }
      }
      public Builder SetGameStats(global::gt_msg.TableStatsxzdd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameStats = true;
        result.gameStats_ = value;
        return this;
      }
      public Builder SetGameStats(global::gt_msg.TableStatsxzdd.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGameStats = true;
        result.gameStats_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameStats(global::gt_msg.TableStatsxzdd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGameStats &&
            result.gameStats_ != global::gt_msg.TableStatsxzdd.DefaultInstance) {
            result.gameStats_ = global::gt_msg.TableStatsxzdd.CreateBuilder(result.gameStats_).MergeFrom(value).BuildPartial();
        } else {
          result.gameStats_ = value;
        }
        result.hasGameStats = true;
        return this;
      }
      public Builder ClearGameStats() {
        PrepareBuilder();
        result.hasGameStats = false;
        result.gameStats_ = null;
        return this;
      }
      
      public bool HasTablePassWord {
        get { return result.hasTablePassWord; }
      }
      public string TablePassWord {
        get { return result.TablePassWord; }
        set { SetTablePassWord(value); }
      }
      public Builder SetTablePassWord(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTablePassWord = true;
        result.tablePassWord_ = value;
        return this;
      }
      public Builder ClearTablePassWord() {
        PrepareBuilder();
        result.hasTablePassWord = false;
        result.tablePassWord_ = "";
        return this;
      }
      
      public bool HasItemType {
        get { return result.hasItemType; }
      }
      public int ItemType {
        get { return result.ItemType; }
        set { SetItemType(value); }
      }
      public Builder SetItemType(int value) {
        PrepareBuilder();
        result.hasItemType = true;
        result.itemType_ = value;
        return this;
      }
      public Builder ClearItemType() {
        PrepareBuilder();
        result.hasItemType = false;
        result.itemType_ = 0;
        return this;
      }
    }
    static JoinFreeResponsexzdd() {
      object.ReferenceEquals(global::gt_msg.GtXzdd.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ActionRequestxzdd : pb::GeneratedMessage<ActionRequestxzdd, ActionRequestxzdd.Builder> {
    private ActionRequestxzdd() { }
    private static readonly ActionRequestxzdd defaultInstance = new ActionRequestxzdd().MakeReadOnly();
    private static readonly string[] _actionRequestxzddFieldNames = new string[] { "CardType", "Cards1", "Cards2", "code" };
    private static readonly uint[] _actionRequestxzddFieldTags = new uint[] { 32, 18, 26, 8 };
    public static ActionRequestxzdd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ActionRequestxzdd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ActionRequestxzdd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_ActionRequestxzdd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ActionRequestxzdd, ActionRequestxzdd.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_ActionRequestxzdd__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum ActionCode {
        ChangeCards = 0,
        NoWinSuite = 1,
        Peng = 2,
        Hu = 3,
        Gang1 = 4,
        Gang2 = 5,
        Gang3 = 6,
        PlayCards = 7,
        GiveUp = 8,
      }
      
    }
    #endregion
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private global::gt_msg.ActionRequestxzdd.Types.ActionCode code_ = global::gt_msg.ActionRequestxzdd.Types.ActionCode.ChangeCards;
    public bool HasCode {
      get { return hasCode; }
    }
    public global::gt_msg.ActionRequestxzdd.Types.ActionCode Code {
      get { return code_; }
    }
    
    public const int Cards1FieldNumber = 2;
    private int cards1MemoizedSerializedSize;
    private pbc::PopsicleList<int> cards1_ = new pbc::PopsicleList<int>();
    public scg::IList<int> Cards1List {
      get { return pbc::Lists.AsReadOnly(cards1_); }
    }
    public int Cards1Count {
      get { return cards1_.Count; }
    }
    public int GetCards1(int index) {
      return cards1_[index];
    }
    
    public const int Cards2FieldNumber = 3;
    private int cards2MemoizedSerializedSize;
    private pbc::PopsicleList<int> cards2_ = new pbc::PopsicleList<int>();
    public scg::IList<int> Cards2List {
      get { return pbc::Lists.AsReadOnly(cards2_); }
    }
    public int Cards2Count {
      get { return cards2_.Count; }
    }
    public int GetCards2(int index) {
      return cards2_[index];
    }
    
    public const int CardTypeFieldNumber = 4;
    private bool hasCardType;
    private global::gt_msg.CardsTypexzdd cardType_ = global::gt_msg.CardsTypexzdd.ErrType;
    public bool HasCardType {
      get { return hasCardType; }
    }
    public global::gt_msg.CardsTypexzdd CardType {
      get { return cardType_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _actionRequestxzddFieldNames;
      if (hasCode) {
        output.WriteEnum(1, field_names[3], (int) Code, Code);
      }
      if (cards1_.Count > 0) {
        output.WritePackedInt32Array(2, field_names[1], cards1MemoizedSerializedSize, cards1_);
      }
      if (cards2_.Count > 0) {
        output.WritePackedInt32Array(3, field_names[2], cards2MemoizedSerializedSize, cards2_);
      }
      if (hasCardType) {
        output.WriteEnum(4, field_names[0], (int) CardType, CardType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCode) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Code);
      }
      {
        int dataSize = 0;
        foreach (int element in Cards1List) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        if (cards1_.Count != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
        }
        cards1MemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        foreach (int element in Cards2List) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        if (cards2_.Count != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
        }
        cards2MemoizedSerializedSize = dataSize;
      }
      if (hasCardType) {
        size += pb::CodedOutputStream.ComputeEnumSize(4, (int) CardType);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ActionRequestxzdd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ActionRequestxzdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ActionRequestxzdd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ActionRequestxzdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ActionRequestxzdd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ActionRequestxzdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ActionRequestxzdd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ActionRequestxzdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ActionRequestxzdd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ActionRequestxzdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ActionRequestxzdd MakeReadOnly() {
      cards1_.MakeReadOnly();
      cards2_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ActionRequestxzdd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ActionRequestxzdd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ActionRequestxzdd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ActionRequestxzdd result;
      
      private ActionRequestxzdd PrepareBuilder() {
        if (resultIsReadOnly) {
          ActionRequestxzdd original = result;
          result = new ActionRequestxzdd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ActionRequestxzdd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.ActionRequestxzdd.Descriptor; }
      }
      
      public override ActionRequestxzdd DefaultInstanceForType {
        get { return global::gt_msg.ActionRequestxzdd.DefaultInstance; }
      }
      
      public override ActionRequestxzdd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ActionRequestxzdd) {
          return MergeFrom((ActionRequestxzdd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ActionRequestxzdd other) {
        if (other == global::gt_msg.ActionRequestxzdd.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        if (other.cards1_.Count != 0) {
          result.cards1_.Add(other.cards1_);
        }
        if (other.cards2_.Count != 0) {
          result.cards2_.Add(other.cards2_);
        }
        if (other.HasCardType) {
          CardType = other.CardType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_actionRequestxzddFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _actionRequestxzddFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.code_, out unknown)) {
                result.hasCode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18:
            case 16: {
              input.ReadInt32Array(tag, field_name, result.cards1_);
              break;
            }
            case 26:
            case 24: {
              input.ReadInt32Array(tag, field_name, result.cards2_);
              break;
            }
            case 32: {
              object unknown;
              if(input.ReadEnum(ref result.cardType_, out unknown)) {
                result.hasCardType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
       get { return result.hasCode; }
      }
      public global::gt_msg.ActionRequestxzdd.Types.ActionCode Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(global::gt_msg.ActionRequestxzdd.Types.ActionCode value) {
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = global::gt_msg.ActionRequestxzdd.Types.ActionCode.ChangeCards;
        return this;
      }
      
      public pbc::IPopsicleList<int> Cards1List {
        get { return PrepareBuilder().cards1_; }
      }
      public int Cards1Count {
        get { return result.Cards1Count; }
      }
      public int GetCards1(int index) {
        return result.GetCards1(index);
      }
      public Builder SetCards1(int index, int value) {
        PrepareBuilder();
        result.cards1_[index] = value;
        return this;
      }
      public Builder AddCards1(int value) {
        PrepareBuilder();
        result.cards1_.Add(value);
        return this;
      }
      public Builder AddRangeCards1(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.cards1_.Add(values);
        return this;
      }
      public Builder ClearCards1() {
        PrepareBuilder();
        result.cards1_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> Cards2List {
        get { return PrepareBuilder().cards2_; }
      }
      public int Cards2Count {
        get { return result.Cards2Count; }
      }
      public int GetCards2(int index) {
        return result.GetCards2(index);
      }
      public Builder SetCards2(int index, int value) {
        PrepareBuilder();
        result.cards2_[index] = value;
        return this;
      }
      public Builder AddCards2(int value) {
        PrepareBuilder();
        result.cards2_.Add(value);
        return this;
      }
      public Builder AddRangeCards2(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.cards2_.Add(values);
        return this;
      }
      public Builder ClearCards2() {
        PrepareBuilder();
        result.cards2_.Clear();
        return this;
      }
      
      public bool HasCardType {
       get { return result.hasCardType; }
      }
      public global::gt_msg.CardsTypexzdd CardType {
        get { return result.CardType; }
        set { SetCardType(value); }
      }
      public Builder SetCardType(global::gt_msg.CardsTypexzdd value) {
        PrepareBuilder();
        result.hasCardType = true;
        result.cardType_ = value;
        return this;
      }
      public Builder ClearCardType() {
        PrepareBuilder();
        result.hasCardType = false;
        result.cardType_ = global::gt_msg.CardsTypexzdd.ErrType;
        return this;
      }
    }
    static ActionRequestxzdd() {
      object.ReferenceEquals(global::gt_msg.GtXzdd.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ActionResponsexzdd : pb::GeneratedMessage<ActionResponsexzdd, ActionResponsexzdd.Builder> {
    private ActionResponsexzdd() { }
    private static readonly ActionResponsexzdd defaultInstance = new ActionResponsexzdd().MakeReadOnly();
    private static readonly string[] _actionResponsexzddFieldNames = new string[] { "code" };
    private static readonly uint[] _actionResponsexzddFieldTags = new uint[] { 8 };
    public static ActionResponsexzdd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ActionResponsexzdd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ActionResponsexzdd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_ActionResponsexzdd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ActionResponsexzdd, ActionResponsexzdd.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_ActionResponsexzdd__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum ActionResponseCode {
        OK = 0,
        CannotAction = 1,
        ErrType = 2,
        OtherType = 3,
      }
      
    }
    #endregion
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private global::gt_msg.ActionResponsexzdd.Types.ActionResponseCode code_ = global::gt_msg.ActionResponsexzdd.Types.ActionResponseCode.OK;
    public bool HasCode {
      get { return hasCode; }
    }
    public global::gt_msg.ActionResponsexzdd.Types.ActionResponseCode Code {
      get { return code_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _actionResponsexzddFieldNames;
      if (hasCode) {
        output.WriteEnum(1, field_names[0], (int) Code, Code);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCode) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Code);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ActionResponsexzdd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ActionResponsexzdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ActionResponsexzdd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ActionResponsexzdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ActionResponsexzdd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ActionResponsexzdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ActionResponsexzdd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ActionResponsexzdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ActionResponsexzdd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ActionResponsexzdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ActionResponsexzdd MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ActionResponsexzdd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ActionResponsexzdd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ActionResponsexzdd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ActionResponsexzdd result;
      
      private ActionResponsexzdd PrepareBuilder() {
        if (resultIsReadOnly) {
          ActionResponsexzdd original = result;
          result = new ActionResponsexzdd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ActionResponsexzdd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.ActionResponsexzdd.Descriptor; }
      }
      
      public override ActionResponsexzdd DefaultInstanceForType {
        get { return global::gt_msg.ActionResponsexzdd.DefaultInstance; }
      }
      
      public override ActionResponsexzdd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ActionResponsexzdd) {
          return MergeFrom((ActionResponsexzdd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ActionResponsexzdd other) {
        if (other == global::gt_msg.ActionResponsexzdd.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_actionResponsexzddFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _actionResponsexzddFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.code_, out unknown)) {
                result.hasCode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
       get { return result.hasCode; }
      }
      public global::gt_msg.ActionResponsexzdd.Types.ActionResponseCode Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(global::gt_msg.ActionResponsexzdd.Types.ActionResponseCode value) {
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = global::gt_msg.ActionResponsexzdd.Types.ActionResponseCode.OK;
        return this;
      }
    }
    static ActionResponsexzdd() {
      object.ReferenceEquals(global::gt_msg.GtXzdd.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class CardGroupxzdd : pb::GeneratedMessage<CardGroupxzdd, CardGroupxzdd.Builder> {
    private CardGroupxzdd() { }
    private static readonly CardGroupxzdd defaultInstance = new CardGroupxzdd().MakeReadOnly();
    private static readonly string[] _cardGroupxzddFieldNames = new string[] { "Cards", "GroupType", "Lznum" };
    private static readonly uint[] _cardGroupxzddFieldTags = new uint[] { 18, 8, 24 };
    public static CardGroupxzdd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override CardGroupxzdd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override CardGroupxzdd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_CardGroupxzdd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<CardGroupxzdd, CardGroupxzdd.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_CardGroupxzdd__FieldAccessorTable; }
    }
    
    public const int GroupTypeFieldNumber = 1;
    private bool hasGroupType;
    private int groupType_;
    public bool HasGroupType {
      get { return hasGroupType; }
    }
    public int GroupType {
      get { return groupType_; }
    }
    
    public const int CardsFieldNumber = 2;
    private int cardsMemoizedSerializedSize;
    private pbc::PopsicleList<int> cards_ = new pbc::PopsicleList<int>();
    public scg::IList<int> CardsList {
      get { return pbc::Lists.AsReadOnly(cards_); }
    }
    public int CardsCount {
      get { return cards_.Count; }
    }
    public int GetCards(int index) {
      return cards_[index];
    }
    
    public const int LznumFieldNumber = 3;
    private bool hasLznum;
    private int lznum_;
    public bool HasLznum {
      get { return hasLznum; }
    }
    public int Lznum {
      get { return lznum_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasGroupType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _cardGroupxzddFieldNames;
      if (hasGroupType) {
        output.WriteInt32(1, field_names[1], GroupType);
      }
      if (cards_.Count > 0) {
        output.WritePackedInt32Array(2, field_names[0], cardsMemoizedSerializedSize, cards_);
      }
      if (hasLznum) {
        output.WriteInt32(3, field_names[2], Lznum);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasGroupType) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, GroupType);
      }
      {
        int dataSize = 0;
        foreach (int element in CardsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        if (cards_.Count != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
        }
        cardsMemoizedSerializedSize = dataSize;
      }
      if (hasLznum) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Lznum);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static CardGroupxzdd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CardGroupxzdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CardGroupxzdd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static CardGroupxzdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static CardGroupxzdd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CardGroupxzdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static CardGroupxzdd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static CardGroupxzdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static CardGroupxzdd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static CardGroupxzdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private CardGroupxzdd MakeReadOnly() {
      cards_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(CardGroupxzdd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<CardGroupxzdd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(CardGroupxzdd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private CardGroupxzdd result;
      
      private CardGroupxzdd PrepareBuilder() {
        if (resultIsReadOnly) {
          CardGroupxzdd original = result;
          result = new CardGroupxzdd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override CardGroupxzdd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.CardGroupxzdd.Descriptor; }
      }
      
      public override CardGroupxzdd DefaultInstanceForType {
        get { return global::gt_msg.CardGroupxzdd.DefaultInstance; }
      }
      
      public override CardGroupxzdd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is CardGroupxzdd) {
          return MergeFrom((CardGroupxzdd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(CardGroupxzdd other) {
        if (other == global::gt_msg.CardGroupxzdd.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasGroupType) {
          GroupType = other.GroupType;
        }
        if (other.cards_.Count != 0) {
          result.cards_.Add(other.cards_);
        }
        if (other.HasLznum) {
          Lznum = other.Lznum;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_cardGroupxzddFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _cardGroupxzddFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasGroupType = input.ReadInt32(ref result.groupType_);
              break;
            }
            case 18:
            case 16: {
              input.ReadInt32Array(tag, field_name, result.cards_);
              break;
            }
            case 24: {
              result.hasLznum = input.ReadInt32(ref result.lznum_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasGroupType {
        get { return result.hasGroupType; }
      }
      public int GroupType {
        get { return result.GroupType; }
        set { SetGroupType(value); }
      }
      public Builder SetGroupType(int value) {
        PrepareBuilder();
        result.hasGroupType = true;
        result.groupType_ = value;
        return this;
      }
      public Builder ClearGroupType() {
        PrepareBuilder();
        result.hasGroupType = false;
        result.groupType_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> CardsList {
        get { return PrepareBuilder().cards_; }
      }
      public int CardsCount {
        get { return result.CardsCount; }
      }
      public int GetCards(int index) {
        return result.GetCards(index);
      }
      public Builder SetCards(int index, int value) {
        PrepareBuilder();
        result.cards_[index] = value;
        return this;
      }
      public Builder AddCards(int value) {
        PrepareBuilder();
        result.cards_.Add(value);
        return this;
      }
      public Builder AddRangeCards(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.cards_.Add(values);
        return this;
      }
      public Builder ClearCards() {
        PrepareBuilder();
        result.cards_.Clear();
        return this;
      }
      
      public bool HasLznum {
        get { return result.hasLznum; }
      }
      public int Lznum {
        get { return result.Lznum; }
        set { SetLznum(value); }
      }
      public Builder SetLznum(int value) {
        PrepareBuilder();
        result.hasLznum = true;
        result.lznum_ = value;
        return this;
      }
      public Builder ClearLznum() {
        PrepareBuilder();
        result.hasLznum = false;
        result.lznum_ = 0;
        return this;
      }
    }
    static CardGroupxzdd() {
      object.ReferenceEquals(global::gt_msg.GtXzdd.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TableUserStatsxzdd : pb::GeneratedMessage<TableUserStatsxzdd, TableUserStatsxzdd.Builder> {
    private TableUserStatsxzdd() { }
    private static readonly TableUserStatsxzdd defaultInstance = new TableUserStatsxzdd().MakeReadOnly();
    private static readonly string[] _tableUserStatsxzddFieldNames = new string[] { "ChangeCards", "ChangedCards", "Gang1Cards", "Groups", "HandCards", "IsHost", "LastAction", "LastActonStep", "LeftCards", "NewActionList", "NoWinSuite", "NowSeat", "OldActionList", "PengCards", "PlayCards", "SafeCards", "State", "TG", "TingCards", "user_info" };
    private static readonly uint[] _tableUserStatsxzddFieldTags = new uint[] { 104, 112, 144, 98, 34, 40, 90, 80, 48, 74, 120, 16, 66, 152, 160, 128, 24, 56, 136, 10 };
    public static TableUserStatsxzdd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TableUserStatsxzdd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TableUserStatsxzdd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_TableUserStatsxzdd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TableUserStatsxzdd, TableUserStatsxzdd.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_TableUserStatsxzdd__FieldAccessorTable; }
    }
    
    public const int UserInfoFieldNumber = 1;
    private bool hasUserInfo;
    private global::gt_msg.User userInfo_;
    public bool HasUserInfo {
      get { return hasUserInfo; }
    }
    public global::gt_msg.User UserInfo {
      get { return userInfo_ ?? global::gt_msg.User.DefaultInstance; }
    }
    
    public const int NowSeatFieldNumber = 2;
    private bool hasNowSeat;
    private int nowSeat_;
    public bool HasNowSeat {
      get { return hasNowSeat; }
    }
    public int NowSeat {
      get { return nowSeat_; }
    }
    
    public const int StateFieldNumber = 3;
    private bool hasState;
    private int state_;
    public bool HasState {
      get { return hasState; }
    }
    public int State {
      get { return state_; }
    }
    
    public const int HandCardsFieldNumber = 4;
    private int handCardsMemoizedSerializedSize;
    private pbc::PopsicleList<int> handCards_ = new pbc::PopsicleList<int>();
    public scg::IList<int> HandCardsList {
      get { return pbc::Lists.AsReadOnly(handCards_); }
    }
    public int HandCardsCount {
      get { return handCards_.Count; }
    }
    public int GetHandCards(int index) {
      return handCards_[index];
    }
    
    public const int IsHostFieldNumber = 5;
    private bool hasIsHost;
    private int isHost_;
    public bool HasIsHost {
      get { return hasIsHost; }
    }
    public int IsHost {
      get { return isHost_; }
    }
    
    public const int LeftCardsFieldNumber = 6;
    private bool hasLeftCards;
    private int leftCards_;
    public bool HasLeftCards {
      get { return hasLeftCards; }
    }
    public int LeftCards {
      get { return leftCards_; }
    }
    
    public const int TGFieldNumber = 7;
    private bool hasTG;
    private int tG_;
    public bool HasTG {
      get { return hasTG; }
    }
    public int TG {
      get { return tG_; }
    }
    
    public const int OldActionListFieldNumber = 8;
    private pbc::PopsicleList<global::gt_msg.ActionRequestxzdd> oldActionList_ = new pbc::PopsicleList<global::gt_msg.ActionRequestxzdd>();
    public scg::IList<global::gt_msg.ActionRequestxzdd> OldActionListList {
      get { return oldActionList_; }
    }
    public int OldActionListCount {
      get { return oldActionList_.Count; }
    }
    public global::gt_msg.ActionRequestxzdd GetOldActionList(int index) {
      return oldActionList_[index];
    }
    
    public const int NewActionListFieldNumber = 9;
    private pbc::PopsicleList<global::gt_msg.ActionRequestxzdd> newActionList_ = new pbc::PopsicleList<global::gt_msg.ActionRequestxzdd>();
    public scg::IList<global::gt_msg.ActionRequestxzdd> NewActionListList {
      get { return newActionList_; }
    }
    public int NewActionListCount {
      get { return newActionList_.Count; }
    }
    public global::gt_msg.ActionRequestxzdd GetNewActionList(int index) {
      return newActionList_[index];
    }
    
    public const int LastActonStepFieldNumber = 10;
    private bool hasLastActonStep;
    private int lastActonStep_;
    public bool HasLastActonStep {
      get { return hasLastActonStep; }
    }
    public int LastActonStep {
      get { return lastActonStep_; }
    }
    
    public const int LastActionFieldNumber = 11;
    private bool hasLastAction;
    private global::gt_msg.ActionRequestxzdd lastAction_;
    public bool HasLastAction {
      get { return hasLastAction; }
    }
    public global::gt_msg.ActionRequestxzdd LastAction {
      get { return lastAction_ ?? global::gt_msg.ActionRequestxzdd.DefaultInstance; }
    }
    
    public const int GroupsFieldNumber = 12;
    private pbc::PopsicleList<global::gt_msg.CardGroupxzdd> groups_ = new pbc::PopsicleList<global::gt_msg.CardGroupxzdd>();
    public scg::IList<global::gt_msg.CardGroupxzdd> GroupsList {
      get { return groups_; }
    }
    public int GroupsCount {
      get { return groups_.Count; }
    }
    public global::gt_msg.CardGroupxzdd GetGroups(int index) {
      return groups_[index];
    }
    
    public const int ChangeCardsFieldNumber = 13;
    private pbc::PopsicleList<int> changeCards_ = new pbc::PopsicleList<int>();
    public scg::IList<int> ChangeCardsList {
      get { return pbc::Lists.AsReadOnly(changeCards_); }
    }
    public int ChangeCardsCount {
      get { return changeCards_.Count; }
    }
    public int GetChangeCards(int index) {
      return changeCards_[index];
    }
    
    public const int ChangedCardsFieldNumber = 14;
    private pbc::PopsicleList<int> changedCards_ = new pbc::PopsicleList<int>();
    public scg::IList<int> ChangedCardsList {
      get { return pbc::Lists.AsReadOnly(changedCards_); }
    }
    public int ChangedCardsCount {
      get { return changedCards_.Count; }
    }
    public int GetChangedCards(int index) {
      return changedCards_[index];
    }
    
    public const int NoWinSuiteFieldNumber = 15;
    private bool hasNoWinSuite;
    private int noWinSuite_;
    public bool HasNoWinSuite {
      get { return hasNoWinSuite; }
    }
    public int NoWinSuite {
      get { return noWinSuite_; }
    }
    
    public const int SafeCardsFieldNumber = 16;
    private pbc::PopsicleList<int> safeCards_ = new pbc::PopsicleList<int>();
    public scg::IList<int> SafeCardsList {
      get { return pbc::Lists.AsReadOnly(safeCards_); }
    }
    public int SafeCardsCount {
      get { return safeCards_.Count; }
    }
    public int GetSafeCards(int index) {
      return safeCards_[index];
    }
    
    public const int TingCardsFieldNumber = 17;
    private pbc::PopsicleList<int> tingCards_ = new pbc::PopsicleList<int>();
    public scg::IList<int> TingCardsList {
      get { return pbc::Lists.AsReadOnly(tingCards_); }
    }
    public int TingCardsCount {
      get { return tingCards_.Count; }
    }
    public int GetTingCards(int index) {
      return tingCards_[index];
    }
    
    public const int Gang1CardsFieldNumber = 18;
    private pbc::PopsicleList<int> gang1Cards_ = new pbc::PopsicleList<int>();
    public scg::IList<int> Gang1CardsList {
      get { return pbc::Lists.AsReadOnly(gang1Cards_); }
    }
    public int Gang1CardsCount {
      get { return gang1Cards_.Count; }
    }
    public int GetGang1Cards(int index) {
      return gang1Cards_[index];
    }
    
    public const int PengCardsFieldNumber = 19;
    private pbc::PopsicleList<int> pengCards_ = new pbc::PopsicleList<int>();
    public scg::IList<int> PengCardsList {
      get { return pbc::Lists.AsReadOnly(pengCards_); }
    }
    public int PengCardsCount {
      get { return pengCards_.Count; }
    }
    public int GetPengCards(int index) {
      return pengCards_[index];
    }
    
    public const int PlayCardsFieldNumber = 20;
    private pbc::PopsicleList<int> playCards_ = new pbc::PopsicleList<int>();
    public scg::IList<int> PlayCardsList {
      get { return pbc::Lists.AsReadOnly(playCards_); }
    }
    public int PlayCardsCount {
      get { return playCards_.Count; }
    }
    public int GetPlayCards(int index) {
      return playCards_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUserInfo) return false;
        if (!hasNowSeat) return false;
        if (!hasState) return false;
        if (!UserInfo.IsInitialized) return false;
        foreach (global::gt_msg.ActionRequestxzdd element in OldActionListList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::gt_msg.ActionRequestxzdd element in NewActionListList) {
          if (!element.IsInitialized) return false;
        }
        if (HasLastAction) {
          if (!LastAction.IsInitialized) return false;
        }
        foreach (global::gt_msg.CardGroupxzdd element in GroupsList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _tableUserStatsxzddFieldNames;
      if (hasUserInfo) {
        output.WriteMessage(1, field_names[19], UserInfo);
      }
      if (hasNowSeat) {
        output.WriteInt32(2, field_names[11], NowSeat);
      }
      if (hasState) {
        output.WriteInt32(3, field_names[16], State);
      }
      if (handCards_.Count > 0) {
        output.WritePackedInt32Array(4, field_names[4], handCardsMemoizedSerializedSize, handCards_);
      }
      if (hasIsHost) {
        output.WriteInt32(5, field_names[5], IsHost);
      }
      if (hasLeftCards) {
        output.WriteInt32(6, field_names[8], LeftCards);
      }
      if (hasTG) {
        output.WriteInt32(7, field_names[17], TG);
      }
      if (oldActionList_.Count > 0) {
        output.WriteMessageArray(8, field_names[12], oldActionList_);
      }
      if (newActionList_.Count > 0) {
        output.WriteMessageArray(9, field_names[9], newActionList_);
      }
      if (hasLastActonStep) {
        output.WriteInt32(10, field_names[7], LastActonStep);
      }
      if (hasLastAction) {
        output.WriteMessage(11, field_names[6], LastAction);
      }
      if (groups_.Count > 0) {
        output.WriteMessageArray(12, field_names[3], groups_);
      }
      if (changeCards_.Count > 0) {
        output.WriteInt32Array(13, field_names[0], changeCards_);
      }
      if (changedCards_.Count > 0) {
        output.WriteInt32Array(14, field_names[1], changedCards_);
      }
      if (hasNoWinSuite) {
        output.WriteInt32(15, field_names[10], NoWinSuite);
      }
      if (safeCards_.Count > 0) {
        output.WriteInt32Array(16, field_names[15], safeCards_);
      }
      if (tingCards_.Count > 0) {
        output.WriteInt32Array(17, field_names[18], tingCards_);
      }
      if (gang1Cards_.Count > 0) {
        output.WriteInt32Array(18, field_names[2], gang1Cards_);
      }
      if (pengCards_.Count > 0) {
        output.WriteInt32Array(19, field_names[13], pengCards_);
      }
      if (playCards_.Count > 0) {
        output.WriteInt32Array(20, field_names[14], playCards_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUserInfo) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, UserInfo);
      }
      if (hasNowSeat) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, NowSeat);
      }
      if (hasState) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, State);
      }
      {
        int dataSize = 0;
        foreach (int element in HandCardsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        if (handCards_.Count != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
        }
        handCardsMemoizedSerializedSize = dataSize;
      }
      if (hasIsHost) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, IsHost);
      }
      if (hasLeftCards) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, LeftCards);
      }
      if (hasTG) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, TG);
      }
      foreach (global::gt_msg.ActionRequestxzdd element in OldActionListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(8, element);
      }
      foreach (global::gt_msg.ActionRequestxzdd element in NewActionListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(9, element);
      }
      if (hasLastActonStep) {
        size += pb::CodedOutputStream.ComputeInt32Size(10, LastActonStep);
      }
      if (hasLastAction) {
        size += pb::CodedOutputStream.ComputeMessageSize(11, LastAction);
      }
      foreach (global::gt_msg.CardGroupxzdd element in GroupsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(12, element);
      }
      {
        int dataSize = 0;
        foreach (int element in ChangeCardsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * changeCards_.Count;
      }
      {
        int dataSize = 0;
        foreach (int element in ChangedCardsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * changedCards_.Count;
      }
      if (hasNoWinSuite) {
        size += pb::CodedOutputStream.ComputeInt32Size(15, NoWinSuite);
      }
      {
        int dataSize = 0;
        foreach (int element in SafeCardsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 2 * safeCards_.Count;
      }
      {
        int dataSize = 0;
        foreach (int element in TingCardsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 2 * tingCards_.Count;
      }
      {
        int dataSize = 0;
        foreach (int element in Gang1CardsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 2 * gang1Cards_.Count;
      }
      {
        int dataSize = 0;
        foreach (int element in PengCardsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 2 * pengCards_.Count;
      }
      {
        int dataSize = 0;
        foreach (int element in PlayCardsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 2 * playCards_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static TableUserStatsxzdd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TableUserStatsxzdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TableUserStatsxzdd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TableUserStatsxzdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TableUserStatsxzdd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TableUserStatsxzdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TableUserStatsxzdd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TableUserStatsxzdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TableUserStatsxzdd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TableUserStatsxzdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TableUserStatsxzdd MakeReadOnly() {
      handCards_.MakeReadOnly();
      oldActionList_.MakeReadOnly();
      newActionList_.MakeReadOnly();
      groups_.MakeReadOnly();
      changeCards_.MakeReadOnly();
      changedCards_.MakeReadOnly();
      safeCards_.MakeReadOnly();
      tingCards_.MakeReadOnly();
      gang1Cards_.MakeReadOnly();
      pengCards_.MakeReadOnly();
      playCards_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TableUserStatsxzdd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TableUserStatsxzdd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TableUserStatsxzdd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TableUserStatsxzdd result;
      
      private TableUserStatsxzdd PrepareBuilder() {
        if (resultIsReadOnly) {
          TableUserStatsxzdd original = result;
          result = new TableUserStatsxzdd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TableUserStatsxzdd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.TableUserStatsxzdd.Descriptor; }
      }
      
      public override TableUserStatsxzdd DefaultInstanceForType {
        get { return global::gt_msg.TableUserStatsxzdd.DefaultInstance; }
      }
      
      public override TableUserStatsxzdd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TableUserStatsxzdd) {
          return MergeFrom((TableUserStatsxzdd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TableUserStatsxzdd other) {
        if (other == global::gt_msg.TableUserStatsxzdd.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUserInfo) {
          MergeUserInfo(other.UserInfo);
        }
        if (other.HasNowSeat) {
          NowSeat = other.NowSeat;
        }
        if (other.HasState) {
          State = other.State;
        }
        if (other.handCards_.Count != 0) {
          result.handCards_.Add(other.handCards_);
        }
        if (other.HasIsHost) {
          IsHost = other.IsHost;
        }
        if (other.HasLeftCards) {
          LeftCards = other.LeftCards;
        }
        if (other.HasTG) {
          TG = other.TG;
        }
        if (other.oldActionList_.Count != 0) {
          result.oldActionList_.Add(other.oldActionList_);
        }
        if (other.newActionList_.Count != 0) {
          result.newActionList_.Add(other.newActionList_);
        }
        if (other.HasLastActonStep) {
          LastActonStep = other.LastActonStep;
        }
        if (other.HasLastAction) {
          MergeLastAction(other.LastAction);
        }
        if (other.groups_.Count != 0) {
          result.groups_.Add(other.groups_);
        }
        if (other.changeCards_.Count != 0) {
          result.changeCards_.Add(other.changeCards_);
        }
        if (other.changedCards_.Count != 0) {
          result.changedCards_.Add(other.changedCards_);
        }
        if (other.HasNoWinSuite) {
          NoWinSuite = other.NoWinSuite;
        }
        if (other.safeCards_.Count != 0) {
          result.safeCards_.Add(other.safeCards_);
        }
        if (other.tingCards_.Count != 0) {
          result.tingCards_.Add(other.tingCards_);
        }
        if (other.gang1Cards_.Count != 0) {
          result.gang1Cards_.Add(other.gang1Cards_);
        }
        if (other.pengCards_.Count != 0) {
          result.pengCards_.Add(other.pengCards_);
        }
        if (other.playCards_.Count != 0) {
          result.playCards_.Add(other.playCards_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tableUserStatsxzddFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tableUserStatsxzddFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::gt_msg.User.Builder subBuilder = global::gt_msg.User.CreateBuilder();
              if (result.hasUserInfo) {
                subBuilder.MergeFrom(UserInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserInfo = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasNowSeat = input.ReadInt32(ref result.nowSeat_);
              break;
            }
            case 24: {
              result.hasState = input.ReadInt32(ref result.state_);
              break;
            }
            case 34:
            case 32: {
              input.ReadInt32Array(tag, field_name, result.handCards_);
              break;
            }
            case 40: {
              result.hasIsHost = input.ReadInt32(ref result.isHost_);
              break;
            }
            case 48: {
              result.hasLeftCards = input.ReadInt32(ref result.leftCards_);
              break;
            }
            case 56: {
              result.hasTG = input.ReadInt32(ref result.tG_);
              break;
            }
            case 66: {
              input.ReadMessageArray(tag, field_name, result.oldActionList_, global::gt_msg.ActionRequestxzdd.DefaultInstance, extensionRegistry);
              break;
            }
            case 74: {
              input.ReadMessageArray(tag, field_name, result.newActionList_, global::gt_msg.ActionRequestxzdd.DefaultInstance, extensionRegistry);
              break;
            }
            case 80: {
              result.hasLastActonStep = input.ReadInt32(ref result.lastActonStep_);
              break;
            }
            case 90: {
              global::gt_msg.ActionRequestxzdd.Builder subBuilder = global::gt_msg.ActionRequestxzdd.CreateBuilder();
              if (result.hasLastAction) {
                subBuilder.MergeFrom(LastAction);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LastAction = subBuilder.BuildPartial();
              break;
            }
            case 98: {
              input.ReadMessageArray(tag, field_name, result.groups_, global::gt_msg.CardGroupxzdd.DefaultInstance, extensionRegistry);
              break;
            }
            case 106:
            case 104: {
              input.ReadInt32Array(tag, field_name, result.changeCards_);
              break;
            }
            case 114:
            case 112: {
              input.ReadInt32Array(tag, field_name, result.changedCards_);
              break;
            }
            case 120: {
              result.hasNoWinSuite = input.ReadInt32(ref result.noWinSuite_);
              break;
            }
            case 130:
            case 128: {
              input.ReadInt32Array(tag, field_name, result.safeCards_);
              break;
            }
            case 138:
            case 136: {
              input.ReadInt32Array(tag, field_name, result.tingCards_);
              break;
            }
            case 146:
            case 144: {
              input.ReadInt32Array(tag, field_name, result.gang1Cards_);
              break;
            }
            case 154:
            case 152: {
              input.ReadInt32Array(tag, field_name, result.pengCards_);
              break;
            }
            case 162:
            case 160: {
              input.ReadInt32Array(tag, field_name, result.playCards_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUserInfo {
       get { return result.hasUserInfo; }
      }
      public global::gt_msg.User UserInfo {
        get { return result.UserInfo; }
        set { SetUserInfo(value); }
      }
      public Builder SetUserInfo(global::gt_msg.User value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserInfo = true;
        result.userInfo_ = value;
        return this;
      }
      public Builder SetUserInfo(global::gt_msg.User.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserInfo = true;
        result.userInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserInfo(global::gt_msg.User value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserInfo &&
            result.userInfo_ != global::gt_msg.User.DefaultInstance) {
            result.userInfo_ = global::gt_msg.User.CreateBuilder(result.userInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.userInfo_ = value;
        }
        result.hasUserInfo = true;
        return this;
      }
      public Builder ClearUserInfo() {
        PrepareBuilder();
        result.hasUserInfo = false;
        result.userInfo_ = null;
        return this;
      }
      
      public bool HasNowSeat {
        get { return result.hasNowSeat; }
      }
      public int NowSeat {
        get { return result.NowSeat; }
        set { SetNowSeat(value); }
      }
      public Builder SetNowSeat(int value) {
        PrepareBuilder();
        result.hasNowSeat = true;
        result.nowSeat_ = value;
        return this;
      }
      public Builder ClearNowSeat() {
        PrepareBuilder();
        result.hasNowSeat = false;
        result.nowSeat_ = 0;
        return this;
      }
      
      public bool HasState {
        get { return result.hasState; }
      }
      public int State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(int value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> HandCardsList {
        get { return PrepareBuilder().handCards_; }
      }
      public int HandCardsCount {
        get { return result.HandCardsCount; }
      }
      public int GetHandCards(int index) {
        return result.GetHandCards(index);
      }
      public Builder SetHandCards(int index, int value) {
        PrepareBuilder();
        result.handCards_[index] = value;
        return this;
      }
      public Builder AddHandCards(int value) {
        PrepareBuilder();
        result.handCards_.Add(value);
        return this;
      }
      public Builder AddRangeHandCards(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.handCards_.Add(values);
        return this;
      }
      public Builder ClearHandCards() {
        PrepareBuilder();
        result.handCards_.Clear();
        return this;
      }
      
      public bool HasIsHost {
        get { return result.hasIsHost; }
      }
      public int IsHost {
        get { return result.IsHost; }
        set { SetIsHost(value); }
      }
      public Builder SetIsHost(int value) {
        PrepareBuilder();
        result.hasIsHost = true;
        result.isHost_ = value;
        return this;
      }
      public Builder ClearIsHost() {
        PrepareBuilder();
        result.hasIsHost = false;
        result.isHost_ = 0;
        return this;
      }
      
      public bool HasLeftCards {
        get { return result.hasLeftCards; }
      }
      public int LeftCards {
        get { return result.LeftCards; }
        set { SetLeftCards(value); }
      }
      public Builder SetLeftCards(int value) {
        PrepareBuilder();
        result.hasLeftCards = true;
        result.leftCards_ = value;
        return this;
      }
      public Builder ClearLeftCards() {
        PrepareBuilder();
        result.hasLeftCards = false;
        result.leftCards_ = 0;
        return this;
      }
      
      public bool HasTG {
        get { return result.hasTG; }
      }
      public int TG {
        get { return result.TG; }
        set { SetTG(value); }
      }
      public Builder SetTG(int value) {
        PrepareBuilder();
        result.hasTG = true;
        result.tG_ = value;
        return this;
      }
      public Builder ClearTG() {
        PrepareBuilder();
        result.hasTG = false;
        result.tG_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::gt_msg.ActionRequestxzdd> OldActionListList {
        get { return PrepareBuilder().oldActionList_; }
      }
      public int OldActionListCount {
        get { return result.OldActionListCount; }
      }
      public global::gt_msg.ActionRequestxzdd GetOldActionList(int index) {
        return result.GetOldActionList(index);
      }
      public Builder SetOldActionList(int index, global::gt_msg.ActionRequestxzdd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.oldActionList_[index] = value;
        return this;
      }
      public Builder SetOldActionList(int index, global::gt_msg.ActionRequestxzdd.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.oldActionList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddOldActionList(global::gt_msg.ActionRequestxzdd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.oldActionList_.Add(value);
        return this;
      }
      public Builder AddOldActionList(global::gt_msg.ActionRequestxzdd.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.oldActionList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeOldActionList(scg::IEnumerable<global::gt_msg.ActionRequestxzdd> values) {
        PrepareBuilder();
        result.oldActionList_.Add(values);
        return this;
      }
      public Builder ClearOldActionList() {
        PrepareBuilder();
        result.oldActionList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::gt_msg.ActionRequestxzdd> NewActionListList {
        get { return PrepareBuilder().newActionList_; }
      }
      public int NewActionListCount {
        get { return result.NewActionListCount; }
      }
      public global::gt_msg.ActionRequestxzdd GetNewActionList(int index) {
        return result.GetNewActionList(index);
      }
      public Builder SetNewActionList(int index, global::gt_msg.ActionRequestxzdd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.newActionList_[index] = value;
        return this;
      }
      public Builder SetNewActionList(int index, global::gt_msg.ActionRequestxzdd.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.newActionList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddNewActionList(global::gt_msg.ActionRequestxzdd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.newActionList_.Add(value);
        return this;
      }
      public Builder AddNewActionList(global::gt_msg.ActionRequestxzdd.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.newActionList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeNewActionList(scg::IEnumerable<global::gt_msg.ActionRequestxzdd> values) {
        PrepareBuilder();
        result.newActionList_.Add(values);
        return this;
      }
      public Builder ClearNewActionList() {
        PrepareBuilder();
        result.newActionList_.Clear();
        return this;
      }
      
      public bool HasLastActonStep {
        get { return result.hasLastActonStep; }
      }
      public int LastActonStep {
        get { return result.LastActonStep; }
        set { SetLastActonStep(value); }
      }
      public Builder SetLastActonStep(int value) {
        PrepareBuilder();
        result.hasLastActonStep = true;
        result.lastActonStep_ = value;
        return this;
      }
      public Builder ClearLastActonStep() {
        PrepareBuilder();
        result.hasLastActonStep = false;
        result.lastActonStep_ = 0;
        return this;
      }
      
      public bool HasLastAction {
       get { return result.hasLastAction; }
      }
      public global::gt_msg.ActionRequestxzdd LastAction {
        get { return result.LastAction; }
        set { SetLastAction(value); }
      }
      public Builder SetLastAction(global::gt_msg.ActionRequestxzdd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLastAction = true;
        result.lastAction_ = value;
        return this;
      }
      public Builder SetLastAction(global::gt_msg.ActionRequestxzdd.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLastAction = true;
        result.lastAction_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLastAction(global::gt_msg.ActionRequestxzdd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLastAction &&
            result.lastAction_ != global::gt_msg.ActionRequestxzdd.DefaultInstance) {
            result.lastAction_ = global::gt_msg.ActionRequestxzdd.CreateBuilder(result.lastAction_).MergeFrom(value).BuildPartial();
        } else {
          result.lastAction_ = value;
        }
        result.hasLastAction = true;
        return this;
      }
      public Builder ClearLastAction() {
        PrepareBuilder();
        result.hasLastAction = false;
        result.lastAction_ = null;
        return this;
      }
      
      public pbc::IPopsicleList<global::gt_msg.CardGroupxzdd> GroupsList {
        get { return PrepareBuilder().groups_; }
      }
      public int GroupsCount {
        get { return result.GroupsCount; }
      }
      public global::gt_msg.CardGroupxzdd GetGroups(int index) {
        return result.GetGroups(index);
      }
      public Builder SetGroups(int index, global::gt_msg.CardGroupxzdd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.groups_[index] = value;
        return this;
      }
      public Builder SetGroups(int index, global::gt_msg.CardGroupxzdd.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.groups_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddGroups(global::gt_msg.CardGroupxzdd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.groups_.Add(value);
        return this;
      }
      public Builder AddGroups(global::gt_msg.CardGroupxzdd.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.groups_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeGroups(scg::IEnumerable<global::gt_msg.CardGroupxzdd> values) {
        PrepareBuilder();
        result.groups_.Add(values);
        return this;
      }
      public Builder ClearGroups() {
        PrepareBuilder();
        result.groups_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> ChangeCardsList {
        get { return PrepareBuilder().changeCards_; }
      }
      public int ChangeCardsCount {
        get { return result.ChangeCardsCount; }
      }
      public int GetChangeCards(int index) {
        return result.GetChangeCards(index);
      }
      public Builder SetChangeCards(int index, int value) {
        PrepareBuilder();
        result.changeCards_[index] = value;
        return this;
      }
      public Builder AddChangeCards(int value) {
        PrepareBuilder();
        result.changeCards_.Add(value);
        return this;
      }
      public Builder AddRangeChangeCards(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.changeCards_.Add(values);
        return this;
      }
      public Builder ClearChangeCards() {
        PrepareBuilder();
        result.changeCards_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> ChangedCardsList {
        get { return PrepareBuilder().changedCards_; }
      }
      public int ChangedCardsCount {
        get { return result.ChangedCardsCount; }
      }
      public int GetChangedCards(int index) {
        return result.GetChangedCards(index);
      }
      public Builder SetChangedCards(int index, int value) {
        PrepareBuilder();
        result.changedCards_[index] = value;
        return this;
      }
      public Builder AddChangedCards(int value) {
        PrepareBuilder();
        result.changedCards_.Add(value);
        return this;
      }
      public Builder AddRangeChangedCards(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.changedCards_.Add(values);
        return this;
      }
      public Builder ClearChangedCards() {
        PrepareBuilder();
        result.changedCards_.Clear();
        return this;
      }
      
      public bool HasNoWinSuite {
        get { return result.hasNoWinSuite; }
      }
      public int NoWinSuite {
        get { return result.NoWinSuite; }
        set { SetNoWinSuite(value); }
      }
      public Builder SetNoWinSuite(int value) {
        PrepareBuilder();
        result.hasNoWinSuite = true;
        result.noWinSuite_ = value;
        return this;
      }
      public Builder ClearNoWinSuite() {
        PrepareBuilder();
        result.hasNoWinSuite = false;
        result.noWinSuite_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> SafeCardsList {
        get { return PrepareBuilder().safeCards_; }
      }
      public int SafeCardsCount {
        get { return result.SafeCardsCount; }
      }
      public int GetSafeCards(int index) {
        return result.GetSafeCards(index);
      }
      public Builder SetSafeCards(int index, int value) {
        PrepareBuilder();
        result.safeCards_[index] = value;
        return this;
      }
      public Builder AddSafeCards(int value) {
        PrepareBuilder();
        result.safeCards_.Add(value);
        return this;
      }
      public Builder AddRangeSafeCards(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.safeCards_.Add(values);
        return this;
      }
      public Builder ClearSafeCards() {
        PrepareBuilder();
        result.safeCards_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> TingCardsList {
        get { return PrepareBuilder().tingCards_; }
      }
      public int TingCardsCount {
        get { return result.TingCardsCount; }
      }
      public int GetTingCards(int index) {
        return result.GetTingCards(index);
      }
      public Builder SetTingCards(int index, int value) {
        PrepareBuilder();
        result.tingCards_[index] = value;
        return this;
      }
      public Builder AddTingCards(int value) {
        PrepareBuilder();
        result.tingCards_.Add(value);
        return this;
      }
      public Builder AddRangeTingCards(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.tingCards_.Add(values);
        return this;
      }
      public Builder ClearTingCards() {
        PrepareBuilder();
        result.tingCards_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> Gang1CardsList {
        get { return PrepareBuilder().gang1Cards_; }
      }
      public int Gang1CardsCount {
        get { return result.Gang1CardsCount; }
      }
      public int GetGang1Cards(int index) {
        return result.GetGang1Cards(index);
      }
      public Builder SetGang1Cards(int index, int value) {
        PrepareBuilder();
        result.gang1Cards_[index] = value;
        return this;
      }
      public Builder AddGang1Cards(int value) {
        PrepareBuilder();
        result.gang1Cards_.Add(value);
        return this;
      }
      public Builder AddRangeGang1Cards(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.gang1Cards_.Add(values);
        return this;
      }
      public Builder ClearGang1Cards() {
        PrepareBuilder();
        result.gang1Cards_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> PengCardsList {
        get { return PrepareBuilder().pengCards_; }
      }
      public int PengCardsCount {
        get { return result.PengCardsCount; }
      }
      public int GetPengCards(int index) {
        return result.GetPengCards(index);
      }
      public Builder SetPengCards(int index, int value) {
        PrepareBuilder();
        result.pengCards_[index] = value;
        return this;
      }
      public Builder AddPengCards(int value) {
        PrepareBuilder();
        result.pengCards_.Add(value);
        return this;
      }
      public Builder AddRangePengCards(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.pengCards_.Add(values);
        return this;
      }
      public Builder ClearPengCards() {
        PrepareBuilder();
        result.pengCards_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> PlayCardsList {
        get { return PrepareBuilder().playCards_; }
      }
      public int PlayCardsCount {
        get { return result.PlayCardsCount; }
      }
      public int GetPlayCards(int index) {
        return result.GetPlayCards(index);
      }
      public Builder SetPlayCards(int index, int value) {
        PrepareBuilder();
        result.playCards_[index] = value;
        return this;
      }
      public Builder AddPlayCards(int value) {
        PrepareBuilder();
        result.playCards_.Add(value);
        return this;
      }
      public Builder AddRangePlayCards(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.playCards_.Add(values);
        return this;
      }
      public Builder ClearPlayCards() {
        PrepareBuilder();
        result.playCards_.Clear();
        return this;
      }
    }
    static TableUserStatsxzdd() {
      object.ReferenceEquals(global::gt_msg.GtXzdd.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TableStatsxzdd : pb::GeneratedMessage<TableStatsxzdd, TableStatsxzdd.Builder> {
    private TableStatsxzdd() { }
    private static readonly TableStatsxzdd defaultInstance = new TableStatsxzdd().MakeReadOnly();
    private static readonly string[] _tableStatsxzddFieldNames = new string[] { "BasePoint", "DrawCard", "HostSeat", "IsPlayCard", "LastAction", "LastActionSeat", "LeftCards", "LeftPlayTimes", "MySeat", "NextActionTimeOut", "NowSeat", "Round", "SZ", "SeatUser1", "SeatUser2", "SeatUser3", "SeatUser4", "Stage", "Step", "StepChanged", "TableID", "rank", "rule" };
    private static readonly uint[] _tableStatsxzddFieldTags = new uint[] { 64, 168, 120, 160, 178, 136, 144, 184, 56, 48, 74, 112, 128, 82, 90, 98, 106, 16, 40, 152, 8, 24, 32 };
    public static TableStatsxzdd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TableStatsxzdd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TableStatsxzdd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_TableStatsxzdd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TableStatsxzdd, TableStatsxzdd.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_TableStatsxzdd__FieldAccessorTable; }
    }
    
    public const int TableIDFieldNumber = 1;
    private bool hasTableID;
    private int tableID_;
    public bool HasTableID {
      get { return hasTableID; }
    }
    public int TableID {
      get { return tableID_; }
    }
    
    public const int StageFieldNumber = 2;
    private bool hasStage;
    private global::gt_msg.GameStagexzdd stage_ = global::gt_msg.GameStagexzdd.Waiting;
    public bool HasStage {
      get { return hasStage; }
    }
    public global::gt_msg.GameStagexzdd Stage {
      get { return stage_; }
    }
    
    public const int RankFieldNumber = 3;
    private bool hasRank;
    private global::gt_msg.Rank rank_ = global::gt_msg.Rank.LV0;
    public bool HasRank {
      get { return hasRank; }
    }
    public global::gt_msg.Rank Rank {
      get { return rank_; }
    }
    
    public const int RuleFieldNumber = 4;
    private bool hasRule;
    private global::gt_msg.Rule rule_ = global::gt_msg.Rule.RuleNormal;
    public bool HasRule {
      get { return hasRule; }
    }
    public global::gt_msg.Rule Rule {
      get { return rule_; }
    }
    
    public const int StepFieldNumber = 5;
    private bool hasStep;
    private int step_;
    public bool HasStep {
      get { return hasStep; }
    }
    public int Step {
      get { return step_; }
    }
    
    public const int NextActionTimeOutFieldNumber = 6;
    private bool hasNextActionTimeOut;
    private int nextActionTimeOut_;
    public bool HasNextActionTimeOut {
      get { return hasNextActionTimeOut; }
    }
    public int NextActionTimeOut {
      get { return nextActionTimeOut_; }
    }
    
    public const int MySeatFieldNumber = 7;
    private bool hasMySeat;
    private int mySeat_;
    public bool HasMySeat {
      get { return hasMySeat; }
    }
    public int MySeat {
      get { return mySeat_; }
    }
    
    public const int BasePointFieldNumber = 8;
    private bool hasBasePoint;
    private int basePoint_;
    public bool HasBasePoint {
      get { return hasBasePoint; }
    }
    public int BasePoint {
      get { return basePoint_; }
    }
    
    public const int NowSeatFieldNumber = 9;
    private int nowSeatMemoizedSerializedSize;
    private pbc::PopsicleList<int> nowSeat_ = new pbc::PopsicleList<int>();
    public scg::IList<int> NowSeatList {
      get { return pbc::Lists.AsReadOnly(nowSeat_); }
    }
    public int NowSeatCount {
      get { return nowSeat_.Count; }
    }
    public int GetNowSeat(int index) {
      return nowSeat_[index];
    }
    
    public const int SeatUser1FieldNumber = 10;
    private bool hasSeatUser1;
    private global::gt_msg.TableUserStatsxzdd seatUser1_;
    public bool HasSeatUser1 {
      get { return hasSeatUser1; }
    }
    public global::gt_msg.TableUserStatsxzdd SeatUser1 {
      get { return seatUser1_ ?? global::gt_msg.TableUserStatsxzdd.DefaultInstance; }
    }
    
    public const int SeatUser2FieldNumber = 11;
    private bool hasSeatUser2;
    private global::gt_msg.TableUserStatsxzdd seatUser2_;
    public bool HasSeatUser2 {
      get { return hasSeatUser2; }
    }
    public global::gt_msg.TableUserStatsxzdd SeatUser2 {
      get { return seatUser2_ ?? global::gt_msg.TableUserStatsxzdd.DefaultInstance; }
    }
    
    public const int SeatUser3FieldNumber = 12;
    private bool hasSeatUser3;
    private global::gt_msg.TableUserStatsxzdd seatUser3_;
    public bool HasSeatUser3 {
      get { return hasSeatUser3; }
    }
    public global::gt_msg.TableUserStatsxzdd SeatUser3 {
      get { return seatUser3_ ?? global::gt_msg.TableUserStatsxzdd.DefaultInstance; }
    }
    
    public const int SeatUser4FieldNumber = 13;
    private bool hasSeatUser4;
    private global::gt_msg.TableUserStatsxzdd seatUser4_;
    public bool HasSeatUser4 {
      get { return hasSeatUser4; }
    }
    public global::gt_msg.TableUserStatsxzdd SeatUser4 {
      get { return seatUser4_ ?? global::gt_msg.TableUserStatsxzdd.DefaultInstance; }
    }
    
    public const int RoundFieldNumber = 14;
    private bool hasRound;
    private int round_;
    public bool HasRound {
      get { return hasRound; }
    }
    public int Round {
      get { return round_; }
    }
    
    public const int HostSeatFieldNumber = 15;
    private bool hasHostSeat;
    private int hostSeat_;
    public bool HasHostSeat {
      get { return hasHostSeat; }
    }
    public int HostSeat {
      get { return hostSeat_; }
    }
    
    public const int SZFieldNumber = 16;
    private bool hasSZ;
    private int sZ_;
    public bool HasSZ {
      get { return hasSZ; }
    }
    public int SZ {
      get { return sZ_; }
    }
    
    public const int LastActionSeatFieldNumber = 17;
    private bool hasLastActionSeat;
    private int lastActionSeat_;
    public bool HasLastActionSeat {
      get { return hasLastActionSeat; }
    }
    public int LastActionSeat {
      get { return lastActionSeat_; }
    }
    
    public const int LeftCardsFieldNumber = 18;
    private bool hasLeftCards;
    private int leftCards_;
    public bool HasLeftCards {
      get { return hasLeftCards; }
    }
    public int LeftCards {
      get { return leftCards_; }
    }
    
    public const int StepChangedFieldNumber = 19;
    private bool hasStepChanged;
    private int stepChanged_;
    public bool HasStepChanged {
      get { return hasStepChanged; }
    }
    public int StepChanged {
      get { return stepChanged_; }
    }
    
    public const int IsPlayCardFieldNumber = 20;
    private bool hasIsPlayCard;
    private int isPlayCard_;
    public bool HasIsPlayCard {
      get { return hasIsPlayCard; }
    }
    public int IsPlayCard {
      get { return isPlayCard_; }
    }
    
    public const int DrawCardFieldNumber = 21;
    private bool hasDrawCard;
    private int drawCard_;
    public bool HasDrawCard {
      get { return hasDrawCard; }
    }
    public int DrawCard {
      get { return drawCard_; }
    }
    
    public const int LastActionFieldNumber = 22;
    private bool hasLastAction;
    private global::gt_msg.ActionRequestxzdd lastAction_;
    public bool HasLastAction {
      get { return hasLastAction; }
    }
    public global::gt_msg.ActionRequestxzdd LastAction {
      get { return lastAction_ ?? global::gt_msg.ActionRequestxzdd.DefaultInstance; }
    }
    
    public const int LeftPlayTimesFieldNumber = 23;
    private bool hasLeftPlayTimes;
    private int leftPlayTimes_;
    public bool HasLeftPlayTimes {
      get { return hasLeftPlayTimes; }
    }
    public int LeftPlayTimes {
      get { return leftPlayTimes_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTableID) return false;
        if (!hasStage) return false;
        if (!hasRank) return false;
        if (!hasRule) return false;
        if (!hasStep) return false;
        if (!hasNextActionTimeOut) return false;
        if (!hasMySeat) return false;
        if (!hasBasePoint) return false;
        if (HasSeatUser1) {
          if (!SeatUser1.IsInitialized) return false;
        }
        if (HasSeatUser2) {
          if (!SeatUser2.IsInitialized) return false;
        }
        if (HasSeatUser3) {
          if (!SeatUser3.IsInitialized) return false;
        }
        if (HasSeatUser4) {
          if (!SeatUser4.IsInitialized) return false;
        }
        if (HasLastAction) {
          if (!LastAction.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _tableStatsxzddFieldNames;
      if (hasTableID) {
        output.WriteInt32(1, field_names[20], TableID);
      }
      if (hasStage) {
        output.WriteEnum(2, field_names[17], (int) Stage, Stage);
      }
      if (hasRank) {
        output.WriteEnum(3, field_names[21], (int) Rank, Rank);
      }
      if (hasRule) {
        output.WriteEnum(4, field_names[22], (int) Rule, Rule);
      }
      if (hasStep) {
        output.WriteInt32(5, field_names[18], Step);
      }
      if (hasNextActionTimeOut) {
        output.WriteInt32(6, field_names[9], NextActionTimeOut);
      }
      if (hasMySeat) {
        output.WriteInt32(7, field_names[8], MySeat);
      }
      if (hasBasePoint) {
        output.WriteInt32(8, field_names[0], BasePoint);
      }
      if (nowSeat_.Count > 0) {
        output.WritePackedInt32Array(9, field_names[10], nowSeatMemoizedSerializedSize, nowSeat_);
      }
      if (hasSeatUser1) {
        output.WriteMessage(10, field_names[13], SeatUser1);
      }
      if (hasSeatUser2) {
        output.WriteMessage(11, field_names[14], SeatUser2);
      }
      if (hasSeatUser3) {
        output.WriteMessage(12, field_names[15], SeatUser3);
      }
      if (hasSeatUser4) {
        output.WriteMessage(13, field_names[16], SeatUser4);
      }
      if (hasRound) {
        output.WriteInt32(14, field_names[11], Round);
      }
      if (hasHostSeat) {
        output.WriteInt32(15, field_names[2], HostSeat);
      }
      if (hasSZ) {
        output.WriteInt32(16, field_names[12], SZ);
      }
      if (hasLastActionSeat) {
        output.WriteInt32(17, field_names[5], LastActionSeat);
      }
      if (hasLeftCards) {
        output.WriteInt32(18, field_names[6], LeftCards);
      }
      if (hasStepChanged) {
        output.WriteInt32(19, field_names[19], StepChanged);
      }
      if (hasIsPlayCard) {
        output.WriteInt32(20, field_names[3], IsPlayCard);
      }
      if (hasDrawCard) {
        output.WriteInt32(21, field_names[1], DrawCard);
      }
      if (hasLastAction) {
        output.WriteMessage(22, field_names[4], LastAction);
      }
      if (hasLeftPlayTimes) {
        output.WriteInt32(23, field_names[7], LeftPlayTimes);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTableID) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, TableID);
      }
      if (hasStage) {
        size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Stage);
      }
      if (hasRank) {
        size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Rank);
      }
      if (hasRule) {
        size += pb::CodedOutputStream.ComputeEnumSize(4, (int) Rule);
      }
      if (hasStep) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, Step);
      }
      if (hasNextActionTimeOut) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, NextActionTimeOut);
      }
      if (hasMySeat) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, MySeat);
      }
      if (hasBasePoint) {
        size += pb::CodedOutputStream.ComputeInt32Size(8, BasePoint);
      }
      {
        int dataSize = 0;
        foreach (int element in NowSeatList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        if (nowSeat_.Count != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
        }
        nowSeatMemoizedSerializedSize = dataSize;
      }
      if (hasSeatUser1) {
        size += pb::CodedOutputStream.ComputeMessageSize(10, SeatUser1);
      }
      if (hasSeatUser2) {
        size += pb::CodedOutputStream.ComputeMessageSize(11, SeatUser2);
      }
      if (hasSeatUser3) {
        size += pb::CodedOutputStream.ComputeMessageSize(12, SeatUser3);
      }
      if (hasSeatUser4) {
        size += pb::CodedOutputStream.ComputeMessageSize(13, SeatUser4);
      }
      if (hasRound) {
        size += pb::CodedOutputStream.ComputeInt32Size(14, Round);
      }
      if (hasHostSeat) {
        size += pb::CodedOutputStream.ComputeInt32Size(15, HostSeat);
      }
      if (hasSZ) {
        size += pb::CodedOutputStream.ComputeInt32Size(16, SZ);
      }
      if (hasLastActionSeat) {
        size += pb::CodedOutputStream.ComputeInt32Size(17, LastActionSeat);
      }
      if (hasLeftCards) {
        size += pb::CodedOutputStream.ComputeInt32Size(18, LeftCards);
      }
      if (hasStepChanged) {
        size += pb::CodedOutputStream.ComputeInt32Size(19, StepChanged);
      }
      if (hasIsPlayCard) {
        size += pb::CodedOutputStream.ComputeInt32Size(20, IsPlayCard);
      }
      if (hasDrawCard) {
        size += pb::CodedOutputStream.ComputeInt32Size(21, DrawCard);
      }
      if (hasLastAction) {
        size += pb::CodedOutputStream.ComputeMessageSize(22, LastAction);
      }
      if (hasLeftPlayTimes) {
        size += pb::CodedOutputStream.ComputeInt32Size(23, LeftPlayTimes);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static TableStatsxzdd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TableStatsxzdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TableStatsxzdd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TableStatsxzdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TableStatsxzdd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TableStatsxzdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TableStatsxzdd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TableStatsxzdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TableStatsxzdd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TableStatsxzdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TableStatsxzdd MakeReadOnly() {
      nowSeat_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TableStatsxzdd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TableStatsxzdd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TableStatsxzdd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TableStatsxzdd result;
      
      private TableStatsxzdd PrepareBuilder() {
        if (resultIsReadOnly) {
          TableStatsxzdd original = result;
          result = new TableStatsxzdd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TableStatsxzdd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.TableStatsxzdd.Descriptor; }
      }
      
      public override TableStatsxzdd DefaultInstanceForType {
        get { return global::gt_msg.TableStatsxzdd.DefaultInstance; }
      }
      
      public override TableStatsxzdd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TableStatsxzdd) {
          return MergeFrom((TableStatsxzdd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TableStatsxzdd other) {
        if (other == global::gt_msg.TableStatsxzdd.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTableID) {
          TableID = other.TableID;
        }
        if (other.HasStage) {
          Stage = other.Stage;
        }
        if (other.HasRank) {
          Rank = other.Rank;
        }
        if (other.HasRule) {
          Rule = other.Rule;
        }
        if (other.HasStep) {
          Step = other.Step;
        }
        if (other.HasNextActionTimeOut) {
          NextActionTimeOut = other.NextActionTimeOut;
        }
        if (other.HasMySeat) {
          MySeat = other.MySeat;
        }
        if (other.HasBasePoint) {
          BasePoint = other.BasePoint;
        }
        if (other.nowSeat_.Count != 0) {
          result.nowSeat_.Add(other.nowSeat_);
        }
        if (other.HasSeatUser1) {
          MergeSeatUser1(other.SeatUser1);
        }
        if (other.HasSeatUser2) {
          MergeSeatUser2(other.SeatUser2);
        }
        if (other.HasSeatUser3) {
          MergeSeatUser3(other.SeatUser3);
        }
        if (other.HasSeatUser4) {
          MergeSeatUser4(other.SeatUser4);
        }
        if (other.HasRound) {
          Round = other.Round;
        }
        if (other.HasHostSeat) {
          HostSeat = other.HostSeat;
        }
        if (other.HasSZ) {
          SZ = other.SZ;
        }
        if (other.HasLastActionSeat) {
          LastActionSeat = other.LastActionSeat;
        }
        if (other.HasLeftCards) {
          LeftCards = other.LeftCards;
        }
        if (other.HasStepChanged) {
          StepChanged = other.StepChanged;
        }
        if (other.HasIsPlayCard) {
          IsPlayCard = other.IsPlayCard;
        }
        if (other.HasDrawCard) {
          DrawCard = other.DrawCard;
        }
        if (other.HasLastAction) {
          MergeLastAction(other.LastAction);
        }
        if (other.HasLeftPlayTimes) {
          LeftPlayTimes = other.LeftPlayTimes;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tableStatsxzddFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tableStatsxzddFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTableID = input.ReadInt32(ref result.tableID_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.stage_, out unknown)) {
                result.hasStage = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.rank_, out unknown)) {
                result.hasRank = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
            case 32: {
              object unknown;
              if(input.ReadEnum(ref result.rule_, out unknown)) {
                result.hasRule = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong)(int)unknown);
              }
              break;
            }
            case 40: {
              result.hasStep = input.ReadInt32(ref result.step_);
              break;
            }
            case 48: {
              result.hasNextActionTimeOut = input.ReadInt32(ref result.nextActionTimeOut_);
              break;
            }
            case 56: {
              result.hasMySeat = input.ReadInt32(ref result.mySeat_);
              break;
            }
            case 64: {
              result.hasBasePoint = input.ReadInt32(ref result.basePoint_);
              break;
            }
            case 74:
            case 72: {
              input.ReadInt32Array(tag, field_name, result.nowSeat_);
              break;
            }
            case 82: {
              global::gt_msg.TableUserStatsxzdd.Builder subBuilder = global::gt_msg.TableUserStatsxzdd.CreateBuilder();
              if (result.hasSeatUser1) {
                subBuilder.MergeFrom(SeatUser1);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SeatUser1 = subBuilder.BuildPartial();
              break;
            }
            case 90: {
              global::gt_msg.TableUserStatsxzdd.Builder subBuilder = global::gt_msg.TableUserStatsxzdd.CreateBuilder();
              if (result.hasSeatUser2) {
                subBuilder.MergeFrom(SeatUser2);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SeatUser2 = subBuilder.BuildPartial();
              break;
            }
            case 98: {
              global::gt_msg.TableUserStatsxzdd.Builder subBuilder = global::gt_msg.TableUserStatsxzdd.CreateBuilder();
              if (result.hasSeatUser3) {
                subBuilder.MergeFrom(SeatUser3);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SeatUser3 = subBuilder.BuildPartial();
              break;
            }
            case 106: {
              global::gt_msg.TableUserStatsxzdd.Builder subBuilder = global::gt_msg.TableUserStatsxzdd.CreateBuilder();
              if (result.hasSeatUser4) {
                subBuilder.MergeFrom(SeatUser4);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SeatUser4 = subBuilder.BuildPartial();
              break;
            }
            case 112: {
              result.hasRound = input.ReadInt32(ref result.round_);
              break;
            }
            case 120: {
              result.hasHostSeat = input.ReadInt32(ref result.hostSeat_);
              break;
            }
            case 128: {
              result.hasSZ = input.ReadInt32(ref result.sZ_);
              break;
            }
            case 136: {
              result.hasLastActionSeat = input.ReadInt32(ref result.lastActionSeat_);
              break;
            }
            case 144: {
              result.hasLeftCards = input.ReadInt32(ref result.leftCards_);
              break;
            }
            case 152: {
              result.hasStepChanged = input.ReadInt32(ref result.stepChanged_);
              break;
            }
            case 160: {
              result.hasIsPlayCard = input.ReadInt32(ref result.isPlayCard_);
              break;
            }
            case 168: {
              result.hasDrawCard = input.ReadInt32(ref result.drawCard_);
              break;
            }
            case 178: {
              global::gt_msg.ActionRequestxzdd.Builder subBuilder = global::gt_msg.ActionRequestxzdd.CreateBuilder();
              if (result.hasLastAction) {
                subBuilder.MergeFrom(LastAction);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LastAction = subBuilder.BuildPartial();
              break;
            }
            case 184: {
              result.hasLeftPlayTimes = input.ReadInt32(ref result.leftPlayTimes_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTableID {
        get { return result.hasTableID; }
      }
      public int TableID {
        get { return result.TableID; }
        set { SetTableID(value); }
      }
      public Builder SetTableID(int value) {
        PrepareBuilder();
        result.hasTableID = true;
        result.tableID_ = value;
        return this;
      }
      public Builder ClearTableID() {
        PrepareBuilder();
        result.hasTableID = false;
        result.tableID_ = 0;
        return this;
      }
      
      public bool HasStage {
       get { return result.hasStage; }
      }
      public global::gt_msg.GameStagexzdd Stage {
        get { return result.Stage; }
        set { SetStage(value); }
      }
      public Builder SetStage(global::gt_msg.GameStagexzdd value) {
        PrepareBuilder();
        result.hasStage = true;
        result.stage_ = value;
        return this;
      }
      public Builder ClearStage() {
        PrepareBuilder();
        result.hasStage = false;
        result.stage_ = global::gt_msg.GameStagexzdd.Waiting;
        return this;
      }
      
      public bool HasRank {
       get { return result.hasRank; }
      }
      public global::gt_msg.Rank Rank {
        get { return result.Rank; }
        set { SetRank(value); }
      }
      public Builder SetRank(global::gt_msg.Rank value) {
        PrepareBuilder();
        result.hasRank = true;
        result.rank_ = value;
        return this;
      }
      public Builder ClearRank() {
        PrepareBuilder();
        result.hasRank = false;
        result.rank_ = global::gt_msg.Rank.LV0;
        return this;
      }
      
      public bool HasRule {
       get { return result.hasRule; }
      }
      public global::gt_msg.Rule Rule {
        get { return result.Rule; }
        set { SetRule(value); }
      }
      public Builder SetRule(global::gt_msg.Rule value) {
        PrepareBuilder();
        result.hasRule = true;
        result.rule_ = value;
        return this;
      }
      public Builder ClearRule() {
        PrepareBuilder();
        result.hasRule = false;
        result.rule_ = global::gt_msg.Rule.RuleNormal;
        return this;
      }
      
      public bool HasStep {
        get { return result.hasStep; }
      }
      public int Step {
        get { return result.Step; }
        set { SetStep(value); }
      }
      public Builder SetStep(int value) {
        PrepareBuilder();
        result.hasStep = true;
        result.step_ = value;
        return this;
      }
      public Builder ClearStep() {
        PrepareBuilder();
        result.hasStep = false;
        result.step_ = 0;
        return this;
      }
      
      public bool HasNextActionTimeOut {
        get { return result.hasNextActionTimeOut; }
      }
      public int NextActionTimeOut {
        get { return result.NextActionTimeOut; }
        set { SetNextActionTimeOut(value); }
      }
      public Builder SetNextActionTimeOut(int value) {
        PrepareBuilder();
        result.hasNextActionTimeOut = true;
        result.nextActionTimeOut_ = value;
        return this;
      }
      public Builder ClearNextActionTimeOut() {
        PrepareBuilder();
        result.hasNextActionTimeOut = false;
        result.nextActionTimeOut_ = 0;
        return this;
      }
      
      public bool HasMySeat {
        get { return result.hasMySeat; }
      }
      public int MySeat {
        get { return result.MySeat; }
        set { SetMySeat(value); }
      }
      public Builder SetMySeat(int value) {
        PrepareBuilder();
        result.hasMySeat = true;
        result.mySeat_ = value;
        return this;
      }
      public Builder ClearMySeat() {
        PrepareBuilder();
        result.hasMySeat = false;
        result.mySeat_ = 0;
        return this;
      }
      
      public bool HasBasePoint {
        get { return result.hasBasePoint; }
      }
      public int BasePoint {
        get { return result.BasePoint; }
        set { SetBasePoint(value); }
      }
      public Builder SetBasePoint(int value) {
        PrepareBuilder();
        result.hasBasePoint = true;
        result.basePoint_ = value;
        return this;
      }
      public Builder ClearBasePoint() {
        PrepareBuilder();
        result.hasBasePoint = false;
        result.basePoint_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> NowSeatList {
        get { return PrepareBuilder().nowSeat_; }
      }
      public int NowSeatCount {
        get { return result.NowSeatCount; }
      }
      public int GetNowSeat(int index) {
        return result.GetNowSeat(index);
      }
      public Builder SetNowSeat(int index, int value) {
        PrepareBuilder();
        result.nowSeat_[index] = value;
        return this;
      }
      public Builder AddNowSeat(int value) {
        PrepareBuilder();
        result.nowSeat_.Add(value);
        return this;
      }
      public Builder AddRangeNowSeat(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.nowSeat_.Add(values);
        return this;
      }
      public Builder ClearNowSeat() {
        PrepareBuilder();
        result.nowSeat_.Clear();
        return this;
      }
      
      public bool HasSeatUser1 {
       get { return result.hasSeatUser1; }
      }
      public global::gt_msg.TableUserStatsxzdd SeatUser1 {
        get { return result.SeatUser1; }
        set { SetSeatUser1(value); }
      }
      public Builder SetSeatUser1(global::gt_msg.TableUserStatsxzdd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSeatUser1 = true;
        result.seatUser1_ = value;
        return this;
      }
      public Builder SetSeatUser1(global::gt_msg.TableUserStatsxzdd.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSeatUser1 = true;
        result.seatUser1_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSeatUser1(global::gt_msg.TableUserStatsxzdd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSeatUser1 &&
            result.seatUser1_ != global::gt_msg.TableUserStatsxzdd.DefaultInstance) {
            result.seatUser1_ = global::gt_msg.TableUserStatsxzdd.CreateBuilder(result.seatUser1_).MergeFrom(value).BuildPartial();
        } else {
          result.seatUser1_ = value;
        }
        result.hasSeatUser1 = true;
        return this;
      }
      public Builder ClearSeatUser1() {
        PrepareBuilder();
        result.hasSeatUser1 = false;
        result.seatUser1_ = null;
        return this;
      }
      
      public bool HasSeatUser2 {
       get { return result.hasSeatUser2; }
      }
      public global::gt_msg.TableUserStatsxzdd SeatUser2 {
        get { return result.SeatUser2; }
        set { SetSeatUser2(value); }
      }
      public Builder SetSeatUser2(global::gt_msg.TableUserStatsxzdd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSeatUser2 = true;
        result.seatUser2_ = value;
        return this;
      }
      public Builder SetSeatUser2(global::gt_msg.TableUserStatsxzdd.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSeatUser2 = true;
        result.seatUser2_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSeatUser2(global::gt_msg.TableUserStatsxzdd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSeatUser2 &&
            result.seatUser2_ != global::gt_msg.TableUserStatsxzdd.DefaultInstance) {
            result.seatUser2_ = global::gt_msg.TableUserStatsxzdd.CreateBuilder(result.seatUser2_).MergeFrom(value).BuildPartial();
        } else {
          result.seatUser2_ = value;
        }
        result.hasSeatUser2 = true;
        return this;
      }
      public Builder ClearSeatUser2() {
        PrepareBuilder();
        result.hasSeatUser2 = false;
        result.seatUser2_ = null;
        return this;
      }
      
      public bool HasSeatUser3 {
       get { return result.hasSeatUser3; }
      }
      public global::gt_msg.TableUserStatsxzdd SeatUser3 {
        get { return result.SeatUser3; }
        set { SetSeatUser3(value); }
      }
      public Builder SetSeatUser3(global::gt_msg.TableUserStatsxzdd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSeatUser3 = true;
        result.seatUser3_ = value;
        return this;
      }
      public Builder SetSeatUser3(global::gt_msg.TableUserStatsxzdd.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSeatUser3 = true;
        result.seatUser3_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSeatUser3(global::gt_msg.TableUserStatsxzdd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSeatUser3 &&
            result.seatUser3_ != global::gt_msg.TableUserStatsxzdd.DefaultInstance) {
            result.seatUser3_ = global::gt_msg.TableUserStatsxzdd.CreateBuilder(result.seatUser3_).MergeFrom(value).BuildPartial();
        } else {
          result.seatUser3_ = value;
        }
        result.hasSeatUser3 = true;
        return this;
      }
      public Builder ClearSeatUser3() {
        PrepareBuilder();
        result.hasSeatUser3 = false;
        result.seatUser3_ = null;
        return this;
      }
      
      public bool HasSeatUser4 {
       get { return result.hasSeatUser4; }
      }
      public global::gt_msg.TableUserStatsxzdd SeatUser4 {
        get { return result.SeatUser4; }
        set { SetSeatUser4(value); }
      }
      public Builder SetSeatUser4(global::gt_msg.TableUserStatsxzdd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSeatUser4 = true;
        result.seatUser4_ = value;
        return this;
      }
      public Builder SetSeatUser4(global::gt_msg.TableUserStatsxzdd.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSeatUser4 = true;
        result.seatUser4_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSeatUser4(global::gt_msg.TableUserStatsxzdd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSeatUser4 &&
            result.seatUser4_ != global::gt_msg.TableUserStatsxzdd.DefaultInstance) {
            result.seatUser4_ = global::gt_msg.TableUserStatsxzdd.CreateBuilder(result.seatUser4_).MergeFrom(value).BuildPartial();
        } else {
          result.seatUser4_ = value;
        }
        result.hasSeatUser4 = true;
        return this;
      }
      public Builder ClearSeatUser4() {
        PrepareBuilder();
        result.hasSeatUser4 = false;
        result.seatUser4_ = null;
        return this;
      }
      
      public bool HasRound {
        get { return result.hasRound; }
      }
      public int Round {
        get { return result.Round; }
        set { SetRound(value); }
      }
      public Builder SetRound(int value) {
        PrepareBuilder();
        result.hasRound = true;
        result.round_ = value;
        return this;
      }
      public Builder ClearRound() {
        PrepareBuilder();
        result.hasRound = false;
        result.round_ = 0;
        return this;
      }
      
      public bool HasHostSeat {
        get { return result.hasHostSeat; }
      }
      public int HostSeat {
        get { return result.HostSeat; }
        set { SetHostSeat(value); }
      }
      public Builder SetHostSeat(int value) {
        PrepareBuilder();
        result.hasHostSeat = true;
        result.hostSeat_ = value;
        return this;
      }
      public Builder ClearHostSeat() {
        PrepareBuilder();
        result.hasHostSeat = false;
        result.hostSeat_ = 0;
        return this;
      }
      
      public bool HasSZ {
        get { return result.hasSZ; }
      }
      public int SZ {
        get { return result.SZ; }
        set { SetSZ(value); }
      }
      public Builder SetSZ(int value) {
        PrepareBuilder();
        result.hasSZ = true;
        result.sZ_ = value;
        return this;
      }
      public Builder ClearSZ() {
        PrepareBuilder();
        result.hasSZ = false;
        result.sZ_ = 0;
        return this;
      }
      
      public bool HasLastActionSeat {
        get { return result.hasLastActionSeat; }
      }
      public int LastActionSeat {
        get { return result.LastActionSeat; }
        set { SetLastActionSeat(value); }
      }
      public Builder SetLastActionSeat(int value) {
        PrepareBuilder();
        result.hasLastActionSeat = true;
        result.lastActionSeat_ = value;
        return this;
      }
      public Builder ClearLastActionSeat() {
        PrepareBuilder();
        result.hasLastActionSeat = false;
        result.lastActionSeat_ = 0;
        return this;
      }
      
      public bool HasLeftCards {
        get { return result.hasLeftCards; }
      }
      public int LeftCards {
        get { return result.LeftCards; }
        set { SetLeftCards(value); }
      }
      public Builder SetLeftCards(int value) {
        PrepareBuilder();
        result.hasLeftCards = true;
        result.leftCards_ = value;
        return this;
      }
      public Builder ClearLeftCards() {
        PrepareBuilder();
        result.hasLeftCards = false;
        result.leftCards_ = 0;
        return this;
      }
      
      public bool HasStepChanged {
        get { return result.hasStepChanged; }
      }
      public int StepChanged {
        get { return result.StepChanged; }
        set { SetStepChanged(value); }
      }
      public Builder SetStepChanged(int value) {
        PrepareBuilder();
        result.hasStepChanged = true;
        result.stepChanged_ = value;
        return this;
      }
      public Builder ClearStepChanged() {
        PrepareBuilder();
        result.hasStepChanged = false;
        result.stepChanged_ = 0;
        return this;
      }
      
      public bool HasIsPlayCard {
        get { return result.hasIsPlayCard; }
      }
      public int IsPlayCard {
        get { return result.IsPlayCard; }
        set { SetIsPlayCard(value); }
      }
      public Builder SetIsPlayCard(int value) {
        PrepareBuilder();
        result.hasIsPlayCard = true;
        result.isPlayCard_ = value;
        return this;
      }
      public Builder ClearIsPlayCard() {
        PrepareBuilder();
        result.hasIsPlayCard = false;
        result.isPlayCard_ = 0;
        return this;
      }
      
      public bool HasDrawCard {
        get { return result.hasDrawCard; }
      }
      public int DrawCard {
        get { return result.DrawCard; }
        set { SetDrawCard(value); }
      }
      public Builder SetDrawCard(int value) {
        PrepareBuilder();
        result.hasDrawCard = true;
        result.drawCard_ = value;
        return this;
      }
      public Builder ClearDrawCard() {
        PrepareBuilder();
        result.hasDrawCard = false;
        result.drawCard_ = 0;
        return this;
      }
      
      public bool HasLastAction {
       get { return result.hasLastAction; }
      }
      public global::gt_msg.ActionRequestxzdd LastAction {
        get { return result.LastAction; }
        set { SetLastAction(value); }
      }
      public Builder SetLastAction(global::gt_msg.ActionRequestxzdd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLastAction = true;
        result.lastAction_ = value;
        return this;
      }
      public Builder SetLastAction(global::gt_msg.ActionRequestxzdd.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLastAction = true;
        result.lastAction_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLastAction(global::gt_msg.ActionRequestxzdd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLastAction &&
            result.lastAction_ != global::gt_msg.ActionRequestxzdd.DefaultInstance) {
            result.lastAction_ = global::gt_msg.ActionRequestxzdd.CreateBuilder(result.lastAction_).MergeFrom(value).BuildPartial();
        } else {
          result.lastAction_ = value;
        }
        result.hasLastAction = true;
        return this;
      }
      public Builder ClearLastAction() {
        PrepareBuilder();
        result.hasLastAction = false;
        result.lastAction_ = null;
        return this;
      }
      
      public bool HasLeftPlayTimes {
        get { return result.hasLeftPlayTimes; }
      }
      public int LeftPlayTimes {
        get { return result.LeftPlayTimes; }
        set { SetLeftPlayTimes(value); }
      }
      public Builder SetLeftPlayTimes(int value) {
        PrepareBuilder();
        result.hasLeftPlayTimes = true;
        result.leftPlayTimes_ = value;
        return this;
      }
      public Builder ClearLeftPlayTimes() {
        PrepareBuilder();
        result.hasLeftPlayTimes = false;
        result.leftPlayTimes_ = 0;
        return this;
      }
    }
    static TableStatsxzdd() {
      object.ReferenceEquals(global::gt_msg.GtXzdd.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TableUserResultxzdd : pb::GeneratedMessage<TableUserResultxzdd, TableUserResultxzdd.Builder> {
    private TableUserResultxzdd() { }
    private static readonly TableUserResultxzdd defaultInstance = new TableUserResultxzdd().MakeReadOnly();
    private static readonly string[] _tableUserResultxzddFieldNames = new string[] { "Groups", "HandCards", "IsHost", "LostWin", "NowSeat", "PlayCards", "Rate", "Tax", "WinCard", "WinType", "runtimeresult", "user_info" };
    private static readonly uint[] _tableUserResultxzddFieldTags = new uint[] { 74, 64, 40, 26, 16, 88, 48, 32, 96, 56, 82, 10 };
    public static TableUserResultxzdd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TableUserResultxzdd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TableUserResultxzdd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_TableUserResultxzdd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TableUserResultxzdd, TableUserResultxzdd.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_TableUserResultxzdd__FieldAccessorTable; }
    }
    
    public const int UserInfoFieldNumber = 1;
    private bool hasUserInfo;
    private global::gt_msg.User userInfo_;
    public bool HasUserInfo {
      get { return hasUserInfo; }
    }
    public global::gt_msg.User UserInfo {
      get { return userInfo_ ?? global::gt_msg.User.DefaultInstance; }
    }
    
    public const int NowSeatFieldNumber = 2;
    private bool hasNowSeat;
    private int nowSeat_;
    public bool HasNowSeat {
      get { return hasNowSeat; }
    }
    public int NowSeat {
      get { return nowSeat_; }
    }
    
    public const int LostWinFieldNumber = 3;
    private bool hasLostWin;
    private global::gt_msg.ItemChangedEvent lostWin_;
    public bool HasLostWin {
      get { return hasLostWin; }
    }
    public global::gt_msg.ItemChangedEvent LostWin {
      get { return lostWin_ ?? global::gt_msg.ItemChangedEvent.DefaultInstance; }
    }
    
    public const int TaxFieldNumber = 4;
    private bool hasTax;
    private int tax_;
    public bool HasTax {
      get { return hasTax; }
    }
    public int Tax {
      get { return tax_; }
    }
    
    public const int IsHostFieldNumber = 5;
    private bool hasIsHost;
    private bool isHost_;
    public bool HasIsHost {
      get { return hasIsHost; }
    }
    public bool IsHost {
      get { return isHost_; }
    }
    
    public const int RateFieldNumber = 6;
    private bool hasRate;
    private int rate_;
    public bool HasRate {
      get { return hasRate; }
    }
    public int Rate {
      get { return rate_; }
    }
    
    public const int WinTypeFieldNumber = 7;
    private bool hasWinType;
    private global::gt_msg.CardsTypexzdd winType_ = global::gt_msg.CardsTypexzdd.ErrType;
    public bool HasWinType {
      get { return hasWinType; }
    }
    public global::gt_msg.CardsTypexzdd WinType {
      get { return winType_; }
    }
    
    public const int HandCardsFieldNumber = 8;
    private pbc::PopsicleList<int> handCards_ = new pbc::PopsicleList<int>();
    public scg::IList<int> HandCardsList {
      get { return pbc::Lists.AsReadOnly(handCards_); }
    }
    public int HandCardsCount {
      get { return handCards_.Count; }
    }
    public int GetHandCards(int index) {
      return handCards_[index];
    }
    
    public const int GroupsFieldNumber = 9;
    private pbc::PopsicleList<global::gt_msg.CardGroupxzdd> groups_ = new pbc::PopsicleList<global::gt_msg.CardGroupxzdd>();
    public scg::IList<global::gt_msg.CardGroupxzdd> GroupsList {
      get { return groups_; }
    }
    public int GroupsCount {
      get { return groups_.Count; }
    }
    public global::gt_msg.CardGroupxzdd GetGroups(int index) {
      return groups_[index];
    }
    
    public const int RuntimeresultFieldNumber = 10;
    private pbc::PopsicleList<global::gt_msg.TableRunTimeResult> runtimeresult_ = new pbc::PopsicleList<global::gt_msg.TableRunTimeResult>();
    public scg::IList<global::gt_msg.TableRunTimeResult> RuntimeresultList {
      get { return runtimeresult_; }
    }
    public int RuntimeresultCount {
      get { return runtimeresult_.Count; }
    }
    public global::gt_msg.TableRunTimeResult GetRuntimeresult(int index) {
      return runtimeresult_[index];
    }
    
    public const int PlayCardsFieldNumber = 11;
    private pbc::PopsicleList<int> playCards_ = new pbc::PopsicleList<int>();
    public scg::IList<int> PlayCardsList {
      get { return pbc::Lists.AsReadOnly(playCards_); }
    }
    public int PlayCardsCount {
      get { return playCards_.Count; }
    }
    public int GetPlayCards(int index) {
      return playCards_[index];
    }
    
    public const int WinCardFieldNumber = 12;
    private bool hasWinCard;
    private int winCard_;
    public bool HasWinCard {
      get { return hasWinCard; }
    }
    public int WinCard {
      get { return winCard_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasNowSeat) return false;
        if (HasUserInfo) {
          if (!UserInfo.IsInitialized) return false;
        }
        foreach (global::gt_msg.CardGroupxzdd element in GroupsList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::gt_msg.TableRunTimeResult element in RuntimeresultList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _tableUserResultxzddFieldNames;
      if (hasUserInfo) {
        output.WriteMessage(1, field_names[11], UserInfo);
      }
      if (hasNowSeat) {
        output.WriteInt32(2, field_names[4], NowSeat);
      }
      if (hasLostWin) {
        output.WriteMessage(3, field_names[3], LostWin);
      }
      if (hasTax) {
        output.WriteInt32(4, field_names[7], Tax);
      }
      if (hasIsHost) {
        output.WriteBool(5, field_names[2], IsHost);
      }
      if (hasRate) {
        output.WriteInt32(6, field_names[6], Rate);
      }
      if (hasWinType) {
        output.WriteEnum(7, field_names[9], (int) WinType, WinType);
      }
      if (handCards_.Count > 0) {
        output.WriteInt32Array(8, field_names[1], handCards_);
      }
      if (groups_.Count > 0) {
        output.WriteMessageArray(9, field_names[0], groups_);
      }
      if (runtimeresult_.Count > 0) {
        output.WriteMessageArray(10, field_names[10], runtimeresult_);
      }
      if (playCards_.Count > 0) {
        output.WriteInt32Array(11, field_names[5], playCards_);
      }
      if (hasWinCard) {
        output.WriteInt32(12, field_names[8], WinCard);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUserInfo) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, UserInfo);
      }
      if (hasNowSeat) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, NowSeat);
      }
      if (hasLostWin) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, LostWin);
      }
      if (hasTax) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, Tax);
      }
      if (hasIsHost) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, IsHost);
      }
      if (hasRate) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, Rate);
      }
      if (hasWinType) {
        size += pb::CodedOutputStream.ComputeEnumSize(7, (int) WinType);
      }
      {
        int dataSize = 0;
        foreach (int element in HandCardsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * handCards_.Count;
      }
      foreach (global::gt_msg.CardGroupxzdd element in GroupsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(9, element);
      }
      foreach (global::gt_msg.TableRunTimeResult element in RuntimeresultList) {
        size += pb::CodedOutputStream.ComputeMessageSize(10, element);
      }
      {
        int dataSize = 0;
        foreach (int element in PlayCardsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * playCards_.Count;
      }
      if (hasWinCard) {
        size += pb::CodedOutputStream.ComputeInt32Size(12, WinCard);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static TableUserResultxzdd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TableUserResultxzdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TableUserResultxzdd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TableUserResultxzdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TableUserResultxzdd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TableUserResultxzdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TableUserResultxzdd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TableUserResultxzdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TableUserResultxzdd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TableUserResultxzdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TableUserResultxzdd MakeReadOnly() {
      handCards_.MakeReadOnly();
      groups_.MakeReadOnly();
      runtimeresult_.MakeReadOnly();
      playCards_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TableUserResultxzdd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TableUserResultxzdd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TableUserResultxzdd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TableUserResultxzdd result;
      
      private TableUserResultxzdd PrepareBuilder() {
        if (resultIsReadOnly) {
          TableUserResultxzdd original = result;
          result = new TableUserResultxzdd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TableUserResultxzdd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.TableUserResultxzdd.Descriptor; }
      }
      
      public override TableUserResultxzdd DefaultInstanceForType {
        get { return global::gt_msg.TableUserResultxzdd.DefaultInstance; }
      }
      
      public override TableUserResultxzdd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TableUserResultxzdd) {
          return MergeFrom((TableUserResultxzdd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TableUserResultxzdd other) {
        if (other == global::gt_msg.TableUserResultxzdd.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUserInfo) {
          MergeUserInfo(other.UserInfo);
        }
        if (other.HasNowSeat) {
          NowSeat = other.NowSeat;
        }
        if (other.HasLostWin) {
          MergeLostWin(other.LostWin);
        }
        if (other.HasTax) {
          Tax = other.Tax;
        }
        if (other.HasIsHost) {
          IsHost = other.IsHost;
        }
        if (other.HasRate) {
          Rate = other.Rate;
        }
        if (other.HasWinType) {
          WinType = other.WinType;
        }
        if (other.handCards_.Count != 0) {
          result.handCards_.Add(other.handCards_);
        }
        if (other.groups_.Count != 0) {
          result.groups_.Add(other.groups_);
        }
        if (other.runtimeresult_.Count != 0) {
          result.runtimeresult_.Add(other.runtimeresult_);
        }
        if (other.playCards_.Count != 0) {
          result.playCards_.Add(other.playCards_);
        }
        if (other.HasWinCard) {
          WinCard = other.WinCard;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tableUserResultxzddFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tableUserResultxzddFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::gt_msg.User.Builder subBuilder = global::gt_msg.User.CreateBuilder();
              if (result.hasUserInfo) {
                subBuilder.MergeFrom(UserInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserInfo = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasNowSeat = input.ReadInt32(ref result.nowSeat_);
              break;
            }
            case 26: {
              global::gt_msg.ItemChangedEvent.Builder subBuilder = global::gt_msg.ItemChangedEvent.CreateBuilder();
              if (result.hasLostWin) {
                subBuilder.MergeFrom(LostWin);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LostWin = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasTax = input.ReadInt32(ref result.tax_);
              break;
            }
            case 40: {
              result.hasIsHost = input.ReadBool(ref result.isHost_);
              break;
            }
            case 48: {
              result.hasRate = input.ReadInt32(ref result.rate_);
              break;
            }
            case 56: {
              object unknown;
              if(input.ReadEnum(ref result.winType_, out unknown)) {
                result.hasWinType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(7, (ulong)(int)unknown);
              }
              break;
            }
            case 66:
            case 64: {
              input.ReadInt32Array(tag, field_name, result.handCards_);
              break;
            }
            case 74: {
              input.ReadMessageArray(tag, field_name, result.groups_, global::gt_msg.CardGroupxzdd.DefaultInstance, extensionRegistry);
              break;
            }
            case 82: {
              input.ReadMessageArray(tag, field_name, result.runtimeresult_, global::gt_msg.TableRunTimeResult.DefaultInstance, extensionRegistry);
              break;
            }
            case 90:
            case 88: {
              input.ReadInt32Array(tag, field_name, result.playCards_);
              break;
            }
            case 96: {
              result.hasWinCard = input.ReadInt32(ref result.winCard_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUserInfo {
       get { return result.hasUserInfo; }
      }
      public global::gt_msg.User UserInfo {
        get { return result.UserInfo; }
        set { SetUserInfo(value); }
      }
      public Builder SetUserInfo(global::gt_msg.User value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserInfo = true;
        result.userInfo_ = value;
        return this;
      }
      public Builder SetUserInfo(global::gt_msg.User.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserInfo = true;
        result.userInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserInfo(global::gt_msg.User value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserInfo &&
            result.userInfo_ != global::gt_msg.User.DefaultInstance) {
            result.userInfo_ = global::gt_msg.User.CreateBuilder(result.userInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.userInfo_ = value;
        }
        result.hasUserInfo = true;
        return this;
      }
      public Builder ClearUserInfo() {
        PrepareBuilder();
        result.hasUserInfo = false;
        result.userInfo_ = null;
        return this;
      }
      
      public bool HasNowSeat {
        get { return result.hasNowSeat; }
      }
      public int NowSeat {
        get { return result.NowSeat; }
        set { SetNowSeat(value); }
      }
      public Builder SetNowSeat(int value) {
        PrepareBuilder();
        result.hasNowSeat = true;
        result.nowSeat_ = value;
        return this;
      }
      public Builder ClearNowSeat() {
        PrepareBuilder();
        result.hasNowSeat = false;
        result.nowSeat_ = 0;
        return this;
      }
      
      public bool HasLostWin {
       get { return result.hasLostWin; }
      }
      public global::gt_msg.ItemChangedEvent LostWin {
        get { return result.LostWin; }
        set { SetLostWin(value); }
      }
      public Builder SetLostWin(global::gt_msg.ItemChangedEvent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLostWin = true;
        result.lostWin_ = value;
        return this;
      }
      public Builder SetLostWin(global::gt_msg.ItemChangedEvent.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLostWin = true;
        result.lostWin_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLostWin(global::gt_msg.ItemChangedEvent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLostWin &&
            result.lostWin_ != global::gt_msg.ItemChangedEvent.DefaultInstance) {
            result.lostWin_ = global::gt_msg.ItemChangedEvent.CreateBuilder(result.lostWin_).MergeFrom(value).BuildPartial();
        } else {
          result.lostWin_ = value;
        }
        result.hasLostWin = true;
        return this;
      }
      public Builder ClearLostWin() {
        PrepareBuilder();
        result.hasLostWin = false;
        result.lostWin_ = null;
        return this;
      }
      
      public bool HasTax {
        get { return result.hasTax; }
      }
      public int Tax {
        get { return result.Tax; }
        set { SetTax(value); }
      }
      public Builder SetTax(int value) {
        PrepareBuilder();
        result.hasTax = true;
        result.tax_ = value;
        return this;
      }
      public Builder ClearTax() {
        PrepareBuilder();
        result.hasTax = false;
        result.tax_ = 0;
        return this;
      }
      
      public bool HasIsHost {
        get { return result.hasIsHost; }
      }
      public bool IsHost {
        get { return result.IsHost; }
        set { SetIsHost(value); }
      }
      public Builder SetIsHost(bool value) {
        PrepareBuilder();
        result.hasIsHost = true;
        result.isHost_ = value;
        return this;
      }
      public Builder ClearIsHost() {
        PrepareBuilder();
        result.hasIsHost = false;
        result.isHost_ = false;
        return this;
      }
      
      public bool HasRate {
        get { return result.hasRate; }
      }
      public int Rate {
        get { return result.Rate; }
        set { SetRate(value); }
      }
      public Builder SetRate(int value) {
        PrepareBuilder();
        result.hasRate = true;
        result.rate_ = value;
        return this;
      }
      public Builder ClearRate() {
        PrepareBuilder();
        result.hasRate = false;
        result.rate_ = 0;
        return this;
      }
      
      public bool HasWinType {
       get { return result.hasWinType; }
      }
      public global::gt_msg.CardsTypexzdd WinType {
        get { return result.WinType; }
        set { SetWinType(value); }
      }
      public Builder SetWinType(global::gt_msg.CardsTypexzdd value) {
        PrepareBuilder();
        result.hasWinType = true;
        result.winType_ = value;
        return this;
      }
      public Builder ClearWinType() {
        PrepareBuilder();
        result.hasWinType = false;
        result.winType_ = global::gt_msg.CardsTypexzdd.ErrType;
        return this;
      }
      
      public pbc::IPopsicleList<int> HandCardsList {
        get { return PrepareBuilder().handCards_; }
      }
      public int HandCardsCount {
        get { return result.HandCardsCount; }
      }
      public int GetHandCards(int index) {
        return result.GetHandCards(index);
      }
      public Builder SetHandCards(int index, int value) {
        PrepareBuilder();
        result.handCards_[index] = value;
        return this;
      }
      public Builder AddHandCards(int value) {
        PrepareBuilder();
        result.handCards_.Add(value);
        return this;
      }
      public Builder AddRangeHandCards(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.handCards_.Add(values);
        return this;
      }
      public Builder ClearHandCards() {
        PrepareBuilder();
        result.handCards_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::gt_msg.CardGroupxzdd> GroupsList {
        get { return PrepareBuilder().groups_; }
      }
      public int GroupsCount {
        get { return result.GroupsCount; }
      }
      public global::gt_msg.CardGroupxzdd GetGroups(int index) {
        return result.GetGroups(index);
      }
      public Builder SetGroups(int index, global::gt_msg.CardGroupxzdd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.groups_[index] = value;
        return this;
      }
      public Builder SetGroups(int index, global::gt_msg.CardGroupxzdd.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.groups_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddGroups(global::gt_msg.CardGroupxzdd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.groups_.Add(value);
        return this;
      }
      public Builder AddGroups(global::gt_msg.CardGroupxzdd.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.groups_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeGroups(scg::IEnumerable<global::gt_msg.CardGroupxzdd> values) {
        PrepareBuilder();
        result.groups_.Add(values);
        return this;
      }
      public Builder ClearGroups() {
        PrepareBuilder();
        result.groups_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::gt_msg.TableRunTimeResult> RuntimeresultList {
        get { return PrepareBuilder().runtimeresult_; }
      }
      public int RuntimeresultCount {
        get { return result.RuntimeresultCount; }
      }
      public global::gt_msg.TableRunTimeResult GetRuntimeresult(int index) {
        return result.GetRuntimeresult(index);
      }
      public Builder SetRuntimeresult(int index, global::gt_msg.TableRunTimeResult value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.runtimeresult_[index] = value;
        return this;
      }
      public Builder SetRuntimeresult(int index, global::gt_msg.TableRunTimeResult.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.runtimeresult_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddRuntimeresult(global::gt_msg.TableRunTimeResult value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.runtimeresult_.Add(value);
        return this;
      }
      public Builder AddRuntimeresult(global::gt_msg.TableRunTimeResult.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.runtimeresult_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeRuntimeresult(scg::IEnumerable<global::gt_msg.TableRunTimeResult> values) {
        PrepareBuilder();
        result.runtimeresult_.Add(values);
        return this;
      }
      public Builder ClearRuntimeresult() {
        PrepareBuilder();
        result.runtimeresult_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> PlayCardsList {
        get { return PrepareBuilder().playCards_; }
      }
      public int PlayCardsCount {
        get { return result.PlayCardsCount; }
      }
      public int GetPlayCards(int index) {
        return result.GetPlayCards(index);
      }
      public Builder SetPlayCards(int index, int value) {
        PrepareBuilder();
        result.playCards_[index] = value;
        return this;
      }
      public Builder AddPlayCards(int value) {
        PrepareBuilder();
        result.playCards_.Add(value);
        return this;
      }
      public Builder AddRangePlayCards(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.playCards_.Add(values);
        return this;
      }
      public Builder ClearPlayCards() {
        PrepareBuilder();
        result.playCards_.Clear();
        return this;
      }
      
      public bool HasWinCard {
        get { return result.hasWinCard; }
      }
      public int WinCard {
        get { return result.WinCard; }
        set { SetWinCard(value); }
      }
      public Builder SetWinCard(int value) {
        PrepareBuilder();
        result.hasWinCard = true;
        result.winCard_ = value;
        return this;
      }
      public Builder ClearWinCard() {
        PrepareBuilder();
        result.hasWinCard = false;
        result.winCard_ = 0;
        return this;
      }
    }
    static TableUserResultxzdd() {
      object.ReferenceEquals(global::gt_msg.GtXzdd.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RoundEndedEventxzdd : pb::GeneratedMessage<RoundEndedEventxzdd, RoundEndedEventxzdd.Builder> {
    private RoundEndedEventxzdd() { }
    private static readonly RoundEndedEventxzdd defaultInstance = new RoundEndedEventxzdd().MakeReadOnly();
    private static readonly string[] _roundEndedEventxzddFieldNames = new string[] { "BasePoint", "Hostlw", "MySeat", "NextStartTimeoutSecs", "SeatUser1", "SeatUser2", "SeatUser3", "SeatUser4", "TableID" };
    private static readonly uint[] _roundEndedEventxzddFieldTags = new uint[] { 32, 24, 16, 40, 50, 58, 66, 74, 8 };
    public static RoundEndedEventxzdd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RoundEndedEventxzdd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RoundEndedEventxzdd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_RoundEndedEventxzdd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RoundEndedEventxzdd, RoundEndedEventxzdd.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_RoundEndedEventxzdd__FieldAccessorTable; }
    }
    
    public const int TableIDFieldNumber = 1;
    private bool hasTableID;
    private int tableID_;
    public bool HasTableID {
      get { return hasTableID; }
    }
    public int TableID {
      get { return tableID_; }
    }
    
    public const int MySeatFieldNumber = 2;
    private bool hasMySeat;
    private int mySeat_;
    public bool HasMySeat {
      get { return hasMySeat; }
    }
    public int MySeat {
      get { return mySeat_; }
    }
    
    public const int HostlwFieldNumber = 3;
    private bool hasHostlw;
    private int hostlw_;
    public bool HasHostlw {
      get { return hasHostlw; }
    }
    public int Hostlw {
      get { return hostlw_; }
    }
    
    public const int BasePointFieldNumber = 4;
    private bool hasBasePoint;
    private int basePoint_;
    public bool HasBasePoint {
      get { return hasBasePoint; }
    }
    public int BasePoint {
      get { return basePoint_; }
    }
    
    public const int NextStartTimeoutSecsFieldNumber = 5;
    private bool hasNextStartTimeoutSecs;
    private int nextStartTimeoutSecs_;
    public bool HasNextStartTimeoutSecs {
      get { return hasNextStartTimeoutSecs; }
    }
    public int NextStartTimeoutSecs {
      get { return nextStartTimeoutSecs_; }
    }
    
    public const int SeatUser1FieldNumber = 6;
    private bool hasSeatUser1;
    private global::gt_msg.TableUserResultxzdd seatUser1_;
    public bool HasSeatUser1 {
      get { return hasSeatUser1; }
    }
    public global::gt_msg.TableUserResultxzdd SeatUser1 {
      get { return seatUser1_ ?? global::gt_msg.TableUserResultxzdd.DefaultInstance; }
    }
    
    public const int SeatUser2FieldNumber = 7;
    private bool hasSeatUser2;
    private global::gt_msg.TableUserResultxzdd seatUser2_;
    public bool HasSeatUser2 {
      get { return hasSeatUser2; }
    }
    public global::gt_msg.TableUserResultxzdd SeatUser2 {
      get { return seatUser2_ ?? global::gt_msg.TableUserResultxzdd.DefaultInstance; }
    }
    
    public const int SeatUser3FieldNumber = 8;
    private bool hasSeatUser3;
    private global::gt_msg.TableUserResultxzdd seatUser3_;
    public bool HasSeatUser3 {
      get { return hasSeatUser3; }
    }
    public global::gt_msg.TableUserResultxzdd SeatUser3 {
      get { return seatUser3_ ?? global::gt_msg.TableUserResultxzdd.DefaultInstance; }
    }
    
    public const int SeatUser4FieldNumber = 9;
    private bool hasSeatUser4;
    private global::gt_msg.TableUserResultxzdd seatUser4_;
    public bool HasSeatUser4 {
      get { return hasSeatUser4; }
    }
    public global::gt_msg.TableUserResultxzdd SeatUser4 {
      get { return seatUser4_ ?? global::gt_msg.TableUserResultxzdd.DefaultInstance; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTableID) return false;
        if (!hasMySeat) return false;
        if (!hasHostlw) return false;
        if (!hasBasePoint) return false;
        if (!hasNextStartTimeoutSecs) return false;
        if (HasSeatUser1) {
          if (!SeatUser1.IsInitialized) return false;
        }
        if (HasSeatUser2) {
          if (!SeatUser2.IsInitialized) return false;
        }
        if (HasSeatUser3) {
          if (!SeatUser3.IsInitialized) return false;
        }
        if (HasSeatUser4) {
          if (!SeatUser4.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _roundEndedEventxzddFieldNames;
      if (hasTableID) {
        output.WriteInt32(1, field_names[8], TableID);
      }
      if (hasMySeat) {
        output.WriteInt32(2, field_names[2], MySeat);
      }
      if (hasHostlw) {
        output.WriteInt32(3, field_names[1], Hostlw);
      }
      if (hasBasePoint) {
        output.WriteInt32(4, field_names[0], BasePoint);
      }
      if (hasNextStartTimeoutSecs) {
        output.WriteInt32(5, field_names[3], NextStartTimeoutSecs);
      }
      if (hasSeatUser1) {
        output.WriteMessage(6, field_names[4], SeatUser1);
      }
      if (hasSeatUser2) {
        output.WriteMessage(7, field_names[5], SeatUser2);
      }
      if (hasSeatUser3) {
        output.WriteMessage(8, field_names[6], SeatUser3);
      }
      if (hasSeatUser4) {
        output.WriteMessage(9, field_names[7], SeatUser4);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTableID) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, TableID);
      }
      if (hasMySeat) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, MySeat);
      }
      if (hasHostlw) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Hostlw);
      }
      if (hasBasePoint) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, BasePoint);
      }
      if (hasNextStartTimeoutSecs) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, NextStartTimeoutSecs);
      }
      if (hasSeatUser1) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, SeatUser1);
      }
      if (hasSeatUser2) {
        size += pb::CodedOutputStream.ComputeMessageSize(7, SeatUser2);
      }
      if (hasSeatUser3) {
        size += pb::CodedOutputStream.ComputeMessageSize(8, SeatUser3);
      }
      if (hasSeatUser4) {
        size += pb::CodedOutputStream.ComputeMessageSize(9, SeatUser4);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static RoundEndedEventxzdd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RoundEndedEventxzdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RoundEndedEventxzdd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RoundEndedEventxzdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RoundEndedEventxzdd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RoundEndedEventxzdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RoundEndedEventxzdd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RoundEndedEventxzdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RoundEndedEventxzdd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RoundEndedEventxzdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RoundEndedEventxzdd MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RoundEndedEventxzdd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<RoundEndedEventxzdd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RoundEndedEventxzdd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RoundEndedEventxzdd result;
      
      private RoundEndedEventxzdd PrepareBuilder() {
        if (resultIsReadOnly) {
          RoundEndedEventxzdd original = result;
          result = new RoundEndedEventxzdd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RoundEndedEventxzdd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.RoundEndedEventxzdd.Descriptor; }
      }
      
      public override RoundEndedEventxzdd DefaultInstanceForType {
        get { return global::gt_msg.RoundEndedEventxzdd.DefaultInstance; }
      }
      
      public override RoundEndedEventxzdd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RoundEndedEventxzdd) {
          return MergeFrom((RoundEndedEventxzdd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RoundEndedEventxzdd other) {
        if (other == global::gt_msg.RoundEndedEventxzdd.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTableID) {
          TableID = other.TableID;
        }
        if (other.HasMySeat) {
          MySeat = other.MySeat;
        }
        if (other.HasHostlw) {
          Hostlw = other.Hostlw;
        }
        if (other.HasBasePoint) {
          BasePoint = other.BasePoint;
        }
        if (other.HasNextStartTimeoutSecs) {
          NextStartTimeoutSecs = other.NextStartTimeoutSecs;
        }
        if (other.HasSeatUser1) {
          MergeSeatUser1(other.SeatUser1);
        }
        if (other.HasSeatUser2) {
          MergeSeatUser2(other.SeatUser2);
        }
        if (other.HasSeatUser3) {
          MergeSeatUser3(other.SeatUser3);
        }
        if (other.HasSeatUser4) {
          MergeSeatUser4(other.SeatUser4);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_roundEndedEventxzddFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _roundEndedEventxzddFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTableID = input.ReadInt32(ref result.tableID_);
              break;
            }
            case 16: {
              result.hasMySeat = input.ReadInt32(ref result.mySeat_);
              break;
            }
            case 24: {
              result.hasHostlw = input.ReadInt32(ref result.hostlw_);
              break;
            }
            case 32: {
              result.hasBasePoint = input.ReadInt32(ref result.basePoint_);
              break;
            }
            case 40: {
              result.hasNextStartTimeoutSecs = input.ReadInt32(ref result.nextStartTimeoutSecs_);
              break;
            }
            case 50: {
              global::gt_msg.TableUserResultxzdd.Builder subBuilder = global::gt_msg.TableUserResultxzdd.CreateBuilder();
              if (result.hasSeatUser1) {
                subBuilder.MergeFrom(SeatUser1);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SeatUser1 = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::gt_msg.TableUserResultxzdd.Builder subBuilder = global::gt_msg.TableUserResultxzdd.CreateBuilder();
              if (result.hasSeatUser2) {
                subBuilder.MergeFrom(SeatUser2);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SeatUser2 = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::gt_msg.TableUserResultxzdd.Builder subBuilder = global::gt_msg.TableUserResultxzdd.CreateBuilder();
              if (result.hasSeatUser3) {
                subBuilder.MergeFrom(SeatUser3);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SeatUser3 = subBuilder.BuildPartial();
              break;
            }
            case 74: {
              global::gt_msg.TableUserResultxzdd.Builder subBuilder = global::gt_msg.TableUserResultxzdd.CreateBuilder();
              if (result.hasSeatUser4) {
                subBuilder.MergeFrom(SeatUser4);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SeatUser4 = subBuilder.BuildPartial();
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTableID {
        get { return result.hasTableID; }
      }
      public int TableID {
        get { return result.TableID; }
        set { SetTableID(value); }
      }
      public Builder SetTableID(int value) {
        PrepareBuilder();
        result.hasTableID = true;
        result.tableID_ = value;
        return this;
      }
      public Builder ClearTableID() {
        PrepareBuilder();
        result.hasTableID = false;
        result.tableID_ = 0;
        return this;
      }
      
      public bool HasMySeat {
        get { return result.hasMySeat; }
      }
      public int MySeat {
        get { return result.MySeat; }
        set { SetMySeat(value); }
      }
      public Builder SetMySeat(int value) {
        PrepareBuilder();
        result.hasMySeat = true;
        result.mySeat_ = value;
        return this;
      }
      public Builder ClearMySeat() {
        PrepareBuilder();
        result.hasMySeat = false;
        result.mySeat_ = 0;
        return this;
      }
      
      public bool HasHostlw {
        get { return result.hasHostlw; }
      }
      public int Hostlw {
        get { return result.Hostlw; }
        set { SetHostlw(value); }
      }
      public Builder SetHostlw(int value) {
        PrepareBuilder();
        result.hasHostlw = true;
        result.hostlw_ = value;
        return this;
      }
      public Builder ClearHostlw() {
        PrepareBuilder();
        result.hasHostlw = false;
        result.hostlw_ = 0;
        return this;
      }
      
      public bool HasBasePoint {
        get { return result.hasBasePoint; }
      }
      public int BasePoint {
        get { return result.BasePoint; }
        set { SetBasePoint(value); }
      }
      public Builder SetBasePoint(int value) {
        PrepareBuilder();
        result.hasBasePoint = true;
        result.basePoint_ = value;
        return this;
      }
      public Builder ClearBasePoint() {
        PrepareBuilder();
        result.hasBasePoint = false;
        result.basePoint_ = 0;
        return this;
      }
      
      public bool HasNextStartTimeoutSecs {
        get { return result.hasNextStartTimeoutSecs; }
      }
      public int NextStartTimeoutSecs {
        get { return result.NextStartTimeoutSecs; }
        set { SetNextStartTimeoutSecs(value); }
      }
      public Builder SetNextStartTimeoutSecs(int value) {
        PrepareBuilder();
        result.hasNextStartTimeoutSecs = true;
        result.nextStartTimeoutSecs_ = value;
        return this;
      }
      public Builder ClearNextStartTimeoutSecs() {
        PrepareBuilder();
        result.hasNextStartTimeoutSecs = false;
        result.nextStartTimeoutSecs_ = 0;
        return this;
      }
      
      public bool HasSeatUser1 {
       get { return result.hasSeatUser1; }
      }
      public global::gt_msg.TableUserResultxzdd SeatUser1 {
        get { return result.SeatUser1; }
        set { SetSeatUser1(value); }
      }
      public Builder SetSeatUser1(global::gt_msg.TableUserResultxzdd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSeatUser1 = true;
        result.seatUser1_ = value;
        return this;
      }
      public Builder SetSeatUser1(global::gt_msg.TableUserResultxzdd.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSeatUser1 = true;
        result.seatUser1_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSeatUser1(global::gt_msg.TableUserResultxzdd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSeatUser1 &&
            result.seatUser1_ != global::gt_msg.TableUserResultxzdd.DefaultInstance) {
            result.seatUser1_ = global::gt_msg.TableUserResultxzdd.CreateBuilder(result.seatUser1_).MergeFrom(value).BuildPartial();
        } else {
          result.seatUser1_ = value;
        }
        result.hasSeatUser1 = true;
        return this;
      }
      public Builder ClearSeatUser1() {
        PrepareBuilder();
        result.hasSeatUser1 = false;
        result.seatUser1_ = null;
        return this;
      }
      
      public bool HasSeatUser2 {
       get { return result.hasSeatUser2; }
      }
      public global::gt_msg.TableUserResultxzdd SeatUser2 {
        get { return result.SeatUser2; }
        set { SetSeatUser2(value); }
      }
      public Builder SetSeatUser2(global::gt_msg.TableUserResultxzdd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSeatUser2 = true;
        result.seatUser2_ = value;
        return this;
      }
      public Builder SetSeatUser2(global::gt_msg.TableUserResultxzdd.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSeatUser2 = true;
        result.seatUser2_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSeatUser2(global::gt_msg.TableUserResultxzdd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSeatUser2 &&
            result.seatUser2_ != global::gt_msg.TableUserResultxzdd.DefaultInstance) {
            result.seatUser2_ = global::gt_msg.TableUserResultxzdd.CreateBuilder(result.seatUser2_).MergeFrom(value).BuildPartial();
        } else {
          result.seatUser2_ = value;
        }
        result.hasSeatUser2 = true;
        return this;
      }
      public Builder ClearSeatUser2() {
        PrepareBuilder();
        result.hasSeatUser2 = false;
        result.seatUser2_ = null;
        return this;
      }
      
      public bool HasSeatUser3 {
       get { return result.hasSeatUser3; }
      }
      public global::gt_msg.TableUserResultxzdd SeatUser3 {
        get { return result.SeatUser3; }
        set { SetSeatUser3(value); }
      }
      public Builder SetSeatUser3(global::gt_msg.TableUserResultxzdd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSeatUser3 = true;
        result.seatUser3_ = value;
        return this;
      }
      public Builder SetSeatUser3(global::gt_msg.TableUserResultxzdd.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSeatUser3 = true;
        result.seatUser3_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSeatUser3(global::gt_msg.TableUserResultxzdd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSeatUser3 &&
            result.seatUser3_ != global::gt_msg.TableUserResultxzdd.DefaultInstance) {
            result.seatUser3_ = global::gt_msg.TableUserResultxzdd.CreateBuilder(result.seatUser3_).MergeFrom(value).BuildPartial();
        } else {
          result.seatUser3_ = value;
        }
        result.hasSeatUser3 = true;
        return this;
      }
      public Builder ClearSeatUser3() {
        PrepareBuilder();
        result.hasSeatUser3 = false;
        result.seatUser3_ = null;
        return this;
      }
      
      public bool HasSeatUser4 {
       get { return result.hasSeatUser4; }
      }
      public global::gt_msg.TableUserResultxzdd SeatUser4 {
        get { return result.SeatUser4; }
        set { SetSeatUser4(value); }
      }
      public Builder SetSeatUser4(global::gt_msg.TableUserResultxzdd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSeatUser4 = true;
        result.seatUser4_ = value;
        return this;
      }
      public Builder SetSeatUser4(global::gt_msg.TableUserResultxzdd.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSeatUser4 = true;
        result.seatUser4_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSeatUser4(global::gt_msg.TableUserResultxzdd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSeatUser4 &&
            result.seatUser4_ != global::gt_msg.TableUserResultxzdd.DefaultInstance) {
            result.seatUser4_ = global::gt_msg.TableUserResultxzdd.CreateBuilder(result.seatUser4_).MergeFrom(value).BuildPartial();
        } else {
          result.seatUser4_ = value;
        }
        result.hasSeatUser4 = true;
        return this;
      }
      public Builder ClearSeatUser4() {
        PrepareBuilder();
        result.hasSeatUser4 = false;
        result.seatUser4_ = null;
        return this;
      }
    }
    static RoundEndedEventxzdd() {
      object.ReferenceEquals(global::gt_msg.GtXzdd.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ForceExitTableRequestxzdd : pb::GeneratedMessage<ForceExitTableRequestxzdd, ForceExitTableRequestxzdd.Builder> {
    private ForceExitTableRequestxzdd() { }
    private static readonly ForceExitTableRequestxzdd defaultInstance = new ForceExitTableRequestxzdd().MakeReadOnly();
    private static readonly string[] _forceExitTableRequestxzddFieldNames = new string[] {  };
    private static readonly uint[] _forceExitTableRequestxzddFieldTags = new uint[] {  };
    public static ForceExitTableRequestxzdd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ForceExitTableRequestxzdd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ForceExitTableRequestxzdd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_ForceExitTableRequestxzdd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ForceExitTableRequestxzdd, ForceExitTableRequestxzdd.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_ForceExitTableRequestxzdd__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _forceExitTableRequestxzddFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ForceExitTableRequestxzdd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ForceExitTableRequestxzdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ForceExitTableRequestxzdd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ForceExitTableRequestxzdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ForceExitTableRequestxzdd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ForceExitTableRequestxzdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ForceExitTableRequestxzdd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ForceExitTableRequestxzdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ForceExitTableRequestxzdd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ForceExitTableRequestxzdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ForceExitTableRequestxzdd MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ForceExitTableRequestxzdd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ForceExitTableRequestxzdd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ForceExitTableRequestxzdd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ForceExitTableRequestxzdd result;
      
      private ForceExitTableRequestxzdd PrepareBuilder() {
        if (resultIsReadOnly) {
          ForceExitTableRequestxzdd original = result;
          result = new ForceExitTableRequestxzdd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ForceExitTableRequestxzdd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.ForceExitTableRequestxzdd.Descriptor; }
      }
      
      public override ForceExitTableRequestxzdd DefaultInstanceForType {
        get { return global::gt_msg.ForceExitTableRequestxzdd.DefaultInstance; }
      }
      
      public override ForceExitTableRequestxzdd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ForceExitTableRequestxzdd) {
          return MergeFrom((ForceExitTableRequestxzdd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ForceExitTableRequestxzdd other) {
        if (other == global::gt_msg.ForceExitTableRequestxzdd.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_forceExitTableRequestxzddFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _forceExitTableRequestxzddFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static ForceExitTableRequestxzdd() {
      object.ReferenceEquals(global::gt_msg.GtXzdd.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ForceExitTableResponsexzdd : pb::GeneratedMessage<ForceExitTableResponsexzdd, ForceExitTableResponsexzdd.Builder> {
    private ForceExitTableResponsexzdd() { }
    private static readonly ForceExitTableResponsexzdd defaultInstance = new ForceExitTableResponsexzdd().MakeReadOnly();
    private static readonly string[] _forceExitTableResponsexzddFieldNames = new string[] { "code" };
    private static readonly uint[] _forceExitTableResponsexzddFieldTags = new uint[] { 8 };
    public static ForceExitTableResponsexzdd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ForceExitTableResponsexzdd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ForceExitTableResponsexzdd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_ForceExitTableResponsexzdd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ForceExitTableResponsexzdd, ForceExitTableResponsexzdd.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_ForceExitTableResponsexzdd__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Code {
        Normal = 0,
        GiveUp = 1,
        NoEnoughMoney = 2,
        ChangeTable = 3,
        PlayingNoExit = 4,
        TableRelease = 5,
      }
      
    }
    #endregion
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private global::gt_msg.ForceExitTableResponsexzdd.Types.Code code_ = global::gt_msg.ForceExitTableResponsexzdd.Types.Code.Normal;
    public bool HasCode {
      get { return hasCode; }
    }
    public global::gt_msg.ForceExitTableResponsexzdd.Types.Code Code {
      get { return code_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _forceExitTableResponsexzddFieldNames;
      if (hasCode) {
        output.WriteEnum(1, field_names[0], (int) Code, Code);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCode) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Code);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ForceExitTableResponsexzdd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ForceExitTableResponsexzdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ForceExitTableResponsexzdd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ForceExitTableResponsexzdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ForceExitTableResponsexzdd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ForceExitTableResponsexzdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ForceExitTableResponsexzdd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ForceExitTableResponsexzdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ForceExitTableResponsexzdd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ForceExitTableResponsexzdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ForceExitTableResponsexzdd MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ForceExitTableResponsexzdd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ForceExitTableResponsexzdd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ForceExitTableResponsexzdd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ForceExitTableResponsexzdd result;
      
      private ForceExitTableResponsexzdd PrepareBuilder() {
        if (resultIsReadOnly) {
          ForceExitTableResponsexzdd original = result;
          result = new ForceExitTableResponsexzdd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ForceExitTableResponsexzdd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.ForceExitTableResponsexzdd.Descriptor; }
      }
      
      public override ForceExitTableResponsexzdd DefaultInstanceForType {
        get { return global::gt_msg.ForceExitTableResponsexzdd.DefaultInstance; }
      }
      
      public override ForceExitTableResponsexzdd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ForceExitTableResponsexzdd) {
          return MergeFrom((ForceExitTableResponsexzdd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ForceExitTableResponsexzdd other) {
        if (other == global::gt_msg.ForceExitTableResponsexzdd.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_forceExitTableResponsexzddFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _forceExitTableResponsexzddFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.code_, out unknown)) {
                result.hasCode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
       get { return result.hasCode; }
      }
      public global::gt_msg.ForceExitTableResponsexzdd.Types.Code Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(global::gt_msg.ForceExitTableResponsexzdd.Types.Code value) {
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = global::gt_msg.ForceExitTableResponsexzdd.Types.Code.Normal;
        return this;
      }
    }
    static ForceExitTableResponsexzdd() {
      object.ReferenceEquals(global::gt_msg.GtXzdd.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GameLifeRequestxzdd : pb::GeneratedMessage<GameLifeRequestxzdd, GameLifeRequestxzdd.Builder> {
    private GameLifeRequestxzdd() { }
    private static readonly GameLifeRequestxzdd defaultInstance = new GameLifeRequestxzdd().MakeReadOnly();
    private static readonly string[] _gameLifeRequestxzddFieldNames = new string[] { "uid" };
    private static readonly uint[] _gameLifeRequestxzddFieldTags = new uint[] { 10 };
    public static GameLifeRequestxzdd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameLifeRequestxzdd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameLifeRequestxzdd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_GameLifeRequestxzdd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameLifeRequestxzdd, GameLifeRequestxzdd.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_GameLifeRequestxzdd__FieldAccessorTable; }
    }
    
    public const int UidFieldNumber = 1;
    private bool hasUid;
    private string uid_ = "";
    public bool HasUid {
      get { return hasUid; }
    }
    public string Uid {
      get { return uid_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUid) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _gameLifeRequestxzddFieldNames;
      if (hasUid) {
        output.WriteString(1, field_names[0], Uid);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUid) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Uid);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GameLifeRequestxzdd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameLifeRequestxzdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameLifeRequestxzdd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameLifeRequestxzdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameLifeRequestxzdd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameLifeRequestxzdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameLifeRequestxzdd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameLifeRequestxzdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameLifeRequestxzdd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameLifeRequestxzdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameLifeRequestxzdd MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameLifeRequestxzdd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GameLifeRequestxzdd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameLifeRequestxzdd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameLifeRequestxzdd result;
      
      private GameLifeRequestxzdd PrepareBuilder() {
        if (resultIsReadOnly) {
          GameLifeRequestxzdd original = result;
          result = new GameLifeRequestxzdd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameLifeRequestxzdd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.GameLifeRequestxzdd.Descriptor; }
      }
      
      public override GameLifeRequestxzdd DefaultInstanceForType {
        get { return global::gt_msg.GameLifeRequestxzdd.DefaultInstance; }
      }
      
      public override GameLifeRequestxzdd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameLifeRequestxzdd) {
          return MergeFrom((GameLifeRequestxzdd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameLifeRequestxzdd other) {
        if (other == global::gt_msg.GameLifeRequestxzdd.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUid) {
          Uid = other.Uid;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameLifeRequestxzddFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameLifeRequestxzddFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUid = input.ReadString(ref result.uid_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUid {
        get { return result.hasUid; }
      }
      public string Uid {
        get { return result.Uid; }
        set { SetUid(value); }
      }
      public Builder SetUid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUid = true;
        result.uid_ = value;
        return this;
      }
      public Builder ClearUid() {
        PrepareBuilder();
        result.hasUid = false;
        result.uid_ = "";
        return this;
      }
    }
    static GameLifeRequestxzdd() {
      object.ReferenceEquals(global::gt_msg.GtXzdd.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GameLifeResponsexzdd : pb::GeneratedMessage<GameLifeResponsexzdd, GameLifeResponsexzdd.Builder> {
    private GameLifeResponsexzdd() { }
    private static readonly GameLifeResponsexzdd defaultInstance = new GameLifeResponsexzdd().MakeReadOnly();
    private static readonly string[] _gameLifeResponsexzddFieldNames = new string[] { "code", "continueWin", "gameAllUserNum", "level1WinChips", "level1WinChipsRank", "level2WinChips", "level2WinChipsRank", "level3WinChips", "level3WinChipsRank", "level4WinChips", "level4WinChipsRank", "level5WinChips", "level5WinChipsRank", "lostTimes", "user_info", "winTimes" };
    private static readonly uint[] _gameLifeResponsexzddFieldTags = new uint[] { 8, 40, 128, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 32, 18, 24 };
    public static GameLifeResponsexzdd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameLifeResponsexzdd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameLifeResponsexzdd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_GameLifeResponsexzdd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameLifeResponsexzdd, GameLifeResponsexzdd.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_GameLifeResponsexzdd__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Code {
        Ok = 0,
        Failed = 1,
      }
      
    }
    #endregion
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private global::gt_msg.GameLifeResponsexzdd.Types.Code code_ = global::gt_msg.GameLifeResponsexzdd.Types.Code.Ok;
    public bool HasCode {
      get { return hasCode; }
    }
    public global::gt_msg.GameLifeResponsexzdd.Types.Code Code {
      get { return code_; }
    }
    
    public const int UserInfoFieldNumber = 2;
    private bool hasUserInfo;
    private global::gt_msg.User userInfo_;
    public bool HasUserInfo {
      get { return hasUserInfo; }
    }
    public global::gt_msg.User UserInfo {
      get { return userInfo_ ?? global::gt_msg.User.DefaultInstance; }
    }
    
    public const int WinTimesFieldNumber = 3;
    private bool hasWinTimes;
    private int winTimes_;
    public bool HasWinTimes {
      get { return hasWinTimes; }
    }
    public int WinTimes {
      get { return winTimes_; }
    }
    
    public const int LostTimesFieldNumber = 4;
    private bool hasLostTimes;
    private int lostTimes_;
    public bool HasLostTimes {
      get { return hasLostTimes; }
    }
    public int LostTimes {
      get { return lostTimes_; }
    }
    
    public const int ContinueWinFieldNumber = 5;
    private bool hasContinueWin;
    private int continueWin_;
    public bool HasContinueWin {
      get { return hasContinueWin; }
    }
    public int ContinueWin {
      get { return continueWin_; }
    }
    
    public const int Level1WinChipsFieldNumber = 6;
    private bool hasLevel1WinChips;
    private long level1WinChips_;
    public bool HasLevel1WinChips {
      get { return hasLevel1WinChips; }
    }
    public long Level1WinChips {
      get { return level1WinChips_; }
    }
    
    public const int Level1WinChipsRankFieldNumber = 7;
    private bool hasLevel1WinChipsRank;
    private int level1WinChipsRank_;
    public bool HasLevel1WinChipsRank {
      get { return hasLevel1WinChipsRank; }
    }
    public int Level1WinChipsRank {
      get { return level1WinChipsRank_; }
    }
    
    public const int Level2WinChipsFieldNumber = 8;
    private bool hasLevel2WinChips;
    private long level2WinChips_;
    public bool HasLevel2WinChips {
      get { return hasLevel2WinChips; }
    }
    public long Level2WinChips {
      get { return level2WinChips_; }
    }
    
    public const int Level2WinChipsRankFieldNumber = 9;
    private bool hasLevel2WinChipsRank;
    private int level2WinChipsRank_;
    public bool HasLevel2WinChipsRank {
      get { return hasLevel2WinChipsRank; }
    }
    public int Level2WinChipsRank {
      get { return level2WinChipsRank_; }
    }
    
    public const int Level3WinChipsFieldNumber = 10;
    private bool hasLevel3WinChips;
    private long level3WinChips_;
    public bool HasLevel3WinChips {
      get { return hasLevel3WinChips; }
    }
    public long Level3WinChips {
      get { return level3WinChips_; }
    }
    
    public const int Level3WinChipsRankFieldNumber = 11;
    private bool hasLevel3WinChipsRank;
    private int level3WinChipsRank_;
    public bool HasLevel3WinChipsRank {
      get { return hasLevel3WinChipsRank; }
    }
    public int Level3WinChipsRank {
      get { return level3WinChipsRank_; }
    }
    
    public const int Level4WinChipsFieldNumber = 12;
    private bool hasLevel4WinChips;
    private long level4WinChips_;
    public bool HasLevel4WinChips {
      get { return hasLevel4WinChips; }
    }
    public long Level4WinChips {
      get { return level4WinChips_; }
    }
    
    public const int Level4WinChipsRankFieldNumber = 13;
    private bool hasLevel4WinChipsRank;
    private int level4WinChipsRank_;
    public bool HasLevel4WinChipsRank {
      get { return hasLevel4WinChipsRank; }
    }
    public int Level4WinChipsRank {
      get { return level4WinChipsRank_; }
    }
    
    public const int Level5WinChipsFieldNumber = 14;
    private bool hasLevel5WinChips;
    private long level5WinChips_;
    public bool HasLevel5WinChips {
      get { return hasLevel5WinChips; }
    }
    public long Level5WinChips {
      get { return level5WinChips_; }
    }
    
    public const int Level5WinChipsRankFieldNumber = 15;
    private bool hasLevel5WinChipsRank;
    private int level5WinChipsRank_;
    public bool HasLevel5WinChipsRank {
      get { return hasLevel5WinChipsRank; }
    }
    public int Level5WinChipsRank {
      get { return level5WinChipsRank_; }
    }
    
    public const int GameAllUserNumFieldNumber = 16;
    private bool hasGameAllUserNum;
    private int gameAllUserNum_;
    public bool HasGameAllUserNum {
      get { return hasGameAllUserNum; }
    }
    public int GameAllUserNum {
      get { return gameAllUserNum_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        if (!hasUserInfo) return false;
        if (!UserInfo.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _gameLifeResponsexzddFieldNames;
      if (hasCode) {
        output.WriteEnum(1, field_names[0], (int) Code, Code);
      }
      if (hasUserInfo) {
        output.WriteMessage(2, field_names[14], UserInfo);
      }
      if (hasWinTimes) {
        output.WriteInt32(3, field_names[15], WinTimes);
      }
      if (hasLostTimes) {
        output.WriteInt32(4, field_names[13], LostTimes);
      }
      if (hasContinueWin) {
        output.WriteInt32(5, field_names[1], ContinueWin);
      }
      if (hasLevel1WinChips) {
        output.WriteInt64(6, field_names[3], Level1WinChips);
      }
      if (hasLevel1WinChipsRank) {
        output.WriteInt32(7, field_names[4], Level1WinChipsRank);
      }
      if (hasLevel2WinChips) {
        output.WriteInt64(8, field_names[5], Level2WinChips);
      }
      if (hasLevel2WinChipsRank) {
        output.WriteInt32(9, field_names[6], Level2WinChipsRank);
      }
      if (hasLevel3WinChips) {
        output.WriteInt64(10, field_names[7], Level3WinChips);
      }
      if (hasLevel3WinChipsRank) {
        output.WriteInt32(11, field_names[8], Level3WinChipsRank);
      }
      if (hasLevel4WinChips) {
        output.WriteInt64(12, field_names[9], Level4WinChips);
      }
      if (hasLevel4WinChipsRank) {
        output.WriteInt32(13, field_names[10], Level4WinChipsRank);
      }
      if (hasLevel5WinChips) {
        output.WriteInt64(14, field_names[11], Level5WinChips);
      }
      if (hasLevel5WinChipsRank) {
        output.WriteInt32(15, field_names[12], Level5WinChipsRank);
      }
      if (hasGameAllUserNum) {
        output.WriteInt32(16, field_names[2], GameAllUserNum);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCode) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Code);
      }
      if (hasUserInfo) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, UserInfo);
      }
      if (hasWinTimes) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, WinTimes);
      }
      if (hasLostTimes) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, LostTimes);
      }
      if (hasContinueWin) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, ContinueWin);
      }
      if (hasLevel1WinChips) {
        size += pb::CodedOutputStream.ComputeInt64Size(6, Level1WinChips);
      }
      if (hasLevel1WinChipsRank) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, Level1WinChipsRank);
      }
      if (hasLevel2WinChips) {
        size += pb::CodedOutputStream.ComputeInt64Size(8, Level2WinChips);
      }
      if (hasLevel2WinChipsRank) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, Level2WinChipsRank);
      }
      if (hasLevel3WinChips) {
        size += pb::CodedOutputStream.ComputeInt64Size(10, Level3WinChips);
      }
      if (hasLevel3WinChipsRank) {
        size += pb::CodedOutputStream.ComputeInt32Size(11, Level3WinChipsRank);
      }
      if (hasLevel4WinChips) {
        size += pb::CodedOutputStream.ComputeInt64Size(12, Level4WinChips);
      }
      if (hasLevel4WinChipsRank) {
        size += pb::CodedOutputStream.ComputeInt32Size(13, Level4WinChipsRank);
      }
      if (hasLevel5WinChips) {
        size += pb::CodedOutputStream.ComputeInt64Size(14, Level5WinChips);
      }
      if (hasLevel5WinChipsRank) {
        size += pb::CodedOutputStream.ComputeInt32Size(15, Level5WinChipsRank);
      }
      if (hasGameAllUserNum) {
        size += pb::CodedOutputStream.ComputeInt32Size(16, GameAllUserNum);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GameLifeResponsexzdd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameLifeResponsexzdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameLifeResponsexzdd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameLifeResponsexzdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameLifeResponsexzdd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameLifeResponsexzdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameLifeResponsexzdd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameLifeResponsexzdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameLifeResponsexzdd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameLifeResponsexzdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameLifeResponsexzdd MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameLifeResponsexzdd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GameLifeResponsexzdd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameLifeResponsexzdd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameLifeResponsexzdd result;
      
      private GameLifeResponsexzdd PrepareBuilder() {
        if (resultIsReadOnly) {
          GameLifeResponsexzdd original = result;
          result = new GameLifeResponsexzdd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameLifeResponsexzdd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.GameLifeResponsexzdd.Descriptor; }
      }
      
      public override GameLifeResponsexzdd DefaultInstanceForType {
        get { return global::gt_msg.GameLifeResponsexzdd.DefaultInstance; }
      }
      
      public override GameLifeResponsexzdd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameLifeResponsexzdd) {
          return MergeFrom((GameLifeResponsexzdd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameLifeResponsexzdd other) {
        if (other == global::gt_msg.GameLifeResponsexzdd.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        if (other.HasUserInfo) {
          MergeUserInfo(other.UserInfo);
        }
        if (other.HasWinTimes) {
          WinTimes = other.WinTimes;
        }
        if (other.HasLostTimes) {
          LostTimes = other.LostTimes;
        }
        if (other.HasContinueWin) {
          ContinueWin = other.ContinueWin;
        }
        if (other.HasLevel1WinChips) {
          Level1WinChips = other.Level1WinChips;
        }
        if (other.HasLevel1WinChipsRank) {
          Level1WinChipsRank = other.Level1WinChipsRank;
        }
        if (other.HasLevel2WinChips) {
          Level2WinChips = other.Level2WinChips;
        }
        if (other.HasLevel2WinChipsRank) {
          Level2WinChipsRank = other.Level2WinChipsRank;
        }
        if (other.HasLevel3WinChips) {
          Level3WinChips = other.Level3WinChips;
        }
        if (other.HasLevel3WinChipsRank) {
          Level3WinChipsRank = other.Level3WinChipsRank;
        }
        if (other.HasLevel4WinChips) {
          Level4WinChips = other.Level4WinChips;
        }
        if (other.HasLevel4WinChipsRank) {
          Level4WinChipsRank = other.Level4WinChipsRank;
        }
        if (other.HasLevel5WinChips) {
          Level5WinChips = other.Level5WinChips;
        }
        if (other.HasLevel5WinChipsRank) {
          Level5WinChipsRank = other.Level5WinChipsRank;
        }
        if (other.HasGameAllUserNum) {
          GameAllUserNum = other.GameAllUserNum;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameLifeResponsexzddFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameLifeResponsexzddFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.code_, out unknown)) {
                result.hasCode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              global::gt_msg.User.Builder subBuilder = global::gt_msg.User.CreateBuilder();
              if (result.hasUserInfo) {
                subBuilder.MergeFrom(UserInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserInfo = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasWinTimes = input.ReadInt32(ref result.winTimes_);
              break;
            }
            case 32: {
              result.hasLostTimes = input.ReadInt32(ref result.lostTimes_);
              break;
            }
            case 40: {
              result.hasContinueWin = input.ReadInt32(ref result.continueWin_);
              break;
            }
            case 48: {
              result.hasLevel1WinChips = input.ReadInt64(ref result.level1WinChips_);
              break;
            }
            case 56: {
              result.hasLevel1WinChipsRank = input.ReadInt32(ref result.level1WinChipsRank_);
              break;
            }
            case 64: {
              result.hasLevel2WinChips = input.ReadInt64(ref result.level2WinChips_);
              break;
            }
            case 72: {
              result.hasLevel2WinChipsRank = input.ReadInt32(ref result.level2WinChipsRank_);
              break;
            }
            case 80: {
              result.hasLevel3WinChips = input.ReadInt64(ref result.level3WinChips_);
              break;
            }
            case 88: {
              result.hasLevel3WinChipsRank = input.ReadInt32(ref result.level3WinChipsRank_);
              break;
            }
            case 96: {
              result.hasLevel4WinChips = input.ReadInt64(ref result.level4WinChips_);
              break;
            }
            case 104: {
              result.hasLevel4WinChipsRank = input.ReadInt32(ref result.level4WinChipsRank_);
              break;
            }
            case 112: {
              result.hasLevel5WinChips = input.ReadInt64(ref result.level5WinChips_);
              break;
            }
            case 120: {
              result.hasLevel5WinChipsRank = input.ReadInt32(ref result.level5WinChipsRank_);
              break;
            }
            case 128: {
              result.hasGameAllUserNum = input.ReadInt32(ref result.gameAllUserNum_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
       get { return result.hasCode; }
      }
      public global::gt_msg.GameLifeResponsexzdd.Types.Code Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(global::gt_msg.GameLifeResponsexzdd.Types.Code value) {
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = global::gt_msg.GameLifeResponsexzdd.Types.Code.Ok;
        return this;
      }
      
      public bool HasUserInfo {
       get { return result.hasUserInfo; }
      }
      public global::gt_msg.User UserInfo {
        get { return result.UserInfo; }
        set { SetUserInfo(value); }
      }
      public Builder SetUserInfo(global::gt_msg.User value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserInfo = true;
        result.userInfo_ = value;
        return this;
      }
      public Builder SetUserInfo(global::gt_msg.User.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserInfo = true;
        result.userInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserInfo(global::gt_msg.User value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserInfo &&
            result.userInfo_ != global::gt_msg.User.DefaultInstance) {
            result.userInfo_ = global::gt_msg.User.CreateBuilder(result.userInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.userInfo_ = value;
        }
        result.hasUserInfo = true;
        return this;
      }
      public Builder ClearUserInfo() {
        PrepareBuilder();
        result.hasUserInfo = false;
        result.userInfo_ = null;
        return this;
      }
      
      public bool HasWinTimes {
        get { return result.hasWinTimes; }
      }
      public int WinTimes {
        get { return result.WinTimes; }
        set { SetWinTimes(value); }
      }
      public Builder SetWinTimes(int value) {
        PrepareBuilder();
        result.hasWinTimes = true;
        result.winTimes_ = value;
        return this;
      }
      public Builder ClearWinTimes() {
        PrepareBuilder();
        result.hasWinTimes = false;
        result.winTimes_ = 0;
        return this;
      }
      
      public bool HasLostTimes {
        get { return result.hasLostTimes; }
      }
      public int LostTimes {
        get { return result.LostTimes; }
        set { SetLostTimes(value); }
      }
      public Builder SetLostTimes(int value) {
        PrepareBuilder();
        result.hasLostTimes = true;
        result.lostTimes_ = value;
        return this;
      }
      public Builder ClearLostTimes() {
        PrepareBuilder();
        result.hasLostTimes = false;
        result.lostTimes_ = 0;
        return this;
      }
      
      public bool HasContinueWin {
        get { return result.hasContinueWin; }
      }
      public int ContinueWin {
        get { return result.ContinueWin; }
        set { SetContinueWin(value); }
      }
      public Builder SetContinueWin(int value) {
        PrepareBuilder();
        result.hasContinueWin = true;
        result.continueWin_ = value;
        return this;
      }
      public Builder ClearContinueWin() {
        PrepareBuilder();
        result.hasContinueWin = false;
        result.continueWin_ = 0;
        return this;
      }
      
      public bool HasLevel1WinChips {
        get { return result.hasLevel1WinChips; }
      }
      public long Level1WinChips {
        get { return result.Level1WinChips; }
        set { SetLevel1WinChips(value); }
      }
      public Builder SetLevel1WinChips(long value) {
        PrepareBuilder();
        result.hasLevel1WinChips = true;
        result.level1WinChips_ = value;
        return this;
      }
      public Builder ClearLevel1WinChips() {
        PrepareBuilder();
        result.hasLevel1WinChips = false;
        result.level1WinChips_ = 0L;
        return this;
      }
      
      public bool HasLevel1WinChipsRank {
        get { return result.hasLevel1WinChipsRank; }
      }
      public int Level1WinChipsRank {
        get { return result.Level1WinChipsRank; }
        set { SetLevel1WinChipsRank(value); }
      }
      public Builder SetLevel1WinChipsRank(int value) {
        PrepareBuilder();
        result.hasLevel1WinChipsRank = true;
        result.level1WinChipsRank_ = value;
        return this;
      }
      public Builder ClearLevel1WinChipsRank() {
        PrepareBuilder();
        result.hasLevel1WinChipsRank = false;
        result.level1WinChipsRank_ = 0;
        return this;
      }
      
      public bool HasLevel2WinChips {
        get { return result.hasLevel2WinChips; }
      }
      public long Level2WinChips {
        get { return result.Level2WinChips; }
        set { SetLevel2WinChips(value); }
      }
      public Builder SetLevel2WinChips(long value) {
        PrepareBuilder();
        result.hasLevel2WinChips = true;
        result.level2WinChips_ = value;
        return this;
      }
      public Builder ClearLevel2WinChips() {
        PrepareBuilder();
        result.hasLevel2WinChips = false;
        result.level2WinChips_ = 0L;
        return this;
      }
      
      public bool HasLevel2WinChipsRank {
        get { return result.hasLevel2WinChipsRank; }
      }
      public int Level2WinChipsRank {
        get { return result.Level2WinChipsRank; }
        set { SetLevel2WinChipsRank(value); }
      }
      public Builder SetLevel2WinChipsRank(int value) {
        PrepareBuilder();
        result.hasLevel2WinChipsRank = true;
        result.level2WinChipsRank_ = value;
        return this;
      }
      public Builder ClearLevel2WinChipsRank() {
        PrepareBuilder();
        result.hasLevel2WinChipsRank = false;
        result.level2WinChipsRank_ = 0;
        return this;
      }
      
      public bool HasLevel3WinChips {
        get { return result.hasLevel3WinChips; }
      }
      public long Level3WinChips {
        get { return result.Level3WinChips; }
        set { SetLevel3WinChips(value); }
      }
      public Builder SetLevel3WinChips(long value) {
        PrepareBuilder();
        result.hasLevel3WinChips = true;
        result.level3WinChips_ = value;
        return this;
      }
      public Builder ClearLevel3WinChips() {
        PrepareBuilder();
        result.hasLevel3WinChips = false;
        result.level3WinChips_ = 0L;
        return this;
      }
      
      public bool HasLevel3WinChipsRank {
        get { return result.hasLevel3WinChipsRank; }
      }
      public int Level3WinChipsRank {
        get { return result.Level3WinChipsRank; }
        set { SetLevel3WinChipsRank(value); }
      }
      public Builder SetLevel3WinChipsRank(int value) {
        PrepareBuilder();
        result.hasLevel3WinChipsRank = true;
        result.level3WinChipsRank_ = value;
        return this;
      }
      public Builder ClearLevel3WinChipsRank() {
        PrepareBuilder();
        result.hasLevel3WinChipsRank = false;
        result.level3WinChipsRank_ = 0;
        return this;
      }
      
      public bool HasLevel4WinChips {
        get { return result.hasLevel4WinChips; }
      }
      public long Level4WinChips {
        get { return result.Level4WinChips; }
        set { SetLevel4WinChips(value); }
      }
      public Builder SetLevel4WinChips(long value) {
        PrepareBuilder();
        result.hasLevel4WinChips = true;
        result.level4WinChips_ = value;
        return this;
      }
      public Builder ClearLevel4WinChips() {
        PrepareBuilder();
        result.hasLevel4WinChips = false;
        result.level4WinChips_ = 0L;
        return this;
      }
      
      public bool HasLevel4WinChipsRank {
        get { return result.hasLevel4WinChipsRank; }
      }
      public int Level4WinChipsRank {
        get { return result.Level4WinChipsRank; }
        set { SetLevel4WinChipsRank(value); }
      }
      public Builder SetLevel4WinChipsRank(int value) {
        PrepareBuilder();
        result.hasLevel4WinChipsRank = true;
        result.level4WinChipsRank_ = value;
        return this;
      }
      public Builder ClearLevel4WinChipsRank() {
        PrepareBuilder();
        result.hasLevel4WinChipsRank = false;
        result.level4WinChipsRank_ = 0;
        return this;
      }
      
      public bool HasLevel5WinChips {
        get { return result.hasLevel5WinChips; }
      }
      public long Level5WinChips {
        get { return result.Level5WinChips; }
        set { SetLevel5WinChips(value); }
      }
      public Builder SetLevel5WinChips(long value) {
        PrepareBuilder();
        result.hasLevel5WinChips = true;
        result.level5WinChips_ = value;
        return this;
      }
      public Builder ClearLevel5WinChips() {
        PrepareBuilder();
        result.hasLevel5WinChips = false;
        result.level5WinChips_ = 0L;
        return this;
      }
      
      public bool HasLevel5WinChipsRank {
        get { return result.hasLevel5WinChipsRank; }
      }
      public int Level5WinChipsRank {
        get { return result.Level5WinChipsRank; }
        set { SetLevel5WinChipsRank(value); }
      }
      public Builder SetLevel5WinChipsRank(int value) {
        PrepareBuilder();
        result.hasLevel5WinChipsRank = true;
        result.level5WinChipsRank_ = value;
        return this;
      }
      public Builder ClearLevel5WinChipsRank() {
        PrepareBuilder();
        result.hasLevel5WinChipsRank = false;
        result.level5WinChipsRank_ = 0;
        return this;
      }
      
      public bool HasGameAllUserNum {
        get { return result.hasGameAllUserNum; }
      }
      public int GameAllUserNum {
        get { return result.GameAllUserNum; }
        set { SetGameAllUserNum(value); }
      }
      public Builder SetGameAllUserNum(int value) {
        PrepareBuilder();
        result.hasGameAllUserNum = true;
        result.gameAllUserNum_ = value;
        return this;
      }
      public Builder ClearGameAllUserNum() {
        PrepareBuilder();
        result.hasGameAllUserNum = false;
        result.gameAllUserNum_ = 0;
        return this;
      }
    }
    static GameLifeResponsexzdd() {
      object.ReferenceEquals(global::gt_msg.GtXzdd.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GameRankListRequestxzdd : pb::GeneratedMessage<GameRankListRequestxzdd, GameRankListRequestxzdd.Builder> {
    private GameRankListRequestxzdd() { }
    private static readonly GameRankListRequestxzdd defaultInstance = new GameRankListRequestxzdd().MakeReadOnly();
    private static readonly string[] _gameRankListRequestxzddFieldNames = new string[] {  };
    private static readonly uint[] _gameRankListRequestxzddFieldTags = new uint[] {  };
    public static GameRankListRequestxzdd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameRankListRequestxzdd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameRankListRequestxzdd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_GameRankListRequestxzdd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameRankListRequestxzdd, GameRankListRequestxzdd.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_GameRankListRequestxzdd__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _gameRankListRequestxzddFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GameRankListRequestxzdd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameRankListRequestxzdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameRankListRequestxzdd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameRankListRequestxzdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameRankListRequestxzdd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameRankListRequestxzdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameRankListRequestxzdd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameRankListRequestxzdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameRankListRequestxzdd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameRankListRequestxzdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameRankListRequestxzdd MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameRankListRequestxzdd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GameRankListRequestxzdd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameRankListRequestxzdd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameRankListRequestxzdd result;
      
      private GameRankListRequestxzdd PrepareBuilder() {
        if (resultIsReadOnly) {
          GameRankListRequestxzdd original = result;
          result = new GameRankListRequestxzdd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameRankListRequestxzdd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.GameRankListRequestxzdd.Descriptor; }
      }
      
      public override GameRankListRequestxzdd DefaultInstanceForType {
        get { return global::gt_msg.GameRankListRequestxzdd.DefaultInstance; }
      }
      
      public override GameRankListRequestxzdd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameRankListRequestxzdd) {
          return MergeFrom((GameRankListRequestxzdd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameRankListRequestxzdd other) {
        if (other == global::gt_msg.GameRankListRequestxzdd.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameRankListRequestxzddFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameRankListRequestxzddFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static GameRankListRequestxzdd() {
      object.ReferenceEquals(global::gt_msg.GtXzdd.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GameRankListResponsexzdd : pb::GeneratedMessage<GameRankListResponsexzdd, GameRankListResponsexzdd.Builder> {
    private GameRankListResponsexzdd() { }
    private static readonly GameRankListResponsexzdd defaultInstance = new GameRankListResponsexzdd().MakeReadOnly();
    private static readonly string[] _gameRankListResponsexzddFieldNames = new string[] { "all_chips", "all_times", "code", "day_win_chips", "uid" };
    private static readonly uint[] _gameRankListResponsexzddFieldTags = new uint[] { 42, 34, 8, 26, 18 };
    public static GameRankListResponsexzdd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameRankListResponsexzdd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameRankListResponsexzdd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_GameRankListResponsexzdd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameRankListResponsexzdd, GameRankListResponsexzdd.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_GameRankListResponsexzdd__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Code {
        Ok = 0,
        Failed = 1,
      }
      
    }
    #endregion
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private global::gt_msg.GameRankListResponsexzdd.Types.Code code_ = global::gt_msg.GameRankListResponsexzdd.Types.Code.Ok;
    public bool HasCode {
      get { return hasCode; }
    }
    public global::gt_msg.GameRankListResponsexzdd.Types.Code Code {
      get { return code_; }
    }
    
    public const int UidFieldNumber = 2;
    private bool hasUid;
    private string uid_ = "";
    public bool HasUid {
      get { return hasUid; }
    }
    public string Uid {
      get { return uid_; }
    }
    
    public const int DayWinChipsFieldNumber = 3;
    private pbc::PopsicleList<string> dayWinChips_ = new pbc::PopsicleList<string>();
    public scg::IList<string> DayWinChipsList {
      get { return pbc::Lists.AsReadOnly(dayWinChips_); }
    }
    public int DayWinChipsCount {
      get { return dayWinChips_.Count; }
    }
    public string GetDayWinChips(int index) {
      return dayWinChips_[index];
    }
    
    public const int AllTimesFieldNumber = 4;
    private pbc::PopsicleList<string> allTimes_ = new pbc::PopsicleList<string>();
    public scg::IList<string> AllTimesList {
      get { return pbc::Lists.AsReadOnly(allTimes_); }
    }
    public int AllTimesCount {
      get { return allTimes_.Count; }
    }
    public string GetAllTimes(int index) {
      return allTimes_[index];
    }
    
    public const int AllChipsFieldNumber = 5;
    private pbc::PopsicleList<string> allChips_ = new pbc::PopsicleList<string>();
    public scg::IList<string> AllChipsList {
      get { return pbc::Lists.AsReadOnly(allChips_); }
    }
    public int AllChipsCount {
      get { return allChips_.Count; }
    }
    public string GetAllChips(int index) {
      return allChips_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        if (!hasUid) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _gameRankListResponsexzddFieldNames;
      if (hasCode) {
        output.WriteEnum(1, field_names[2], (int) Code, Code);
      }
      if (hasUid) {
        output.WriteString(2, field_names[4], Uid);
      }
      if (dayWinChips_.Count > 0) {
        output.WriteStringArray(3, field_names[3], dayWinChips_);
      }
      if (allTimes_.Count > 0) {
        output.WriteStringArray(4, field_names[1], allTimes_);
      }
      if (allChips_.Count > 0) {
        output.WriteStringArray(5, field_names[0], allChips_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCode) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Code);
      }
      if (hasUid) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Uid);
      }
      {
        int dataSize = 0;
        foreach (string element in DayWinChipsList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * dayWinChips_.Count;
      }
      {
        int dataSize = 0;
        foreach (string element in AllTimesList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * allTimes_.Count;
      }
      {
        int dataSize = 0;
        foreach (string element in AllChipsList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * allChips_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GameRankListResponsexzdd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameRankListResponsexzdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameRankListResponsexzdd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameRankListResponsexzdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameRankListResponsexzdd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameRankListResponsexzdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameRankListResponsexzdd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameRankListResponsexzdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameRankListResponsexzdd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameRankListResponsexzdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameRankListResponsexzdd MakeReadOnly() {
      dayWinChips_.MakeReadOnly();
      allTimes_.MakeReadOnly();
      allChips_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameRankListResponsexzdd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GameRankListResponsexzdd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameRankListResponsexzdd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameRankListResponsexzdd result;
      
      private GameRankListResponsexzdd PrepareBuilder() {
        if (resultIsReadOnly) {
          GameRankListResponsexzdd original = result;
          result = new GameRankListResponsexzdd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameRankListResponsexzdd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.GameRankListResponsexzdd.Descriptor; }
      }
      
      public override GameRankListResponsexzdd DefaultInstanceForType {
        get { return global::gt_msg.GameRankListResponsexzdd.DefaultInstance; }
      }
      
      public override GameRankListResponsexzdd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameRankListResponsexzdd) {
          return MergeFrom((GameRankListResponsexzdd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameRankListResponsexzdd other) {
        if (other == global::gt_msg.GameRankListResponsexzdd.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        if (other.HasUid) {
          Uid = other.Uid;
        }
        if (other.dayWinChips_.Count != 0) {
          result.dayWinChips_.Add(other.dayWinChips_);
        }
        if (other.allTimes_.Count != 0) {
          result.allTimes_.Add(other.allTimes_);
        }
        if (other.allChips_.Count != 0) {
          result.allChips_.Add(other.allChips_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameRankListResponsexzddFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameRankListResponsexzddFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.code_, out unknown)) {
                result.hasCode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              result.hasUid = input.ReadString(ref result.uid_);
              break;
            }
            case 26: {
              input.ReadStringArray(tag, field_name, result.dayWinChips_);
              break;
            }
            case 34: {
              input.ReadStringArray(tag, field_name, result.allTimes_);
              break;
            }
            case 42: {
              input.ReadStringArray(tag, field_name, result.allChips_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
       get { return result.hasCode; }
      }
      public global::gt_msg.GameRankListResponsexzdd.Types.Code Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(global::gt_msg.GameRankListResponsexzdd.Types.Code value) {
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = global::gt_msg.GameRankListResponsexzdd.Types.Code.Ok;
        return this;
      }
      
      public bool HasUid {
        get { return result.hasUid; }
      }
      public string Uid {
        get { return result.Uid; }
        set { SetUid(value); }
      }
      public Builder SetUid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUid = true;
        result.uid_ = value;
        return this;
      }
      public Builder ClearUid() {
        PrepareBuilder();
        result.hasUid = false;
        result.uid_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<string> DayWinChipsList {
        get { return PrepareBuilder().dayWinChips_; }
      }
      public int DayWinChipsCount {
        get { return result.DayWinChipsCount; }
      }
      public string GetDayWinChips(int index) {
        return result.GetDayWinChips(index);
      }
      public Builder SetDayWinChips(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.dayWinChips_[index] = value;
        return this;
      }
      public Builder AddDayWinChips(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.dayWinChips_.Add(value);
        return this;
      }
      public Builder AddRangeDayWinChips(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.dayWinChips_.Add(values);
        return this;
      }
      public Builder ClearDayWinChips() {
        PrepareBuilder();
        result.dayWinChips_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> AllTimesList {
        get { return PrepareBuilder().allTimes_; }
      }
      public int AllTimesCount {
        get { return result.AllTimesCount; }
      }
      public string GetAllTimes(int index) {
        return result.GetAllTimes(index);
      }
      public Builder SetAllTimes(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.allTimes_[index] = value;
        return this;
      }
      public Builder AddAllTimes(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.allTimes_.Add(value);
        return this;
      }
      public Builder AddRangeAllTimes(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.allTimes_.Add(values);
        return this;
      }
      public Builder ClearAllTimes() {
        PrepareBuilder();
        result.allTimes_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> AllChipsList {
        get { return PrepareBuilder().allChips_; }
      }
      public int AllChipsCount {
        get { return result.AllChipsCount; }
      }
      public string GetAllChips(int index) {
        return result.GetAllChips(index);
      }
      public Builder SetAllChips(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.allChips_[index] = value;
        return this;
      }
      public Builder AddAllChips(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.allChips_.Add(value);
        return this;
      }
      public Builder AddRangeAllChips(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.allChips_.Add(values);
        return this;
      }
      public Builder ClearAllChips() {
        PrepareBuilder();
        result.allChips_.Clear();
        return this;
      }
    }
    static GameRankListResponsexzdd() {
      object.ReferenceEquals(global::gt_msg.GtXzdd.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GameReadyRequestxzdd : pb::GeneratedMessage<GameReadyRequestxzdd, GameReadyRequestxzdd.Builder> {
    private GameReadyRequestxzdd() { }
    private static readonly GameReadyRequestxzdd defaultInstance = new GameReadyRequestxzdd().MakeReadOnly();
    private static readonly string[] _gameReadyRequestxzddFieldNames = new string[] {  };
    private static readonly uint[] _gameReadyRequestxzddFieldTags = new uint[] {  };
    public static GameReadyRequestxzdd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameReadyRequestxzdd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameReadyRequestxzdd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_GameReadyRequestxzdd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameReadyRequestxzdd, GameReadyRequestxzdd.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_GameReadyRequestxzdd__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _gameReadyRequestxzddFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GameReadyRequestxzdd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameReadyRequestxzdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameReadyRequestxzdd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameReadyRequestxzdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameReadyRequestxzdd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameReadyRequestxzdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameReadyRequestxzdd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameReadyRequestxzdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameReadyRequestxzdd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameReadyRequestxzdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameReadyRequestxzdd MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameReadyRequestxzdd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GameReadyRequestxzdd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameReadyRequestxzdd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameReadyRequestxzdd result;
      
      private GameReadyRequestxzdd PrepareBuilder() {
        if (resultIsReadOnly) {
          GameReadyRequestxzdd original = result;
          result = new GameReadyRequestxzdd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameReadyRequestxzdd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.GameReadyRequestxzdd.Descriptor; }
      }
      
      public override GameReadyRequestxzdd DefaultInstanceForType {
        get { return global::gt_msg.GameReadyRequestxzdd.DefaultInstance; }
      }
      
      public override GameReadyRequestxzdd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameReadyRequestxzdd) {
          return MergeFrom((GameReadyRequestxzdd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameReadyRequestxzdd other) {
        if (other == global::gt_msg.GameReadyRequestxzdd.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameReadyRequestxzddFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameReadyRequestxzddFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static GameReadyRequestxzdd() {
      object.ReferenceEquals(global::gt_msg.GtXzdd.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GameReadyResponsexzdd : pb::GeneratedMessage<GameReadyResponsexzdd, GameReadyResponsexzdd.Builder> {
    private GameReadyResponsexzdd() { }
    private static readonly GameReadyResponsexzdd defaultInstance = new GameReadyResponsexzdd().MakeReadOnly();
    private static readonly string[] _gameReadyResponsexzddFieldNames = new string[] { "code", "playerReady" };
    private static readonly uint[] _gameReadyResponsexzddFieldTags = new uint[] { 8, 16 };
    public static GameReadyResponsexzdd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameReadyResponsexzdd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameReadyResponsexzdd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_GameReadyResponsexzdd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameReadyResponsexzdd, GameReadyResponsexzdd.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_GameReadyResponsexzdd__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Code {
        OK = 0,
        Failed = 1,
      }
      
    }
    #endregion
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private global::gt_msg.GameReadyResponsexzdd.Types.Code code_ = global::gt_msg.GameReadyResponsexzdd.Types.Code.OK;
    public bool HasCode {
      get { return hasCode; }
    }
    public global::gt_msg.GameReadyResponsexzdd.Types.Code Code {
      get { return code_; }
    }
    
    public const int PlayerReadyFieldNumber = 2;
    private pbc::PopsicleList<int> playerReady_ = new pbc::PopsicleList<int>();
    public scg::IList<int> PlayerReadyList {
      get { return pbc::Lists.AsReadOnly(playerReady_); }
    }
    public int PlayerReadyCount {
      get { return playerReady_.Count; }
    }
    public int GetPlayerReady(int index) {
      return playerReady_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _gameReadyResponsexzddFieldNames;
      if (hasCode) {
        output.WriteEnum(1, field_names[0], (int) Code, Code);
      }
      if (playerReady_.Count > 0) {
        output.WriteInt32Array(2, field_names[1], playerReady_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCode) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Code);
      }
      {
        int dataSize = 0;
        foreach (int element in PlayerReadyList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * playerReady_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GameReadyResponsexzdd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameReadyResponsexzdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameReadyResponsexzdd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameReadyResponsexzdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameReadyResponsexzdd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameReadyResponsexzdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameReadyResponsexzdd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameReadyResponsexzdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameReadyResponsexzdd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameReadyResponsexzdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameReadyResponsexzdd MakeReadOnly() {
      playerReady_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameReadyResponsexzdd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GameReadyResponsexzdd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameReadyResponsexzdd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameReadyResponsexzdd result;
      
      private GameReadyResponsexzdd PrepareBuilder() {
        if (resultIsReadOnly) {
          GameReadyResponsexzdd original = result;
          result = new GameReadyResponsexzdd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameReadyResponsexzdd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.GameReadyResponsexzdd.Descriptor; }
      }
      
      public override GameReadyResponsexzdd DefaultInstanceForType {
        get { return global::gt_msg.GameReadyResponsexzdd.DefaultInstance; }
      }
      
      public override GameReadyResponsexzdd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameReadyResponsexzdd) {
          return MergeFrom((GameReadyResponsexzdd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameReadyResponsexzdd other) {
        if (other == global::gt_msg.GameReadyResponsexzdd.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        if (other.playerReady_.Count != 0) {
          result.playerReady_.Add(other.playerReady_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameReadyResponsexzddFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameReadyResponsexzddFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.code_, out unknown)) {
                result.hasCode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18:
            case 16: {
              input.ReadInt32Array(tag, field_name, result.playerReady_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
       get { return result.hasCode; }
      }
      public global::gt_msg.GameReadyResponsexzdd.Types.Code Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(global::gt_msg.GameReadyResponsexzdd.Types.Code value) {
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = global::gt_msg.GameReadyResponsexzdd.Types.Code.OK;
        return this;
      }
      
      public pbc::IPopsicleList<int> PlayerReadyList {
        get { return PrepareBuilder().playerReady_; }
      }
      public int PlayerReadyCount {
        get { return result.PlayerReadyCount; }
      }
      public int GetPlayerReady(int index) {
        return result.GetPlayerReady(index);
      }
      public Builder SetPlayerReady(int index, int value) {
        PrepareBuilder();
        result.playerReady_[index] = value;
        return this;
      }
      public Builder AddPlayerReady(int value) {
        PrepareBuilder();
        result.playerReady_.Add(value);
        return this;
      }
      public Builder AddRangePlayerReady(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.playerReady_.Add(values);
        return this;
      }
      public Builder ClearPlayerReady() {
        PrepareBuilder();
        result.playerReady_.Clear();
        return this;
      }
    }
    static GameReadyResponsexzdd() {
      object.ReferenceEquals(global::gt_msg.GtXzdd.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TableRunTimeResult : pb::GeneratedMessage<TableRunTimeResult, TableRunTimeResult.Builder> {
    private TableRunTimeResult() { }
    private static readonly TableRunTimeResult defaultInstance = new TableRunTimeResult().MakeReadOnly();
    private static readonly string[] _tableRunTimeResultFieldNames = new string[] { "ItemType", "baoseat", "fromUid", "fromnum", "fromrate", "gangfollow", "gangpao", "gangrate", "gengrate", "qianggang", "resultType", "toNum", "toTax", "touid" };
    private static readonly uint[] _tableRunTimeResultFieldTags = new uint[] { 8, 112, 42, 48, 56, 88, 96, 72, 80, 104, 64, 24, 32, 18 };
    public static TableRunTimeResult DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TableRunTimeResult DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TableRunTimeResult ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_TableRunTimeResult__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TableRunTimeResult, TableRunTimeResult.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_TableRunTimeResult__FieldAccessorTable; }
    }
    
    public const int ItemTypeFieldNumber = 1;
    private bool hasItemType;
    private int itemType_;
    public bool HasItemType {
      get { return hasItemType; }
    }
    public int ItemType {
      get { return itemType_; }
    }
    
    public const int TouidFieldNumber = 2;
    private pbc::PopsicleList<string> touid_ = new pbc::PopsicleList<string>();
    public scg::IList<string> TouidList {
      get { return pbc::Lists.AsReadOnly(touid_); }
    }
    public int TouidCount {
      get { return touid_.Count; }
    }
    public string GetTouid(int index) {
      return touid_[index];
    }
    
    public const int ToNumFieldNumber = 3;
    private pbc::PopsicleList<long> toNum_ = new pbc::PopsicleList<long>();
    public scg::IList<long> ToNumList {
      get { return pbc::Lists.AsReadOnly(toNum_); }
    }
    public int ToNumCount {
      get { return toNum_.Count; }
    }
    public long GetToNum(int index) {
      return toNum_[index];
    }
    
    public const int ToTaxFieldNumber = 4;
    private pbc::PopsicleList<long> toTax_ = new pbc::PopsicleList<long>();
    public scg::IList<long> ToTaxList {
      get { return pbc::Lists.AsReadOnly(toTax_); }
    }
    public int ToTaxCount {
      get { return toTax_.Count; }
    }
    public long GetToTax(int index) {
      return toTax_[index];
    }
    
    public const int FromUidFieldNumber = 5;
    private pbc::PopsicleList<string> fromUid_ = new pbc::PopsicleList<string>();
    public scg::IList<string> FromUidList {
      get { return pbc::Lists.AsReadOnly(fromUid_); }
    }
    public int FromUidCount {
      get { return fromUid_.Count; }
    }
    public string GetFromUid(int index) {
      return fromUid_[index];
    }
    
    public const int FromnumFieldNumber = 6;
    private pbc::PopsicleList<long> fromnum_ = new pbc::PopsicleList<long>();
    public scg::IList<long> FromnumList {
      get { return pbc::Lists.AsReadOnly(fromnum_); }
    }
    public int FromnumCount {
      get { return fromnum_.Count; }
    }
    public long GetFromnum(int index) {
      return fromnum_[index];
    }
    
    public const int FromrateFieldNumber = 7;
    private pbc::PopsicleList<long> fromrate_ = new pbc::PopsicleList<long>();
    public scg::IList<long> FromrateList {
      get { return pbc::Lists.AsReadOnly(fromrate_); }
    }
    public int FromrateCount {
      get { return fromrate_.Count; }
    }
    public long GetFromrate(int index) {
      return fromrate_[index];
    }
    
    public const int ResultTypeFieldNumber = 8;
    private bool hasResultType;
    private int resultType_;
    public bool HasResultType {
      get { return hasResultType; }
    }
    public int ResultType {
      get { return resultType_; }
    }
    
    public const int GangrateFieldNumber = 9;
    private bool hasGangrate;
    private int gangrate_;
    public bool HasGangrate {
      get { return hasGangrate; }
    }
    public int Gangrate {
      get { return gangrate_; }
    }
    
    public const int GengrateFieldNumber = 10;
    private bool hasGengrate;
    private int gengrate_;
    public bool HasGengrate {
      get { return hasGengrate; }
    }
    public int Gengrate {
      get { return gengrate_; }
    }
    
    public const int GangfollowFieldNumber = 11;
    private bool hasGangfollow;
    private int gangfollow_;
    public bool HasGangfollow {
      get { return hasGangfollow; }
    }
    public int Gangfollow {
      get { return gangfollow_; }
    }
    
    public const int GangpaoFieldNumber = 12;
    private bool hasGangpao;
    private int gangpao_;
    public bool HasGangpao {
      get { return hasGangpao; }
    }
    public int Gangpao {
      get { return gangpao_; }
    }
    
    public const int QianggangFieldNumber = 13;
    private bool hasQianggang;
    private int qianggang_;
    public bool HasQianggang {
      get { return hasQianggang; }
    }
    public int Qianggang {
      get { return qianggang_; }
    }
    
    public const int BaoseatFieldNumber = 14;
    private bool hasBaoseat;
    private int baoseat_;
    public bool HasBaoseat {
      get { return hasBaoseat; }
    }
    public int Baoseat {
      get { return baoseat_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasItemType) return false;
        if (!hasResultType) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _tableRunTimeResultFieldNames;
      if (hasItemType) {
        output.WriteInt32(1, field_names[0], ItemType);
      }
      if (touid_.Count > 0) {
        output.WriteStringArray(2, field_names[13], touid_);
      }
      if (toNum_.Count > 0) {
        output.WriteInt64Array(3, field_names[11], toNum_);
      }
      if (toTax_.Count > 0) {
        output.WriteInt64Array(4, field_names[12], toTax_);
      }
      if (fromUid_.Count > 0) {
        output.WriteStringArray(5, field_names[2], fromUid_);
      }
      if (fromnum_.Count > 0) {
        output.WriteInt64Array(6, field_names[3], fromnum_);
      }
      if (fromrate_.Count > 0) {
        output.WriteInt64Array(7, field_names[4], fromrate_);
      }
      if (hasResultType) {
        output.WriteInt32(8, field_names[10], ResultType);
      }
      if (hasGangrate) {
        output.WriteInt32(9, field_names[7], Gangrate);
      }
      if (hasGengrate) {
        output.WriteInt32(10, field_names[8], Gengrate);
      }
      if (hasGangfollow) {
        output.WriteInt32(11, field_names[5], Gangfollow);
      }
      if (hasGangpao) {
        output.WriteInt32(12, field_names[6], Gangpao);
      }
      if (hasQianggang) {
        output.WriteInt32(13, field_names[9], Qianggang);
      }
      if (hasBaoseat) {
        output.WriteInt32(14, field_names[1], Baoseat);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasItemType) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, ItemType);
      }
      {
        int dataSize = 0;
        foreach (string element in TouidList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * touid_.Count;
      }
      {
        int dataSize = 0;
        foreach (long element in ToNumList) {
          dataSize += pb::CodedOutputStream.ComputeInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * toNum_.Count;
      }
      {
        int dataSize = 0;
        foreach (long element in ToTaxList) {
          dataSize += pb::CodedOutputStream.ComputeInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * toTax_.Count;
      }
      {
        int dataSize = 0;
        foreach (string element in FromUidList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * fromUid_.Count;
      }
      {
        int dataSize = 0;
        foreach (long element in FromnumList) {
          dataSize += pb::CodedOutputStream.ComputeInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * fromnum_.Count;
      }
      {
        int dataSize = 0;
        foreach (long element in FromrateList) {
          dataSize += pb::CodedOutputStream.ComputeInt64SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * fromrate_.Count;
      }
      if (hasResultType) {
        size += pb::CodedOutputStream.ComputeInt32Size(8, ResultType);
      }
      if (hasGangrate) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, Gangrate);
      }
      if (hasGengrate) {
        size += pb::CodedOutputStream.ComputeInt32Size(10, Gengrate);
      }
      if (hasGangfollow) {
        size += pb::CodedOutputStream.ComputeInt32Size(11, Gangfollow);
      }
      if (hasGangpao) {
        size += pb::CodedOutputStream.ComputeInt32Size(12, Gangpao);
      }
      if (hasQianggang) {
        size += pb::CodedOutputStream.ComputeInt32Size(13, Qianggang);
      }
      if (hasBaoseat) {
        size += pb::CodedOutputStream.ComputeInt32Size(14, Baoseat);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static TableRunTimeResult ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TableRunTimeResult ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TableRunTimeResult ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TableRunTimeResult ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TableRunTimeResult ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TableRunTimeResult ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TableRunTimeResult ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TableRunTimeResult ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TableRunTimeResult ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TableRunTimeResult ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TableRunTimeResult MakeReadOnly() {
      touid_.MakeReadOnly();
      toNum_.MakeReadOnly();
      toTax_.MakeReadOnly();
      fromUid_.MakeReadOnly();
      fromnum_.MakeReadOnly();
      fromrate_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TableRunTimeResult prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TableRunTimeResult, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TableRunTimeResult cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TableRunTimeResult result;
      
      private TableRunTimeResult PrepareBuilder() {
        if (resultIsReadOnly) {
          TableRunTimeResult original = result;
          result = new TableRunTimeResult();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TableRunTimeResult MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.TableRunTimeResult.Descriptor; }
      }
      
      public override TableRunTimeResult DefaultInstanceForType {
        get { return global::gt_msg.TableRunTimeResult.DefaultInstance; }
      }
      
      public override TableRunTimeResult BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TableRunTimeResult) {
          return MergeFrom((TableRunTimeResult) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TableRunTimeResult other) {
        if (other == global::gt_msg.TableRunTimeResult.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasItemType) {
          ItemType = other.ItemType;
        }
        if (other.touid_.Count != 0) {
          result.touid_.Add(other.touid_);
        }
        if (other.toNum_.Count != 0) {
          result.toNum_.Add(other.toNum_);
        }
        if (other.toTax_.Count != 0) {
          result.toTax_.Add(other.toTax_);
        }
        if (other.fromUid_.Count != 0) {
          result.fromUid_.Add(other.fromUid_);
        }
        if (other.fromnum_.Count != 0) {
          result.fromnum_.Add(other.fromnum_);
        }
        if (other.fromrate_.Count != 0) {
          result.fromrate_.Add(other.fromrate_);
        }
        if (other.HasResultType) {
          ResultType = other.ResultType;
        }
        if (other.HasGangrate) {
          Gangrate = other.Gangrate;
        }
        if (other.HasGengrate) {
          Gengrate = other.Gengrate;
        }
        if (other.HasGangfollow) {
          Gangfollow = other.Gangfollow;
        }
        if (other.HasGangpao) {
          Gangpao = other.Gangpao;
        }
        if (other.HasQianggang) {
          Qianggang = other.Qianggang;
        }
        if (other.HasBaoseat) {
          Baoseat = other.Baoseat;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tableRunTimeResultFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tableRunTimeResultFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasItemType = input.ReadInt32(ref result.itemType_);
              break;
            }
            case 18: {
              input.ReadStringArray(tag, field_name, result.touid_);
              break;
            }
            case 26:
            case 24: {
              input.ReadInt64Array(tag, field_name, result.toNum_);
              break;
            }
            case 34:
            case 32: {
              input.ReadInt64Array(tag, field_name, result.toTax_);
              break;
            }
            case 42: {
              input.ReadStringArray(tag, field_name, result.fromUid_);
              break;
            }
            case 50:
            case 48: {
              input.ReadInt64Array(tag, field_name, result.fromnum_);
              break;
            }
            case 58:
            case 56: {
              input.ReadInt64Array(tag, field_name, result.fromrate_);
              break;
            }
            case 64: {
              result.hasResultType = input.ReadInt32(ref result.resultType_);
              break;
            }
            case 72: {
              result.hasGangrate = input.ReadInt32(ref result.gangrate_);
              break;
            }
            case 80: {
              result.hasGengrate = input.ReadInt32(ref result.gengrate_);
              break;
            }
            case 88: {
              result.hasGangfollow = input.ReadInt32(ref result.gangfollow_);
              break;
            }
            case 96: {
              result.hasGangpao = input.ReadInt32(ref result.gangpao_);
              break;
            }
            case 104: {
              result.hasQianggang = input.ReadInt32(ref result.qianggang_);
              break;
            }
            case 112: {
              result.hasBaoseat = input.ReadInt32(ref result.baoseat_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasItemType {
        get { return result.hasItemType; }
      }
      public int ItemType {
        get { return result.ItemType; }
        set { SetItemType(value); }
      }
      public Builder SetItemType(int value) {
        PrepareBuilder();
        result.hasItemType = true;
        result.itemType_ = value;
        return this;
      }
      public Builder ClearItemType() {
        PrepareBuilder();
        result.hasItemType = false;
        result.itemType_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<string> TouidList {
        get { return PrepareBuilder().touid_; }
      }
      public int TouidCount {
        get { return result.TouidCount; }
      }
      public string GetTouid(int index) {
        return result.GetTouid(index);
      }
      public Builder SetTouid(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.touid_[index] = value;
        return this;
      }
      public Builder AddTouid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.touid_.Add(value);
        return this;
      }
      public Builder AddRangeTouid(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.touid_.Add(values);
        return this;
      }
      public Builder ClearTouid() {
        PrepareBuilder();
        result.touid_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<long> ToNumList {
        get { return PrepareBuilder().toNum_; }
      }
      public int ToNumCount {
        get { return result.ToNumCount; }
      }
      public long GetToNum(int index) {
        return result.GetToNum(index);
      }
      public Builder SetToNum(int index, long value) {
        PrepareBuilder();
        result.toNum_[index] = value;
        return this;
      }
      public Builder AddToNum(long value) {
        PrepareBuilder();
        result.toNum_.Add(value);
        return this;
      }
      public Builder AddRangeToNum(scg::IEnumerable<long> values) {
        PrepareBuilder();
        result.toNum_.Add(values);
        return this;
      }
      public Builder ClearToNum() {
        PrepareBuilder();
        result.toNum_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<long> ToTaxList {
        get { return PrepareBuilder().toTax_; }
      }
      public int ToTaxCount {
        get { return result.ToTaxCount; }
      }
      public long GetToTax(int index) {
        return result.GetToTax(index);
      }
      public Builder SetToTax(int index, long value) {
        PrepareBuilder();
        result.toTax_[index] = value;
        return this;
      }
      public Builder AddToTax(long value) {
        PrepareBuilder();
        result.toTax_.Add(value);
        return this;
      }
      public Builder AddRangeToTax(scg::IEnumerable<long> values) {
        PrepareBuilder();
        result.toTax_.Add(values);
        return this;
      }
      public Builder ClearToTax() {
        PrepareBuilder();
        result.toTax_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> FromUidList {
        get { return PrepareBuilder().fromUid_; }
      }
      public int FromUidCount {
        get { return result.FromUidCount; }
      }
      public string GetFromUid(int index) {
        return result.GetFromUid(index);
      }
      public Builder SetFromUid(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.fromUid_[index] = value;
        return this;
      }
      public Builder AddFromUid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.fromUid_.Add(value);
        return this;
      }
      public Builder AddRangeFromUid(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.fromUid_.Add(values);
        return this;
      }
      public Builder ClearFromUid() {
        PrepareBuilder();
        result.fromUid_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<long> FromnumList {
        get { return PrepareBuilder().fromnum_; }
      }
      public int FromnumCount {
        get { return result.FromnumCount; }
      }
      public long GetFromnum(int index) {
        return result.GetFromnum(index);
      }
      public Builder SetFromnum(int index, long value) {
        PrepareBuilder();
        result.fromnum_[index] = value;
        return this;
      }
      public Builder AddFromnum(long value) {
        PrepareBuilder();
        result.fromnum_.Add(value);
        return this;
      }
      public Builder AddRangeFromnum(scg::IEnumerable<long> values) {
        PrepareBuilder();
        result.fromnum_.Add(values);
        return this;
      }
      public Builder ClearFromnum() {
        PrepareBuilder();
        result.fromnum_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<long> FromrateList {
        get { return PrepareBuilder().fromrate_; }
      }
      public int FromrateCount {
        get { return result.FromrateCount; }
      }
      public long GetFromrate(int index) {
        return result.GetFromrate(index);
      }
      public Builder SetFromrate(int index, long value) {
        PrepareBuilder();
        result.fromrate_[index] = value;
        return this;
      }
      public Builder AddFromrate(long value) {
        PrepareBuilder();
        result.fromrate_.Add(value);
        return this;
      }
      public Builder AddRangeFromrate(scg::IEnumerable<long> values) {
        PrepareBuilder();
        result.fromrate_.Add(values);
        return this;
      }
      public Builder ClearFromrate() {
        PrepareBuilder();
        result.fromrate_.Clear();
        return this;
      }
      
      public bool HasResultType {
        get { return result.hasResultType; }
      }
      public int ResultType {
        get { return result.ResultType; }
        set { SetResultType(value); }
      }
      public Builder SetResultType(int value) {
        PrepareBuilder();
        result.hasResultType = true;
        result.resultType_ = value;
        return this;
      }
      public Builder ClearResultType() {
        PrepareBuilder();
        result.hasResultType = false;
        result.resultType_ = 0;
        return this;
      }
      
      public bool HasGangrate {
        get { return result.hasGangrate; }
      }
      public int Gangrate {
        get { return result.Gangrate; }
        set { SetGangrate(value); }
      }
      public Builder SetGangrate(int value) {
        PrepareBuilder();
        result.hasGangrate = true;
        result.gangrate_ = value;
        return this;
      }
      public Builder ClearGangrate() {
        PrepareBuilder();
        result.hasGangrate = false;
        result.gangrate_ = 0;
        return this;
      }
      
      public bool HasGengrate {
        get { return result.hasGengrate; }
      }
      public int Gengrate {
        get { return result.Gengrate; }
        set { SetGengrate(value); }
      }
      public Builder SetGengrate(int value) {
        PrepareBuilder();
        result.hasGengrate = true;
        result.gengrate_ = value;
        return this;
      }
      public Builder ClearGengrate() {
        PrepareBuilder();
        result.hasGengrate = false;
        result.gengrate_ = 0;
        return this;
      }
      
      public bool HasGangfollow {
        get { return result.hasGangfollow; }
      }
      public int Gangfollow {
        get { return result.Gangfollow; }
        set { SetGangfollow(value); }
      }
      public Builder SetGangfollow(int value) {
        PrepareBuilder();
        result.hasGangfollow = true;
        result.gangfollow_ = value;
        return this;
      }
      public Builder ClearGangfollow() {
        PrepareBuilder();
        result.hasGangfollow = false;
        result.gangfollow_ = 0;
        return this;
      }
      
      public bool HasGangpao {
        get { return result.hasGangpao; }
      }
      public int Gangpao {
        get { return result.Gangpao; }
        set { SetGangpao(value); }
      }
      public Builder SetGangpao(int value) {
        PrepareBuilder();
        result.hasGangpao = true;
        result.gangpao_ = value;
        return this;
      }
      public Builder ClearGangpao() {
        PrepareBuilder();
        result.hasGangpao = false;
        result.gangpao_ = 0;
        return this;
      }
      
      public bool HasQianggang {
        get { return result.hasQianggang; }
      }
      public int Qianggang {
        get { return result.Qianggang; }
        set { SetQianggang(value); }
      }
      public Builder SetQianggang(int value) {
        PrepareBuilder();
        result.hasQianggang = true;
        result.qianggang_ = value;
        return this;
      }
      public Builder ClearQianggang() {
        PrepareBuilder();
        result.hasQianggang = false;
        result.qianggang_ = 0;
        return this;
      }
      
      public bool HasBaoseat {
        get { return result.hasBaoseat; }
      }
      public int Baoseat {
        get { return result.Baoseat; }
        set { SetBaoseat(value); }
      }
      public Builder SetBaoseat(int value) {
        PrepareBuilder();
        result.hasBaoseat = true;
        result.baoseat_ = value;
        return this;
      }
      public Builder ClearBaoseat() {
        PrepareBuilder();
        result.hasBaoseat = false;
        result.baoseat_ = 0;
        return this;
      }
    }
    static TableRunTimeResult() {
      object.ReferenceEquals(global::gt_msg.GtXzdd.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GMInfoxzdd : pb::GeneratedMessage<GMInfoxzdd, GMInfoxzdd.Builder> {
    private GMInfoxzdd() { }
    private static readonly GMInfoxzdd defaultInstance = new GMInfoxzdd().MakeReadOnly();
    private static readonly string[] _gMInfoxzddFieldNames = new string[] { "HandCards1", "HandCards2", "HandCards3", "HandCards4" };
    private static readonly uint[] _gMInfoxzddFieldTags = new uint[] { 10, 18, 26, 34 };
    public static GMInfoxzdd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GMInfoxzdd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GMInfoxzdd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_GMInfoxzdd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GMInfoxzdd, GMInfoxzdd.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_GMInfoxzdd__FieldAccessorTable; }
    }
    
    public const int HandCards1FieldNumber = 1;
    private int handCards1MemoizedSerializedSize;
    private pbc::PopsicleList<int> handCards1_ = new pbc::PopsicleList<int>();
    public scg::IList<int> HandCards1List {
      get { return pbc::Lists.AsReadOnly(handCards1_); }
    }
    public int HandCards1Count {
      get { return handCards1_.Count; }
    }
    public int GetHandCards1(int index) {
      return handCards1_[index];
    }
    
    public const int HandCards2FieldNumber = 2;
    private int handCards2MemoizedSerializedSize;
    private pbc::PopsicleList<int> handCards2_ = new pbc::PopsicleList<int>();
    public scg::IList<int> HandCards2List {
      get { return pbc::Lists.AsReadOnly(handCards2_); }
    }
    public int HandCards2Count {
      get { return handCards2_.Count; }
    }
    public int GetHandCards2(int index) {
      return handCards2_[index];
    }
    
    public const int HandCards3FieldNumber = 3;
    private int handCards3MemoizedSerializedSize;
    private pbc::PopsicleList<int> handCards3_ = new pbc::PopsicleList<int>();
    public scg::IList<int> HandCards3List {
      get { return pbc::Lists.AsReadOnly(handCards3_); }
    }
    public int HandCards3Count {
      get { return handCards3_.Count; }
    }
    public int GetHandCards3(int index) {
      return handCards3_[index];
    }
    
    public const int HandCards4FieldNumber = 4;
    private int handCards4MemoizedSerializedSize;
    private pbc::PopsicleList<int> handCards4_ = new pbc::PopsicleList<int>();
    public scg::IList<int> HandCards4List {
      get { return pbc::Lists.AsReadOnly(handCards4_); }
    }
    public int HandCards4Count {
      get { return handCards4_.Count; }
    }
    public int GetHandCards4(int index) {
      return handCards4_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _gMInfoxzddFieldNames;
      if (handCards1_.Count > 0) {
        output.WritePackedInt32Array(1, field_names[0], handCards1MemoizedSerializedSize, handCards1_);
      }
      if (handCards2_.Count > 0) {
        output.WritePackedInt32Array(2, field_names[1], handCards2MemoizedSerializedSize, handCards2_);
      }
      if (handCards3_.Count > 0) {
        output.WritePackedInt32Array(3, field_names[2], handCards3MemoizedSerializedSize, handCards3_);
      }
      if (handCards4_.Count > 0) {
        output.WritePackedInt32Array(4, field_names[3], handCards4MemoizedSerializedSize, handCards4_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      {
        int dataSize = 0;
        foreach (int element in HandCards1List) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        if (handCards1_.Count != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
        }
        handCards1MemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        foreach (int element in HandCards2List) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        if (handCards2_.Count != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
        }
        handCards2MemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        foreach (int element in HandCards3List) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        if (handCards3_.Count != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
        }
        handCards3MemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        foreach (int element in HandCards4List) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        if (handCards4_.Count != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
        }
        handCards4MemoizedSerializedSize = dataSize;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GMInfoxzdd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GMInfoxzdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GMInfoxzdd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GMInfoxzdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GMInfoxzdd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GMInfoxzdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GMInfoxzdd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GMInfoxzdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GMInfoxzdd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GMInfoxzdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GMInfoxzdd MakeReadOnly() {
      handCards1_.MakeReadOnly();
      handCards2_.MakeReadOnly();
      handCards3_.MakeReadOnly();
      handCards4_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GMInfoxzdd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GMInfoxzdd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GMInfoxzdd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GMInfoxzdd result;
      
      private GMInfoxzdd PrepareBuilder() {
        if (resultIsReadOnly) {
          GMInfoxzdd original = result;
          result = new GMInfoxzdd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GMInfoxzdd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.GMInfoxzdd.Descriptor; }
      }
      
      public override GMInfoxzdd DefaultInstanceForType {
        get { return global::gt_msg.GMInfoxzdd.DefaultInstance; }
      }
      
      public override GMInfoxzdd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GMInfoxzdd) {
          return MergeFrom((GMInfoxzdd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GMInfoxzdd other) {
        if (other == global::gt_msg.GMInfoxzdd.DefaultInstance) return this;
        PrepareBuilder();
        if (other.handCards1_.Count != 0) {
          result.handCards1_.Add(other.handCards1_);
        }
        if (other.handCards2_.Count != 0) {
          result.handCards2_.Add(other.handCards2_);
        }
        if (other.handCards3_.Count != 0) {
          result.handCards3_.Add(other.handCards3_);
        }
        if (other.handCards4_.Count != 0) {
          result.handCards4_.Add(other.handCards4_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gMInfoxzddFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gMInfoxzddFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 8: {
              input.ReadInt32Array(tag, field_name, result.handCards1_);
              break;
            }
            case 18:
            case 16: {
              input.ReadInt32Array(tag, field_name, result.handCards2_);
              break;
            }
            case 26:
            case 24: {
              input.ReadInt32Array(tag, field_name, result.handCards3_);
              break;
            }
            case 34:
            case 32: {
              input.ReadInt32Array(tag, field_name, result.handCards4_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<int> HandCards1List {
        get { return PrepareBuilder().handCards1_; }
      }
      public int HandCards1Count {
        get { return result.HandCards1Count; }
      }
      public int GetHandCards1(int index) {
        return result.GetHandCards1(index);
      }
      public Builder SetHandCards1(int index, int value) {
        PrepareBuilder();
        result.handCards1_[index] = value;
        return this;
      }
      public Builder AddHandCards1(int value) {
        PrepareBuilder();
        result.handCards1_.Add(value);
        return this;
      }
      public Builder AddRangeHandCards1(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.handCards1_.Add(values);
        return this;
      }
      public Builder ClearHandCards1() {
        PrepareBuilder();
        result.handCards1_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> HandCards2List {
        get { return PrepareBuilder().handCards2_; }
      }
      public int HandCards2Count {
        get { return result.HandCards2Count; }
      }
      public int GetHandCards2(int index) {
        return result.GetHandCards2(index);
      }
      public Builder SetHandCards2(int index, int value) {
        PrepareBuilder();
        result.handCards2_[index] = value;
        return this;
      }
      public Builder AddHandCards2(int value) {
        PrepareBuilder();
        result.handCards2_.Add(value);
        return this;
      }
      public Builder AddRangeHandCards2(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.handCards2_.Add(values);
        return this;
      }
      public Builder ClearHandCards2() {
        PrepareBuilder();
        result.handCards2_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> HandCards3List {
        get { return PrepareBuilder().handCards3_; }
      }
      public int HandCards3Count {
        get { return result.HandCards3Count; }
      }
      public int GetHandCards3(int index) {
        return result.GetHandCards3(index);
      }
      public Builder SetHandCards3(int index, int value) {
        PrepareBuilder();
        result.handCards3_[index] = value;
        return this;
      }
      public Builder AddHandCards3(int value) {
        PrepareBuilder();
        result.handCards3_.Add(value);
        return this;
      }
      public Builder AddRangeHandCards3(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.handCards3_.Add(values);
        return this;
      }
      public Builder ClearHandCards3() {
        PrepareBuilder();
        result.handCards3_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> HandCards4List {
        get { return PrepareBuilder().handCards4_; }
      }
      public int HandCards4Count {
        get { return result.HandCards4Count; }
      }
      public int GetHandCards4(int index) {
        return result.GetHandCards4(index);
      }
      public Builder SetHandCards4(int index, int value) {
        PrepareBuilder();
        result.handCards4_[index] = value;
        return this;
      }
      public Builder AddHandCards4(int value) {
        PrepareBuilder();
        result.handCards4_.Add(value);
        return this;
      }
      public Builder AddRangeHandCards4(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.handCards4_.Add(values);
        return this;
      }
      public Builder ClearHandCards4() {
        PrepareBuilder();
        result.handCards4_.Clear();
        return this;
      }
    }
    static GMInfoxzdd() {
      object.ReferenceEquals(global::gt_msg.GtXzdd.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TablePlayStateRequestxzdd : pb::GeneratedMessage<TablePlayStateRequestxzdd, TablePlayStateRequestxzdd.Builder> {
    private TablePlayStateRequestxzdd() { }
    private static readonly TablePlayStateRequestxzdd defaultInstance = new TablePlayStateRequestxzdd().MakeReadOnly();
    private static readonly string[] _tablePlayStateRequestxzddFieldNames = new string[] {  };
    private static readonly uint[] _tablePlayStateRequestxzddFieldTags = new uint[] {  };
    public static TablePlayStateRequestxzdd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TablePlayStateRequestxzdd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TablePlayStateRequestxzdd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_TablePlayStateRequestxzdd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TablePlayStateRequestxzdd, TablePlayStateRequestxzdd.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_TablePlayStateRequestxzdd__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _tablePlayStateRequestxzddFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static TablePlayStateRequestxzdd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TablePlayStateRequestxzdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TablePlayStateRequestxzdd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TablePlayStateRequestxzdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TablePlayStateRequestxzdd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TablePlayStateRequestxzdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TablePlayStateRequestxzdd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TablePlayStateRequestxzdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TablePlayStateRequestxzdd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TablePlayStateRequestxzdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TablePlayStateRequestxzdd MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TablePlayStateRequestxzdd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TablePlayStateRequestxzdd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TablePlayStateRequestxzdd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TablePlayStateRequestxzdd result;
      
      private TablePlayStateRequestxzdd PrepareBuilder() {
        if (resultIsReadOnly) {
          TablePlayStateRequestxzdd original = result;
          result = new TablePlayStateRequestxzdd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TablePlayStateRequestxzdd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.TablePlayStateRequestxzdd.Descriptor; }
      }
      
      public override TablePlayStateRequestxzdd DefaultInstanceForType {
        get { return global::gt_msg.TablePlayStateRequestxzdd.DefaultInstance; }
      }
      
      public override TablePlayStateRequestxzdd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TablePlayStateRequestxzdd) {
          return MergeFrom((TablePlayStateRequestxzdd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TablePlayStateRequestxzdd other) {
        if (other == global::gt_msg.TablePlayStateRequestxzdd.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tablePlayStateRequestxzddFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tablePlayStateRequestxzddFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static TablePlayStateRequestxzdd() {
      object.ReferenceEquals(global::gt_msg.GtXzdd.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UserPlayStatexzdd : pb::GeneratedMessage<UserPlayStatexzdd, UserPlayStatexzdd.Builder> {
    private UserPlayStatexzdd() { }
    private static readonly UserPlayStatexzdd defaultInstance = new UserPlayStatexzdd().MakeReadOnly();
    private static readonly string[] _userPlayStatexzddFieldNames = new string[] { "lw", "nick", "times", "uid", "wintimes" };
    private static readonly uint[] _userPlayStatexzddFieldTags = new uint[] { 40, 18, 24, 10, 32 };
    public static UserPlayStatexzdd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override UserPlayStatexzdd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override UserPlayStatexzdd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_UserPlayStatexzdd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<UserPlayStatexzdd, UserPlayStatexzdd.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_UserPlayStatexzdd__FieldAccessorTable; }
    }
    
    public const int UidFieldNumber = 1;
    private bool hasUid;
    private string uid_ = "";
    public bool HasUid {
      get { return hasUid; }
    }
    public string Uid {
      get { return uid_; }
    }
    
    public const int NickFieldNumber = 2;
    private bool hasNick;
    private string nick_ = "";
    public bool HasNick {
      get { return hasNick; }
    }
    public string Nick {
      get { return nick_; }
    }
    
    public const int TimesFieldNumber = 3;
    private bool hasTimes;
    private int times_;
    public bool HasTimes {
      get { return hasTimes; }
    }
    public int Times {
      get { return times_; }
    }
    
    public const int WintimesFieldNumber = 4;
    private bool hasWintimes;
    private int wintimes_;
    public bool HasWintimes {
      get { return hasWintimes; }
    }
    public int Wintimes {
      get { return wintimes_; }
    }
    
    public const int LwFieldNumber = 5;
    private bool hasLw;
    private long lw_;
    public bool HasLw {
      get { return hasLw; }
    }
    public long Lw {
      get { return lw_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUid) return false;
        if (!hasNick) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _userPlayStatexzddFieldNames;
      if (hasUid) {
        output.WriteString(1, field_names[3], Uid);
      }
      if (hasNick) {
        output.WriteString(2, field_names[1], Nick);
      }
      if (hasTimes) {
        output.WriteInt32(3, field_names[2], Times);
      }
      if (hasWintimes) {
        output.WriteInt32(4, field_names[4], Wintimes);
      }
      if (hasLw) {
        output.WriteInt64(5, field_names[0], Lw);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUid) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Uid);
      }
      if (hasNick) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Nick);
      }
      if (hasTimes) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Times);
      }
      if (hasWintimes) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, Wintimes);
      }
      if (hasLw) {
        size += pb::CodedOutputStream.ComputeInt64Size(5, Lw);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static UserPlayStatexzdd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UserPlayStatexzdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UserPlayStatexzdd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static UserPlayStatexzdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static UserPlayStatexzdd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UserPlayStatexzdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static UserPlayStatexzdd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static UserPlayStatexzdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static UserPlayStatexzdd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static UserPlayStatexzdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private UserPlayStatexzdd MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(UserPlayStatexzdd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<UserPlayStatexzdd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(UserPlayStatexzdd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private UserPlayStatexzdd result;
      
      private UserPlayStatexzdd PrepareBuilder() {
        if (resultIsReadOnly) {
          UserPlayStatexzdd original = result;
          result = new UserPlayStatexzdd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override UserPlayStatexzdd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.UserPlayStatexzdd.Descriptor; }
      }
      
      public override UserPlayStatexzdd DefaultInstanceForType {
        get { return global::gt_msg.UserPlayStatexzdd.DefaultInstance; }
      }
      
      public override UserPlayStatexzdd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is UserPlayStatexzdd) {
          return MergeFrom((UserPlayStatexzdd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(UserPlayStatexzdd other) {
        if (other == global::gt_msg.UserPlayStatexzdd.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUid) {
          Uid = other.Uid;
        }
        if (other.HasNick) {
          Nick = other.Nick;
        }
        if (other.HasTimes) {
          Times = other.Times;
        }
        if (other.HasWintimes) {
          Wintimes = other.Wintimes;
        }
        if (other.HasLw) {
          Lw = other.Lw;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_userPlayStatexzddFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _userPlayStatexzddFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUid = input.ReadString(ref result.uid_);
              break;
            }
            case 18: {
              result.hasNick = input.ReadString(ref result.nick_);
              break;
            }
            case 24: {
              result.hasTimes = input.ReadInt32(ref result.times_);
              break;
            }
            case 32: {
              result.hasWintimes = input.ReadInt32(ref result.wintimes_);
              break;
            }
            case 40: {
              result.hasLw = input.ReadInt64(ref result.lw_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUid {
        get { return result.hasUid; }
      }
      public string Uid {
        get { return result.Uid; }
        set { SetUid(value); }
      }
      public Builder SetUid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUid = true;
        result.uid_ = value;
        return this;
      }
      public Builder ClearUid() {
        PrepareBuilder();
        result.hasUid = false;
        result.uid_ = "";
        return this;
      }
      
      public bool HasNick {
        get { return result.hasNick; }
      }
      public string Nick {
        get { return result.Nick; }
        set { SetNick(value); }
      }
      public Builder SetNick(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasNick = true;
        result.nick_ = value;
        return this;
      }
      public Builder ClearNick() {
        PrepareBuilder();
        result.hasNick = false;
        result.nick_ = "";
        return this;
      }
      
      public bool HasTimes {
        get { return result.hasTimes; }
      }
      public int Times {
        get { return result.Times; }
        set { SetTimes(value); }
      }
      public Builder SetTimes(int value) {
        PrepareBuilder();
        result.hasTimes = true;
        result.times_ = value;
        return this;
      }
      public Builder ClearTimes() {
        PrepareBuilder();
        result.hasTimes = false;
        result.times_ = 0;
        return this;
      }
      
      public bool HasWintimes {
        get { return result.hasWintimes; }
      }
      public int Wintimes {
        get { return result.Wintimes; }
        set { SetWintimes(value); }
      }
      public Builder SetWintimes(int value) {
        PrepareBuilder();
        result.hasWintimes = true;
        result.wintimes_ = value;
        return this;
      }
      public Builder ClearWintimes() {
        PrepareBuilder();
        result.hasWintimes = false;
        result.wintimes_ = 0;
        return this;
      }
      
      public bool HasLw {
        get { return result.hasLw; }
      }
      public long Lw {
        get { return result.Lw; }
        set { SetLw(value); }
      }
      public Builder SetLw(long value) {
        PrepareBuilder();
        result.hasLw = true;
        result.lw_ = value;
        return this;
      }
      public Builder ClearLw() {
        PrepareBuilder();
        result.hasLw = false;
        result.lw_ = 0L;
        return this;
      }
    }
    static UserPlayStatexzdd() {
      object.ReferenceEquals(global::gt_msg.GtXzdd.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TablePlayStateResponsexzdd : pb::GeneratedMessage<TablePlayStateResponsexzdd, TablePlayStateResponsexzdd.Builder> {
    private TablePlayStateResponsexzdd() { }
    private static readonly TablePlayStateResponsexzdd defaultInstance = new TablePlayStateResponsexzdd().MakeReadOnly();
    private static readonly string[] _tablePlayStateResponsexzddFieldNames = new string[] { "UserStates" };
    private static readonly uint[] _tablePlayStateResponsexzddFieldTags = new uint[] { 10 };
    public static TablePlayStateResponsexzdd DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TablePlayStateResponsexzdd DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TablePlayStateResponsexzdd ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_TablePlayStateResponsexzdd__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TablePlayStateResponsexzdd, TablePlayStateResponsexzdd.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtXzdd.internal__static_gt_msg_TablePlayStateResponsexzdd__FieldAccessorTable; }
    }
    
    public const int UserStatesFieldNumber = 1;
    private pbc::PopsicleList<global::gt_msg.UserPlayStatexzdd> userStates_ = new pbc::PopsicleList<global::gt_msg.UserPlayStatexzdd>();
    public scg::IList<global::gt_msg.UserPlayStatexzdd> UserStatesList {
      get { return userStates_; }
    }
    public int UserStatesCount {
      get { return userStates_.Count; }
    }
    public global::gt_msg.UserPlayStatexzdd GetUserStates(int index) {
      return userStates_[index];
    }
    
    public override bool IsInitialized {
      get {
        foreach (global::gt_msg.UserPlayStatexzdd element in UserStatesList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _tablePlayStateResponsexzddFieldNames;
      if (userStates_.Count > 0) {
        output.WriteMessageArray(1, field_names[0], userStates_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::gt_msg.UserPlayStatexzdd element in UserStatesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static TablePlayStateResponsexzdd ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TablePlayStateResponsexzdd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TablePlayStateResponsexzdd ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TablePlayStateResponsexzdd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TablePlayStateResponsexzdd ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TablePlayStateResponsexzdd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TablePlayStateResponsexzdd ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TablePlayStateResponsexzdd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TablePlayStateResponsexzdd ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TablePlayStateResponsexzdd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TablePlayStateResponsexzdd MakeReadOnly() {
      userStates_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TablePlayStateResponsexzdd prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TablePlayStateResponsexzdd, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TablePlayStateResponsexzdd cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TablePlayStateResponsexzdd result;
      
      private TablePlayStateResponsexzdd PrepareBuilder() {
        if (resultIsReadOnly) {
          TablePlayStateResponsexzdd original = result;
          result = new TablePlayStateResponsexzdd();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TablePlayStateResponsexzdd MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.TablePlayStateResponsexzdd.Descriptor; }
      }
      
      public override TablePlayStateResponsexzdd DefaultInstanceForType {
        get { return global::gt_msg.TablePlayStateResponsexzdd.DefaultInstance; }
      }
      
      public override TablePlayStateResponsexzdd BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TablePlayStateResponsexzdd) {
          return MergeFrom((TablePlayStateResponsexzdd) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TablePlayStateResponsexzdd other) {
        if (other == global::gt_msg.TablePlayStateResponsexzdd.DefaultInstance) return this;
        PrepareBuilder();
        if (other.userStates_.Count != 0) {
          result.userStates_.Add(other.userStates_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tablePlayStateResponsexzddFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tablePlayStateResponsexzddFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              input.ReadMessageArray(tag, field_name, result.userStates_, global::gt_msg.UserPlayStatexzdd.DefaultInstance, extensionRegistry);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<global::gt_msg.UserPlayStatexzdd> UserStatesList {
        get { return PrepareBuilder().userStates_; }
      }
      public int UserStatesCount {
        get { return result.UserStatesCount; }
      }
      public global::gt_msg.UserPlayStatexzdd GetUserStates(int index) {
        return result.GetUserStates(index);
      }
      public Builder SetUserStates(int index, global::gt_msg.UserPlayStatexzdd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.userStates_[index] = value;
        return this;
      }
      public Builder SetUserStates(int index, global::gt_msg.UserPlayStatexzdd.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.userStates_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddUserStates(global::gt_msg.UserPlayStatexzdd value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.userStates_.Add(value);
        return this;
      }
      public Builder AddUserStates(global::gt_msg.UserPlayStatexzdd.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.userStates_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeUserStates(scg::IEnumerable<global::gt_msg.UserPlayStatexzdd> values) {
        PrepareBuilder();
        result.userStates_.Add(values);
        return this;
      }
      public Builder ClearUserStates() {
        PrepareBuilder();
        result.userStates_.Clear();
        return this;
      }
    }
    static TablePlayStateResponsexzdd() {
      object.ReferenceEquals(global::gt_msg.GtXzdd.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
