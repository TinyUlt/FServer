// Generated by ProtoGen, Version=2.4.1.555, Culture=neutral, PublicKeyToken=17b3b1f090c3ea48.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
namespace gt_msg {
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class GtDdz {
  
    #region Extension registration
    public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
    }
    #endregion
    #region Static variables
    internal static pbd::MessageDescriptor internal__static_gt_msg_JoinFreeRequestddz__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.JoinFreeRequestddz, global::gt_msg.JoinFreeRequestddz.Builder> internal__static_gt_msg_JoinFreeRequestddz__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_JoinFreeResponseddz__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.JoinFreeResponseddz, global::gt_msg.JoinFreeResponseddz.Builder> internal__static_gt_msg_JoinFreeResponseddz__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_ActionRequestddz__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.ActionRequestddz, global::gt_msg.ActionRequestddz.Builder> internal__static_gt_msg_ActionRequestddz__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_ActionResponseddz__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.ActionResponseddz, global::gt_msg.ActionResponseddz.Builder> internal__static_gt_msg_ActionResponseddz__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_TableUserStatsddz__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.TableUserStatsddz, global::gt_msg.TableUserStatsddz.Builder> internal__static_gt_msg_TableUserStatsddz__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_TableStatsddz__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.TableStatsddz, global::gt_msg.TableStatsddz.Builder> internal__static_gt_msg_TableStatsddz__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_TableUserResultddz__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.TableUserResultddz, global::gt_msg.TableUserResultddz.Builder> internal__static_gt_msg_TableUserResultddz__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_RoundEndedEventddz__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.RoundEndedEventddz, global::gt_msg.RoundEndedEventddz.Builder> internal__static_gt_msg_RoundEndedEventddz__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_ForceExitTableRequestddz__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.ForceExitTableRequestddz, global::gt_msg.ForceExitTableRequestddz.Builder> internal__static_gt_msg_ForceExitTableRequestddz__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_ForceExitTableResponseddz__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.ForceExitTableResponseddz, global::gt_msg.ForceExitTableResponseddz.Builder> internal__static_gt_msg_ForceExitTableResponseddz__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_GameLifeRequestddz__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.GameLifeRequestddz, global::gt_msg.GameLifeRequestddz.Builder> internal__static_gt_msg_GameLifeRequestddz__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_GameLifeResponseddz__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.GameLifeResponseddz, global::gt_msg.GameLifeResponseddz.Builder> internal__static_gt_msg_GameLifeResponseddz__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_GameRankListRequestddz__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.GameRankListRequestddz, global::gt_msg.GameRankListRequestddz.Builder> internal__static_gt_msg_GameRankListRequestddz__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_GameRankListResponseddz__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.GameRankListResponseddz, global::gt_msg.GameRankListResponseddz.Builder> internal__static_gt_msg_GameRankListResponseddz__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_GameReadyRequestddz__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.GameReadyRequestddz, global::gt_msg.GameReadyRequestddz.Builder> internal__static_gt_msg_GameReadyRequestddz__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_GameReadyResponseddz__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.GameReadyResponseddz, global::gt_msg.GameReadyResponseddz.Builder> internal__static_gt_msg_GameReadyResponseddz__FieldAccessorTable;
    internal static pbd::MessageDescriptor internal__static_gt_msg_GMInfoddz__Descriptor;
    internal static pb::FieldAccess.FieldAccessorTable<global::gt_msg.GMInfoddz, global::gt_msg.GMInfoddz.Builder> internal__static_gt_msg_GMInfoddz__FieldAccessorTable;
    #endregion
    #region Descriptor
    public static pbd::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbd::FileDescriptor descriptor;
    
    static GtDdz() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxndF9kZHoucHJvdG8SBmd0X21zZxoNZ3RfYmFzZS5wcm90byKqAQoSSm9p", 
            "bkZyZWVSZXF1ZXN0ZGR6Eg8KB3VzZXJfaWQYASACKAkSJgoEcnVsZRgCIAIo", 
            "DjIMLmd0X21zZy5SdWxlOgpSdWxlTm9ybWFsEh8KBHJhbmsYAyACKA4yDC5n", 
            "dF9tc2cuUmFuazoDTFYwEhAKCHRhYmxlX2lkGAQgASgFEhUKDWpvaW5fcGFz", 
            "c3dvcmQYBSABKAkSEQoJYmFzZVBvaW50GAYgASgFIq8EChNKb2luRnJlZVJl", 
            "c3BvbnNlZGR6Ej4KBGNvZGUYASACKA4yMC5ndF9tc2cuSm9pbkZyZWVSZXNw", 
            "b25zZWRkei5Kb2luRnJlZVJlc3BvbnNlQ29kZRIYChByZWNvbm5lY3RlZF91", 
            "c2VyGAIgASgIEhEKCW1pbl9jb2lucxgDIAEoBRIYChBoYXNfYmFzaWNfbGl2", 
            "aW5nGAQgASgIEh4KFmJhc2ljX2xpdmluZ19hbGxfdGltZXMYBSABKAUSHgoW", 
            "YmFzaWNfbGl2aW5nX3VzZV90aW1lcxgGIAEoBRIaChJiYXNpY19saXZpbmdf", 
            "Y29pbnMYByABKAUSIgoMcmFua19yZXF1ZXN0GAggASgOMgwuZ3RfbXNnLlJh", 
            "bmsSGgoEcmFuaxgJIAEoDjIMLmd0X21zZy5SYW5rEikKCmdhbWVfc3RhdHMY", 
            "CiABKAsyFS5ndF9tc2cuVGFibGVTdGF0c2RkehIVCg1UYWJsZVBhc3NXb3Jk", 
            "GAsgASgJEhAKCEl0ZW1UeXBlGAwgASgFIqABChRKb2luRnJlZVJlc3BvbnNl", 
            "Q29kZRIGCgJPaxAAEhgKFE1pbmltdW1Db2luc1JlcXVpcmVkEAESGgoWTWlu", 
            "aW11bURpYW1vbmRSZXF1aXJlZBACEhAKDE5vVGFibGVBdmFpbBADEg0KCUNy", 
            "ZWF0ZUVychAEEg0KCVJvb21JZEVychAFEg8KC1Bhc3NXb3JkRXJyEAYSCQoF", 
            "T3RoZXIQByLKAQoQQWN0aW9uUmVxdWVzdGRkehIxCgRjb2RlGAEgAigOMiMu", 
            "Z3RfbXNnLkFjdGlvblJlcXVlc3RkZHouQWN0aW9uQ29kZRIRCglQYXlOdW1N", 
            "aW4YAiABKAUSEQoFQ2FyZHMYAyADKAVCAhABEiYKCENhcmRUeXBlGAQgASgO", 
            "MhQuZ3RfbXNnLkNhcmRzVHlwZWRkeiI1CgpBY3Rpb25Db2RlEgwKCE1ha2VI", 
            "b3N0EAASDQoJUGxheUNhcmRzEAESCgoGR2l2ZVVwEAIimwEKEUFjdGlvblJl", 
            "c3BvbnNlZGR6EjoKBGNvZGUYASACKA4yLC5ndF9tc2cuQWN0aW9uUmVzcG9u", 
            "c2VkZHouQWN0aW9uUmVzcG9uc2VDb2RlIkoKEkFjdGlvblJlc3BvbnNlQ29k", 
            "ZRIGCgJPSxAAEhAKDENhbm5vdEFjdGlvbhABEgsKB0VyclR5cGUQAhINCglP", 
            "dGhlclR5cGUQAyKPAgoRVGFibGVVc2VyU3RhdHNkZHoSHwoJdXNlcl9pbmZv", 
            "GAEgAigLMgwuZ3RfbXNnLlVzZXISDwoHTm93U2VhdBgCIAIoBRINCgVTdGF0", 
            "ZRgDIAEoBRIVCglIYW5kQ2FyZHMYBCADKAVCAhABEg4KBklzSG9zdBgFIAEo", 
            "BRIRCglMZWZ0Q2FyZHMYBiABKAUSCgoCVEcYByABKAUSLwoNT2xkQWN0aW9u", 
            "TGlzdBgIIAMoCzIYLmd0X21zZy5BY3Rpb25SZXF1ZXN0ZGR6Ei8KDU5ld0Fj", 
            "dGlvbkxpc3QYCSADKAsyGC5ndF9tc2cuQWN0aW9uUmVxdWVzdGRkehIRCglQ", 
            "bGF5U3RhdGUYCiABKAUitAMKDVRhYmxlU3RhdHNkZHoSDwoHVGFibGVJRBgB", 
            "IAIoBRINCgVTdGFnZRgCIAIoBRIaCgRyYW5rGAMgAigOMgwuZ3RfbXNnLlJh", 
            "bmsSGgoEcnVsZRgEIAIoDjIMLmd0X21zZy5SdWxlEgwKBFN0ZXAYBSACKAUS", 
            "GQoRTmV4dEFjdGlvblRpbWVPdXQYBiACKAUSGQoRTGFzdFBsYXlDYXJkc1Nl", 
            "YXQYByACKAUSDgoGTXlTZWF0GAggAigFEhEKCUJhc2VQb2ludBgJIAIoBRIT", 
            "CgdOb3dTZWF0GAogAygFQgIQARIsCglTZWF0VXNlcjEYCyABKAsyGS5ndF9t", 
            "c2cuVGFibGVVc2VyU3RhdHNkZHoSLAoJU2VhdFVzZXIyGAwgASgLMhkuZ3Rf", 
            "bXNnLlRhYmxlVXNlclN0YXRzZGR6EiwKCVNlYXRVc2VyMxgNIAEoCzIZLmd0", 
            "X21zZy5UYWJsZVVzZXJTdGF0c2RkehIQCghNYWtlUmF0ZRgOIAIoBRIRCglU", 
            "YWJsZVJhdGUYDyACKAUSCQoBQhgQIAIoBRIVCglCYXNlQ2FyZHMYESADKAVC", 
            "AhABIqgBChJUYWJsZVVzZXJSZXN1bHRkZHoSHwoJdXNlcl9pbmZvGAEgASgL", 
            "MgwuZ3RfbXNnLlVzZXISDwoHTm93U2VhdBgCIAIoBRIpCgdMb3N0V2luGAMg", 
            "ASgLMhguZ3RfbXNnLkl0ZW1DaGFuZ2VkRXZlbnQSCwoDVGF4GAQgASgFEhUK", 
            "CUhhbmRDYXJkcxgFIAMoBUICEAESEQoJQm9tYlRpbWVzGAYgASgFIrgCChJS", 
            "b3VuZEVuZGVkRXZlbnRkZHoSDwoHVGFibGVJRBgBIAIoBRIOCgZNeVNlYXQY", 
            "AiACKAUSDgoGSG9zdGx3GAMgAigFEhEKCUJhc2VQb2ludBgEIAIoBRIcChRO", 
            "ZXh0U3RhcnRUaW1lb3V0U2VjcxgFIAIoBRItCglTZWF0VXNlcjEYBiABKAsy", 
            "Gi5ndF9tc2cuVGFibGVVc2VyUmVzdWx0ZGR6Ei0KCVNlYXRVc2VyMhgHIAEo", 
            "CzIaLmd0X21zZy5UYWJsZVVzZXJSZXN1bHRkZHoSLQoJU2VhdFVzZXIzGAgg", 
            "ASgLMhouZ3RfbXNnLlRhYmxlVXNlclJlc3VsdGRkehIOCgZTcHJpbmcYCSAC", 
            "KAUSEAoITWFrZVJhdGUYCiACKAUSEQoJVGFibGVSYXRlGAsgAigFIhoKGEZv", 
            "cmNlRXhpdFRhYmxlUmVxdWVzdGRkeiKoAQoZRm9yY2VFeGl0VGFibGVSZXNw", 
            "b25zZWRkehI0CgRjb2RlGAEgAigOMiYuZ3RfbXNnLkZvcmNlRXhpdFRhYmxl", 
            "UmVzcG9uc2VkZHouQ29kZSJVCgRDb2RlEgoKBk5vcm1hbBAAEgoKBkdpdmVV", 
            "cBABEhEKDU5vRW5vdWdoTW9uZXkQAhIPCgtDaGFuZ2VUYWJsZRADEhEKDVBs", 
            "YXlpbmdOb0V4aXQQBCIhChJHYW1lTGlmZVJlcXVlc3RkZHoSCwoDdWlkGAEg", 
            "AigJItgDChNHYW1lTGlmZVJlc3BvbnNlZGR6Ei4KBGNvZGUYASACKA4yIC5n", 
            "dF9tc2cuR2FtZUxpZmVSZXNwb25zZWRkei5Db2RlEh8KCXVzZXJfaW5mbxgC", 
            "IAIoCzIMLmd0X21zZy5Vc2VyEhAKCHdpblRpbWVzGAMgASgFEhEKCWxvc3RU", 
            "aW1lcxgEIAEoBRITCgtjb250aW51ZVdpbhgFIAEoBRIWCg5sZXZlbDFXaW5D", 
            "aGlwcxgGIAEoAxIaChJsZXZlbDFXaW5DaGlwc1JhbmsYByABKAUSFgoObGV2", 
            "ZWwyV2luQ2hpcHMYCCABKAMSGgoSbGV2ZWwyV2luQ2hpcHNSYW5rGAkgASgF", 
            "EhYKDmxldmVsM1dpbkNoaXBzGAogASgDEhoKEmxldmVsM1dpbkNoaXBzUmFu", 
            "axgLIAEoBRIWCg5sZXZlbDRXaW5DaGlwcxgMIAEoAxIaChJsZXZlbDRXaW5D", 
            "aGlwc1JhbmsYDSABKAUSFgoObGV2ZWw1V2luQ2hpcHMYDiABKAMSGgoSbGV2", 
            "ZWw1V2luQ2hpcHNSYW5rGA8gASgFEhYKDmdhbWVBbGxVc2VyTnVtGBAgASgF", 
            "IhoKBENvZGUSBgoCT2sQABIKCgZGYWlsZWQQASIYChZHYW1lUmFua0xpc3RS", 
            "ZXF1ZXN0ZGR6IrMBChdHYW1lUmFua0xpc3RSZXNwb25zZWRkehIyCgRjb2Rl", 
            "GAEgAigOMiQuZ3RfbXNnLkdhbWVSYW5rTGlzdFJlc3BvbnNlZGR6LkNvZGUS", 
            "CwoDdWlkGAIgAigJEhUKDWRheV93aW5fY2hpcHMYAyADKAkSEQoJYWxsX3Rp", 
            "bWVzGAQgAygJEhEKCWFsbF9jaGlwcxgFIAMoCSIaCgRDb2RlEgYKAk9rEAAS", 
            "CgoGRmFpbGVkEAEiFQoTR2FtZVJlYWR5UmVxdWVzdGRkeiJ4ChRHYW1lUmVh", 
            "ZHlSZXNwb25zZWRkehIvCgRjb2RlGAEgAigOMiEuZ3RfbXNnLkdhbWVSZWFk", 
            "eVJlc3BvbnNlZGR6LkNvZGUSEwoLcGxheWVyUmVhZHkYAiADKAUiGgoEQ29k", 
            "ZRIGCgJPSxAAEgoKBkZhaWxlZBABIlMKCUdNSW5mb2RkehIWCgpIYW5kQ2Fy", 
            "ZHMxGAEgAygFQgIQARIWCgpIYW5kQ2FyZHMyGAIgAygFQgIQARIWCgpIYW5k", 
            "Q2FyZHMzGAMgAygFQgIQASqTAwoMQ2FyZHNUeXBlZGR6EggKBFJkZHoQABII", 
            "CgRCZGR6EAESCAoEU2RkehACEggKBFBkZHoQAxIICgRUZGR6EAQSCQoFVDFk", 
            "ZHoQBRIJCgVUMmRkehAGEgkKBVNaZGR6EAcSCwoHU1oyM2RkehAIEgsKB1Na", 
            "MjRkZHoQCRILCgdTWjI1ZGR6EAoSCwoHU1oyNmRkehALEgsKB1NaMjdkZHoQ", 
            "DBILCgdTWjI4ZGR6EA0SCwoHU1oyOWRkehAOEgwKCFNaMjEwZGR6EA8SCwoH", 
            "U1ozMmRkehAQEgwKCFNaMzIxZGR6EBESDAoIU1ozMjJkZHoQEhILCgdTWjMz", 
            "ZGR6EBMSDAoIU1ozMzFkZHoQFBIMCghTWjMzMmRkehAVEgsKB1NaMzRkZHoQ", 
            "FhIMCghTWjM0MWRkehAXEgwKCFNaMzQyZGR6EBgSCwoHU1ozNWRkehAZEgwK", 
            "CFNaMzUxZGR6EBoSCwoHU1ozNmRkehAbEgkKBUIxZGR6EBwSCQoFQjJkZHoQ", 
          "HRIOCgpFcnJUeXBlZGR6EB4="));
      pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
        descriptor = root;
        internal__static_gt_msg_JoinFreeRequestddz__Descriptor = Descriptor.MessageTypes[0];
        internal__static_gt_msg_JoinFreeRequestddz__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.JoinFreeRequestddz, global::gt_msg.JoinFreeRequestddz.Builder>(internal__static_gt_msg_JoinFreeRequestddz__Descriptor,
                new string[] { "UserId", "Rule", "Rank", "TableId", "JoinPassword", "BasePoint", });
        internal__static_gt_msg_JoinFreeResponseddz__Descriptor = Descriptor.MessageTypes[1];
        internal__static_gt_msg_JoinFreeResponseddz__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.JoinFreeResponseddz, global::gt_msg.JoinFreeResponseddz.Builder>(internal__static_gt_msg_JoinFreeResponseddz__Descriptor,
                new string[] { "Code", "ReconnectedUser", "MinCoins", "HasBasicLiving", "BasicLivingAllTimes", "BasicLivingUseTimes", "BasicLivingCoins", "RankRequest", "Rank", "GameStats", "TablePassWord", "ItemType", });
        internal__static_gt_msg_ActionRequestddz__Descriptor = Descriptor.MessageTypes[2];
        internal__static_gt_msg_ActionRequestddz__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.ActionRequestddz, global::gt_msg.ActionRequestddz.Builder>(internal__static_gt_msg_ActionRequestddz__Descriptor,
                new string[] { "Code", "PayNumMin", "Cards", "CardType", });
        internal__static_gt_msg_ActionResponseddz__Descriptor = Descriptor.MessageTypes[3];
        internal__static_gt_msg_ActionResponseddz__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.ActionResponseddz, global::gt_msg.ActionResponseddz.Builder>(internal__static_gt_msg_ActionResponseddz__Descriptor,
                new string[] { "Code", });
        internal__static_gt_msg_TableUserStatsddz__Descriptor = Descriptor.MessageTypes[4];
        internal__static_gt_msg_TableUserStatsddz__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.TableUserStatsddz, global::gt_msg.TableUserStatsddz.Builder>(internal__static_gt_msg_TableUserStatsddz__Descriptor,
                new string[] { "UserInfo", "NowSeat", "State", "HandCards", "IsHost", "LeftCards", "TG", "OldActionList", "NewActionList", "PlayState", });
        internal__static_gt_msg_TableStatsddz__Descriptor = Descriptor.MessageTypes[5];
        internal__static_gt_msg_TableStatsddz__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.TableStatsddz, global::gt_msg.TableStatsddz.Builder>(internal__static_gt_msg_TableStatsddz__Descriptor,
                new string[] { "TableID", "Stage", "Rank", "Rule", "Step", "NextActionTimeOut", "LastPlayCardsSeat", "MySeat", "BasePoint", "NowSeat", "SeatUser1", "SeatUser2", "SeatUser3", "MakeRate", "TableRate", "B", "BaseCards", });
        internal__static_gt_msg_TableUserResultddz__Descriptor = Descriptor.MessageTypes[6];
        internal__static_gt_msg_TableUserResultddz__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.TableUserResultddz, global::gt_msg.TableUserResultddz.Builder>(internal__static_gt_msg_TableUserResultddz__Descriptor,
                new string[] { "UserInfo", "NowSeat", "LostWin", "Tax", "HandCards", "BombTimes", });
        internal__static_gt_msg_RoundEndedEventddz__Descriptor = Descriptor.MessageTypes[7];
        internal__static_gt_msg_RoundEndedEventddz__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.RoundEndedEventddz, global::gt_msg.RoundEndedEventddz.Builder>(internal__static_gt_msg_RoundEndedEventddz__Descriptor,
                new string[] { "TableID", "MySeat", "Hostlw", "BasePoint", "NextStartTimeoutSecs", "SeatUser1", "SeatUser2", "SeatUser3", "Spring", "MakeRate", "TableRate", });
        internal__static_gt_msg_ForceExitTableRequestddz__Descriptor = Descriptor.MessageTypes[8];
        internal__static_gt_msg_ForceExitTableRequestddz__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.ForceExitTableRequestddz, global::gt_msg.ForceExitTableRequestddz.Builder>(internal__static_gt_msg_ForceExitTableRequestddz__Descriptor,
                new string[] { });
        internal__static_gt_msg_ForceExitTableResponseddz__Descriptor = Descriptor.MessageTypes[9];
        internal__static_gt_msg_ForceExitTableResponseddz__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.ForceExitTableResponseddz, global::gt_msg.ForceExitTableResponseddz.Builder>(internal__static_gt_msg_ForceExitTableResponseddz__Descriptor,
                new string[] { "Code", });
        internal__static_gt_msg_GameLifeRequestddz__Descriptor = Descriptor.MessageTypes[10];
        internal__static_gt_msg_GameLifeRequestddz__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.GameLifeRequestddz, global::gt_msg.GameLifeRequestddz.Builder>(internal__static_gt_msg_GameLifeRequestddz__Descriptor,
                new string[] { "Uid", });
        internal__static_gt_msg_GameLifeResponseddz__Descriptor = Descriptor.MessageTypes[11];
        internal__static_gt_msg_GameLifeResponseddz__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.GameLifeResponseddz, global::gt_msg.GameLifeResponseddz.Builder>(internal__static_gt_msg_GameLifeResponseddz__Descriptor,
                new string[] { "Code", "UserInfo", "WinTimes", "LostTimes", "ContinueWin", "Level1WinChips", "Level1WinChipsRank", "Level2WinChips", "Level2WinChipsRank", "Level3WinChips", "Level3WinChipsRank", "Level4WinChips", "Level4WinChipsRank", "Level5WinChips", "Level5WinChipsRank", "GameAllUserNum", });
        internal__static_gt_msg_GameRankListRequestddz__Descriptor = Descriptor.MessageTypes[12];
        internal__static_gt_msg_GameRankListRequestddz__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.GameRankListRequestddz, global::gt_msg.GameRankListRequestddz.Builder>(internal__static_gt_msg_GameRankListRequestddz__Descriptor,
                new string[] { });
        internal__static_gt_msg_GameRankListResponseddz__Descriptor = Descriptor.MessageTypes[13];
        internal__static_gt_msg_GameRankListResponseddz__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.GameRankListResponseddz, global::gt_msg.GameRankListResponseddz.Builder>(internal__static_gt_msg_GameRankListResponseddz__Descriptor,
                new string[] { "Code", "Uid", "DayWinChips", "AllTimes", "AllChips", });
        internal__static_gt_msg_GameReadyRequestddz__Descriptor = Descriptor.MessageTypes[14];
        internal__static_gt_msg_GameReadyRequestddz__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.GameReadyRequestddz, global::gt_msg.GameReadyRequestddz.Builder>(internal__static_gt_msg_GameReadyRequestddz__Descriptor,
                new string[] { });
        internal__static_gt_msg_GameReadyResponseddz__Descriptor = Descriptor.MessageTypes[15];
        internal__static_gt_msg_GameReadyResponseddz__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.GameReadyResponseddz, global::gt_msg.GameReadyResponseddz.Builder>(internal__static_gt_msg_GameReadyResponseddz__Descriptor,
                new string[] { "Code", "PlayerReady", });
        internal__static_gt_msg_GMInfoddz__Descriptor = Descriptor.MessageTypes[16];
        internal__static_gt_msg_GMInfoddz__FieldAccessorTable = 
            new pb::FieldAccess.FieldAccessorTable<global::gt_msg.GMInfoddz, global::gt_msg.GMInfoddz.Builder>(internal__static_gt_msg_GMInfoddz__Descriptor,
                new string[] { "HandCards1", "HandCards2", "HandCards3", });
        return null;
      };
      pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbd::FileDescriptor[] {
          global::gt_msg.GtBase.Descriptor, 
          }, assigner);
    }
    #endregion
    
  }
  #region Enums
  public enum CardsTypeddz {
    Rddz = 0,
    Bddz = 1,
    Sddz = 2,
    Pddz = 3,
    Tddz = 4,
    T1ddz = 5,
    T2ddz = 6,
    SZddz = 7,
    SZ23ddz = 8,
    SZ24ddz = 9,
    SZ25ddz = 10,
    SZ26ddz = 11,
    SZ27ddz = 12,
    SZ28ddz = 13,
    SZ29ddz = 14,
    SZ210ddz = 15,
    SZ32ddz = 16,
    SZ321ddz = 17,
    SZ322ddz = 18,
    SZ33ddz = 19,
    SZ331ddz = 20,
    SZ332ddz = 21,
    SZ34ddz = 22,
    SZ341ddz = 23,
    SZ342ddz = 24,
    SZ35ddz = 25,
    SZ351ddz = 26,
    SZ36ddz = 27,
    B1ddz = 28,
    B2ddz = 29,
    ErrTypeddz = 30,
  }
  
  #endregion
  
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class JoinFreeRequestddz : pb::GeneratedMessage<JoinFreeRequestddz, JoinFreeRequestddz.Builder> {
    private JoinFreeRequestddz() { }
    private static readonly JoinFreeRequestddz defaultInstance = new JoinFreeRequestddz().MakeReadOnly();
    private static readonly string[] _joinFreeRequestddzFieldNames = new string[] { "basePoint", "join_password", "rank", "rule", "table_id", "user_id" };
    private static readonly uint[] _joinFreeRequestddzFieldTags = new uint[] { 48, 42, 24, 16, 32, 10 };
    public static JoinFreeRequestddz DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override JoinFreeRequestddz DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override JoinFreeRequestddz ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_JoinFreeRequestddz__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<JoinFreeRequestddz, JoinFreeRequestddz.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_JoinFreeRequestddz__FieldAccessorTable; }
    }
    
    public const int UserIdFieldNumber = 1;
    private bool hasUserId;
    private string userId_ = "";
    public bool HasUserId {
      get { return hasUserId; }
    }
    public string UserId {
      get { return userId_; }
    }
    
    public const int RuleFieldNumber = 2;
    private bool hasRule;
    private global::gt_msg.Rule rule_ = global::gt_msg.Rule.RuleNormal;
    public bool HasRule {
      get { return hasRule; }
    }
    public global::gt_msg.Rule Rule {
      get { return rule_; }
    }
    
    public const int RankFieldNumber = 3;
    private bool hasRank;
    private global::gt_msg.Rank rank_ = global::gt_msg.Rank.LV0;
    public bool HasRank {
      get { return hasRank; }
    }
    public global::gt_msg.Rank Rank {
      get { return rank_; }
    }
    
    public const int TableIdFieldNumber = 4;
    private bool hasTableId;
    private int tableId_;
    public bool HasTableId {
      get { return hasTableId; }
    }
    public int TableId {
      get { return tableId_; }
    }
    
    public const int JoinPasswordFieldNumber = 5;
    private bool hasJoinPassword;
    private string joinPassword_ = "";
    public bool HasJoinPassword {
      get { return hasJoinPassword; }
    }
    public string JoinPassword {
      get { return joinPassword_; }
    }
    
    public const int BasePointFieldNumber = 6;
    private bool hasBasePoint;
    private int basePoint_;
    public bool HasBasePoint {
      get { return hasBasePoint; }
    }
    public int BasePoint {
      get { return basePoint_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUserId) return false;
        if (!hasRule) return false;
        if (!hasRank) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _joinFreeRequestddzFieldNames;
      if (hasUserId) {
        output.WriteString(1, field_names[5], UserId);
      }
      if (hasRule) {
        output.WriteEnum(2, field_names[3], (int) Rule, Rule);
      }
      if (hasRank) {
        output.WriteEnum(3, field_names[2], (int) Rank, Rank);
      }
      if (hasTableId) {
        output.WriteInt32(4, field_names[4], TableId);
      }
      if (hasJoinPassword) {
        output.WriteString(5, field_names[1], JoinPassword);
      }
      if (hasBasePoint) {
        output.WriteInt32(6, field_names[0], BasePoint);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUserId) {
        size += pb::CodedOutputStream.ComputeStringSize(1, UserId);
      }
      if (hasRule) {
        size += pb::CodedOutputStream.ComputeEnumSize(2, (int) Rule);
      }
      if (hasRank) {
        size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Rank);
      }
      if (hasTableId) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, TableId);
      }
      if (hasJoinPassword) {
        size += pb::CodedOutputStream.ComputeStringSize(5, JoinPassword);
      }
      if (hasBasePoint) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, BasePoint);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static JoinFreeRequestddz ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JoinFreeRequestddz ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JoinFreeRequestddz ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JoinFreeRequestddz ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JoinFreeRequestddz ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JoinFreeRequestddz ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static JoinFreeRequestddz ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static JoinFreeRequestddz ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static JoinFreeRequestddz ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JoinFreeRequestddz ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private JoinFreeRequestddz MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(JoinFreeRequestddz prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<JoinFreeRequestddz, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(JoinFreeRequestddz cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private JoinFreeRequestddz result;
      
      private JoinFreeRequestddz PrepareBuilder() {
        if (resultIsReadOnly) {
          JoinFreeRequestddz original = result;
          result = new JoinFreeRequestddz();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override JoinFreeRequestddz MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.JoinFreeRequestddz.Descriptor; }
      }
      
      public override JoinFreeRequestddz DefaultInstanceForType {
        get { return global::gt_msg.JoinFreeRequestddz.DefaultInstance; }
      }
      
      public override JoinFreeRequestddz BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is JoinFreeRequestddz) {
          return MergeFrom((JoinFreeRequestddz) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(JoinFreeRequestddz other) {
        if (other == global::gt_msg.JoinFreeRequestddz.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUserId) {
          UserId = other.UserId;
        }
        if (other.HasRule) {
          Rule = other.Rule;
        }
        if (other.HasRank) {
          Rank = other.Rank;
        }
        if (other.HasTableId) {
          TableId = other.TableId;
        }
        if (other.HasJoinPassword) {
          JoinPassword = other.JoinPassword;
        }
        if (other.HasBasePoint) {
          BasePoint = other.BasePoint;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_joinFreeRequestddzFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _joinFreeRequestddzFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUserId = input.ReadString(ref result.userId_);
              break;
            }
            case 16: {
              object unknown;
              if(input.ReadEnum(ref result.rule_, out unknown)) {
                result.hasRule = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(2, (ulong)(int)unknown);
              }
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.rank_, out unknown)) {
                result.hasRank = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
            case 32: {
              result.hasTableId = input.ReadInt32(ref result.tableId_);
              break;
            }
            case 42: {
              result.hasJoinPassword = input.ReadString(ref result.joinPassword_);
              break;
            }
            case 48: {
              result.hasBasePoint = input.ReadInt32(ref result.basePoint_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUserId {
        get { return result.hasUserId; }
      }
      public string UserId {
        get { return result.UserId; }
        set { SetUserId(value); }
      }
      public Builder SetUserId(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserId = true;
        result.userId_ = value;
        return this;
      }
      public Builder ClearUserId() {
        PrepareBuilder();
        result.hasUserId = false;
        result.userId_ = "";
        return this;
      }
      
      public bool HasRule {
       get { return result.hasRule; }
      }
      public global::gt_msg.Rule Rule {
        get { return result.Rule; }
        set { SetRule(value); }
      }
      public Builder SetRule(global::gt_msg.Rule value) {
        PrepareBuilder();
        result.hasRule = true;
        result.rule_ = value;
        return this;
      }
      public Builder ClearRule() {
        PrepareBuilder();
        result.hasRule = false;
        result.rule_ = global::gt_msg.Rule.RuleNormal;
        return this;
      }
      
      public bool HasRank {
       get { return result.hasRank; }
      }
      public global::gt_msg.Rank Rank {
        get { return result.Rank; }
        set { SetRank(value); }
      }
      public Builder SetRank(global::gt_msg.Rank value) {
        PrepareBuilder();
        result.hasRank = true;
        result.rank_ = value;
        return this;
      }
      public Builder ClearRank() {
        PrepareBuilder();
        result.hasRank = false;
        result.rank_ = global::gt_msg.Rank.LV0;
        return this;
      }
      
      public bool HasTableId {
        get { return result.hasTableId; }
      }
      public int TableId {
        get { return result.TableId; }
        set { SetTableId(value); }
      }
      public Builder SetTableId(int value) {
        PrepareBuilder();
        result.hasTableId = true;
        result.tableId_ = value;
        return this;
      }
      public Builder ClearTableId() {
        PrepareBuilder();
        result.hasTableId = false;
        result.tableId_ = 0;
        return this;
      }
      
      public bool HasJoinPassword {
        get { return result.hasJoinPassword; }
      }
      public string JoinPassword {
        get { return result.JoinPassword; }
        set { SetJoinPassword(value); }
      }
      public Builder SetJoinPassword(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasJoinPassword = true;
        result.joinPassword_ = value;
        return this;
      }
      public Builder ClearJoinPassword() {
        PrepareBuilder();
        result.hasJoinPassword = false;
        result.joinPassword_ = "";
        return this;
      }
      
      public bool HasBasePoint {
        get { return result.hasBasePoint; }
      }
      public int BasePoint {
        get { return result.BasePoint; }
        set { SetBasePoint(value); }
      }
      public Builder SetBasePoint(int value) {
        PrepareBuilder();
        result.hasBasePoint = true;
        result.basePoint_ = value;
        return this;
      }
      public Builder ClearBasePoint() {
        PrepareBuilder();
        result.hasBasePoint = false;
        result.basePoint_ = 0;
        return this;
      }
    }
    static JoinFreeRequestddz() {
      object.ReferenceEquals(global::gt_msg.GtDdz.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class JoinFreeResponseddz : pb::GeneratedMessage<JoinFreeResponseddz, JoinFreeResponseddz.Builder> {
    private JoinFreeResponseddz() { }
    private static readonly JoinFreeResponseddz defaultInstance = new JoinFreeResponseddz().MakeReadOnly();
    private static readonly string[] _joinFreeResponseddzFieldNames = new string[] { "ItemType", "TablePassWord", "basic_living_all_times", "basic_living_coins", "basic_living_use_times", "code", "game_stats", "has_basic_living", "min_coins", "rank", "rank_request", "reconnected_user" };
    private static readonly uint[] _joinFreeResponseddzFieldTags = new uint[] { 96, 90, 40, 56, 48, 8, 82, 32, 24, 72, 64, 16 };
    public static JoinFreeResponseddz DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override JoinFreeResponseddz DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override JoinFreeResponseddz ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_JoinFreeResponseddz__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<JoinFreeResponseddz, JoinFreeResponseddz.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_JoinFreeResponseddz__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum JoinFreeResponseCode {
        Ok = 0,
        MinimumCoinsRequired = 1,
        MinimumDiamondRequired = 2,
        NoTableAvail = 3,
        CreateErr = 4,
        RoomIdErr = 5,
        PassWordErr = 6,
        Other = 7,
      }
      
    }
    #endregion
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private global::gt_msg.JoinFreeResponseddz.Types.JoinFreeResponseCode code_ = global::gt_msg.JoinFreeResponseddz.Types.JoinFreeResponseCode.Ok;
    public bool HasCode {
      get { return hasCode; }
    }
    public global::gt_msg.JoinFreeResponseddz.Types.JoinFreeResponseCode Code {
      get { return code_; }
    }
    
    public const int ReconnectedUserFieldNumber = 2;
    private bool hasReconnectedUser;
    private bool reconnectedUser_;
    public bool HasReconnectedUser {
      get { return hasReconnectedUser; }
    }
    public bool ReconnectedUser {
      get { return reconnectedUser_; }
    }
    
    public const int MinCoinsFieldNumber = 3;
    private bool hasMinCoins;
    private int minCoins_;
    public bool HasMinCoins {
      get { return hasMinCoins; }
    }
    public int MinCoins {
      get { return minCoins_; }
    }
    
    public const int HasBasicLivingFieldNumber = 4;
    private bool hasHasBasicLiving;
    private bool hasBasicLiving_;
    public bool HasHasBasicLiving {
      get { return hasHasBasicLiving; }
    }
    public bool HasBasicLiving {
      get { return hasBasicLiving_; }
    }
    
    public const int BasicLivingAllTimesFieldNumber = 5;
    private bool hasBasicLivingAllTimes;
    private int basicLivingAllTimes_;
    public bool HasBasicLivingAllTimes {
      get { return hasBasicLivingAllTimes; }
    }
    public int BasicLivingAllTimes {
      get { return basicLivingAllTimes_; }
    }
    
    public const int BasicLivingUseTimesFieldNumber = 6;
    private bool hasBasicLivingUseTimes;
    private int basicLivingUseTimes_;
    public bool HasBasicLivingUseTimes {
      get { return hasBasicLivingUseTimes; }
    }
    public int BasicLivingUseTimes {
      get { return basicLivingUseTimes_; }
    }
    
    public const int BasicLivingCoinsFieldNumber = 7;
    private bool hasBasicLivingCoins;
    private int basicLivingCoins_;
    public bool HasBasicLivingCoins {
      get { return hasBasicLivingCoins; }
    }
    public int BasicLivingCoins {
      get { return basicLivingCoins_; }
    }
    
    public const int RankRequestFieldNumber = 8;
    private bool hasRankRequest;
    private global::gt_msg.Rank rankRequest_ = global::gt_msg.Rank.LV0;
    public bool HasRankRequest {
      get { return hasRankRequest; }
    }
    public global::gt_msg.Rank RankRequest {
      get { return rankRequest_; }
    }
    
    public const int RankFieldNumber = 9;
    private bool hasRank;
    private global::gt_msg.Rank rank_ = global::gt_msg.Rank.LV0;
    public bool HasRank {
      get { return hasRank; }
    }
    public global::gt_msg.Rank Rank {
      get { return rank_; }
    }
    
    public const int GameStatsFieldNumber = 10;
    private bool hasGameStats;
    private global::gt_msg.TableStatsddz gameStats_;
    public bool HasGameStats {
      get { return hasGameStats; }
    }
    public global::gt_msg.TableStatsddz GameStats {
      get { return gameStats_ ?? global::gt_msg.TableStatsddz.DefaultInstance; }
    }
    
    public const int TablePassWordFieldNumber = 11;
    private bool hasTablePassWord;
    private string tablePassWord_ = "";
    public bool HasTablePassWord {
      get { return hasTablePassWord; }
    }
    public string TablePassWord {
      get { return tablePassWord_; }
    }
    
    public const int ItemTypeFieldNumber = 12;
    private bool hasItemType;
    private int itemType_;
    public bool HasItemType {
      get { return hasItemType; }
    }
    public int ItemType {
      get { return itemType_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        if (HasGameStats) {
          if (!GameStats.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _joinFreeResponseddzFieldNames;
      if (hasCode) {
        output.WriteEnum(1, field_names[5], (int) Code, Code);
      }
      if (hasReconnectedUser) {
        output.WriteBool(2, field_names[11], ReconnectedUser);
      }
      if (hasMinCoins) {
        output.WriteInt32(3, field_names[8], MinCoins);
      }
      if (hasHasBasicLiving) {
        output.WriteBool(4, field_names[7], HasBasicLiving);
      }
      if (hasBasicLivingAllTimes) {
        output.WriteInt32(5, field_names[2], BasicLivingAllTimes);
      }
      if (hasBasicLivingUseTimes) {
        output.WriteInt32(6, field_names[4], BasicLivingUseTimes);
      }
      if (hasBasicLivingCoins) {
        output.WriteInt32(7, field_names[3], BasicLivingCoins);
      }
      if (hasRankRequest) {
        output.WriteEnum(8, field_names[10], (int) RankRequest, RankRequest);
      }
      if (hasRank) {
        output.WriteEnum(9, field_names[9], (int) Rank, Rank);
      }
      if (hasGameStats) {
        output.WriteMessage(10, field_names[6], GameStats);
      }
      if (hasTablePassWord) {
        output.WriteString(11, field_names[1], TablePassWord);
      }
      if (hasItemType) {
        output.WriteInt32(12, field_names[0], ItemType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCode) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Code);
      }
      if (hasReconnectedUser) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, ReconnectedUser);
      }
      if (hasMinCoins) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, MinCoins);
      }
      if (hasHasBasicLiving) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, HasBasicLiving);
      }
      if (hasBasicLivingAllTimes) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, BasicLivingAllTimes);
      }
      if (hasBasicLivingUseTimes) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, BasicLivingUseTimes);
      }
      if (hasBasicLivingCoins) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, BasicLivingCoins);
      }
      if (hasRankRequest) {
        size += pb::CodedOutputStream.ComputeEnumSize(8, (int) RankRequest);
      }
      if (hasRank) {
        size += pb::CodedOutputStream.ComputeEnumSize(9, (int) Rank);
      }
      if (hasGameStats) {
        size += pb::CodedOutputStream.ComputeMessageSize(10, GameStats);
      }
      if (hasTablePassWord) {
        size += pb::CodedOutputStream.ComputeStringSize(11, TablePassWord);
      }
      if (hasItemType) {
        size += pb::CodedOutputStream.ComputeInt32Size(12, ItemType);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static JoinFreeResponseddz ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JoinFreeResponseddz ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JoinFreeResponseddz ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static JoinFreeResponseddz ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static JoinFreeResponseddz ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JoinFreeResponseddz ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static JoinFreeResponseddz ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static JoinFreeResponseddz ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static JoinFreeResponseddz ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static JoinFreeResponseddz ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private JoinFreeResponseddz MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(JoinFreeResponseddz prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<JoinFreeResponseddz, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(JoinFreeResponseddz cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private JoinFreeResponseddz result;
      
      private JoinFreeResponseddz PrepareBuilder() {
        if (resultIsReadOnly) {
          JoinFreeResponseddz original = result;
          result = new JoinFreeResponseddz();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override JoinFreeResponseddz MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.JoinFreeResponseddz.Descriptor; }
      }
      
      public override JoinFreeResponseddz DefaultInstanceForType {
        get { return global::gt_msg.JoinFreeResponseddz.DefaultInstance; }
      }
      
      public override JoinFreeResponseddz BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is JoinFreeResponseddz) {
          return MergeFrom((JoinFreeResponseddz) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(JoinFreeResponseddz other) {
        if (other == global::gt_msg.JoinFreeResponseddz.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        if (other.HasReconnectedUser) {
          ReconnectedUser = other.ReconnectedUser;
        }
        if (other.HasMinCoins) {
          MinCoins = other.MinCoins;
        }
        if (other.HasHasBasicLiving) {
          HasBasicLiving = other.HasBasicLiving;
        }
        if (other.HasBasicLivingAllTimes) {
          BasicLivingAllTimes = other.BasicLivingAllTimes;
        }
        if (other.HasBasicLivingUseTimes) {
          BasicLivingUseTimes = other.BasicLivingUseTimes;
        }
        if (other.HasBasicLivingCoins) {
          BasicLivingCoins = other.BasicLivingCoins;
        }
        if (other.HasRankRequest) {
          RankRequest = other.RankRequest;
        }
        if (other.HasRank) {
          Rank = other.Rank;
        }
        if (other.HasGameStats) {
          MergeGameStats(other.GameStats);
        }
        if (other.HasTablePassWord) {
          TablePassWord = other.TablePassWord;
        }
        if (other.HasItemType) {
          ItemType = other.ItemType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_joinFreeResponseddzFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _joinFreeResponseddzFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.code_, out unknown)) {
                result.hasCode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 16: {
              result.hasReconnectedUser = input.ReadBool(ref result.reconnectedUser_);
              break;
            }
            case 24: {
              result.hasMinCoins = input.ReadInt32(ref result.minCoins_);
              break;
            }
            case 32: {
              result.hasHasBasicLiving = input.ReadBool(ref result.hasBasicLiving_);
              break;
            }
            case 40: {
              result.hasBasicLivingAllTimes = input.ReadInt32(ref result.basicLivingAllTimes_);
              break;
            }
            case 48: {
              result.hasBasicLivingUseTimes = input.ReadInt32(ref result.basicLivingUseTimes_);
              break;
            }
            case 56: {
              result.hasBasicLivingCoins = input.ReadInt32(ref result.basicLivingCoins_);
              break;
            }
            case 64: {
              object unknown;
              if(input.ReadEnum(ref result.rankRequest_, out unknown)) {
                result.hasRankRequest = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(8, (ulong)(int)unknown);
              }
              break;
            }
            case 72: {
              object unknown;
              if(input.ReadEnum(ref result.rank_, out unknown)) {
                result.hasRank = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(9, (ulong)(int)unknown);
              }
              break;
            }
            case 82: {
              global::gt_msg.TableStatsddz.Builder subBuilder = global::gt_msg.TableStatsddz.CreateBuilder();
              if (result.hasGameStats) {
                subBuilder.MergeFrom(GameStats);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              GameStats = subBuilder.BuildPartial();
              break;
            }
            case 90: {
              result.hasTablePassWord = input.ReadString(ref result.tablePassWord_);
              break;
            }
            case 96: {
              result.hasItemType = input.ReadInt32(ref result.itemType_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
       get { return result.hasCode; }
      }
      public global::gt_msg.JoinFreeResponseddz.Types.JoinFreeResponseCode Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(global::gt_msg.JoinFreeResponseddz.Types.JoinFreeResponseCode value) {
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = global::gt_msg.JoinFreeResponseddz.Types.JoinFreeResponseCode.Ok;
        return this;
      }
      
      public bool HasReconnectedUser {
        get { return result.hasReconnectedUser; }
      }
      public bool ReconnectedUser {
        get { return result.ReconnectedUser; }
        set { SetReconnectedUser(value); }
      }
      public Builder SetReconnectedUser(bool value) {
        PrepareBuilder();
        result.hasReconnectedUser = true;
        result.reconnectedUser_ = value;
        return this;
      }
      public Builder ClearReconnectedUser() {
        PrepareBuilder();
        result.hasReconnectedUser = false;
        result.reconnectedUser_ = false;
        return this;
      }
      
      public bool HasMinCoins {
        get { return result.hasMinCoins; }
      }
      public int MinCoins {
        get { return result.MinCoins; }
        set { SetMinCoins(value); }
      }
      public Builder SetMinCoins(int value) {
        PrepareBuilder();
        result.hasMinCoins = true;
        result.minCoins_ = value;
        return this;
      }
      public Builder ClearMinCoins() {
        PrepareBuilder();
        result.hasMinCoins = false;
        result.minCoins_ = 0;
        return this;
      }
      
      public bool HasHasBasicLiving {
        get { return result.hasHasBasicLiving; }
      }
      public bool HasBasicLiving {
        get { return result.HasBasicLiving; }
        set { SetHasBasicLiving(value); }
      }
      public Builder SetHasBasicLiving(bool value) {
        PrepareBuilder();
        result.hasHasBasicLiving = true;
        result.hasBasicLiving_ = value;
        return this;
      }
      public Builder ClearHasBasicLiving() {
        PrepareBuilder();
        result.hasHasBasicLiving = false;
        result.hasBasicLiving_ = false;
        return this;
      }
      
      public bool HasBasicLivingAllTimes {
        get { return result.hasBasicLivingAllTimes; }
      }
      public int BasicLivingAllTimes {
        get { return result.BasicLivingAllTimes; }
        set { SetBasicLivingAllTimes(value); }
      }
      public Builder SetBasicLivingAllTimes(int value) {
        PrepareBuilder();
        result.hasBasicLivingAllTimes = true;
        result.basicLivingAllTimes_ = value;
        return this;
      }
      public Builder ClearBasicLivingAllTimes() {
        PrepareBuilder();
        result.hasBasicLivingAllTimes = false;
        result.basicLivingAllTimes_ = 0;
        return this;
      }
      
      public bool HasBasicLivingUseTimes {
        get { return result.hasBasicLivingUseTimes; }
      }
      public int BasicLivingUseTimes {
        get { return result.BasicLivingUseTimes; }
        set { SetBasicLivingUseTimes(value); }
      }
      public Builder SetBasicLivingUseTimes(int value) {
        PrepareBuilder();
        result.hasBasicLivingUseTimes = true;
        result.basicLivingUseTimes_ = value;
        return this;
      }
      public Builder ClearBasicLivingUseTimes() {
        PrepareBuilder();
        result.hasBasicLivingUseTimes = false;
        result.basicLivingUseTimes_ = 0;
        return this;
      }
      
      public bool HasBasicLivingCoins {
        get { return result.hasBasicLivingCoins; }
      }
      public int BasicLivingCoins {
        get { return result.BasicLivingCoins; }
        set { SetBasicLivingCoins(value); }
      }
      public Builder SetBasicLivingCoins(int value) {
        PrepareBuilder();
        result.hasBasicLivingCoins = true;
        result.basicLivingCoins_ = value;
        return this;
      }
      public Builder ClearBasicLivingCoins() {
        PrepareBuilder();
        result.hasBasicLivingCoins = false;
        result.basicLivingCoins_ = 0;
        return this;
      }
      
      public bool HasRankRequest {
       get { return result.hasRankRequest; }
      }
      public global::gt_msg.Rank RankRequest {
        get { return result.RankRequest; }
        set { SetRankRequest(value); }
      }
      public Builder SetRankRequest(global::gt_msg.Rank value) {
        PrepareBuilder();
        result.hasRankRequest = true;
        result.rankRequest_ = value;
        return this;
      }
      public Builder ClearRankRequest() {
        PrepareBuilder();
        result.hasRankRequest = false;
        result.rankRequest_ = global::gt_msg.Rank.LV0;
        return this;
      }
      
      public bool HasRank {
       get { return result.hasRank; }
      }
      public global::gt_msg.Rank Rank {
        get { return result.Rank; }
        set { SetRank(value); }
      }
      public Builder SetRank(global::gt_msg.Rank value) {
        PrepareBuilder();
        result.hasRank = true;
        result.rank_ = value;
        return this;
      }
      public Builder ClearRank() {
        PrepareBuilder();
        result.hasRank = false;
        result.rank_ = global::gt_msg.Rank.LV0;
        return this;
      }
      
      public bool HasGameStats {
       get { return result.hasGameStats; }
      }
      public global::gt_msg.TableStatsddz GameStats {
        get { return result.GameStats; }
        set { SetGameStats(value); }
      }
      public Builder SetGameStats(global::gt_msg.TableStatsddz value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasGameStats = true;
        result.gameStats_ = value;
        return this;
      }
      public Builder SetGameStats(global::gt_msg.TableStatsddz.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasGameStats = true;
        result.gameStats_ = builderForValue.Build();
        return this;
      }
      public Builder MergeGameStats(global::gt_msg.TableStatsddz value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasGameStats &&
            result.gameStats_ != global::gt_msg.TableStatsddz.DefaultInstance) {
            result.gameStats_ = global::gt_msg.TableStatsddz.CreateBuilder(result.gameStats_).MergeFrom(value).BuildPartial();
        } else {
          result.gameStats_ = value;
        }
        result.hasGameStats = true;
        return this;
      }
      public Builder ClearGameStats() {
        PrepareBuilder();
        result.hasGameStats = false;
        result.gameStats_ = null;
        return this;
      }
      
      public bool HasTablePassWord {
        get { return result.hasTablePassWord; }
      }
      public string TablePassWord {
        get { return result.TablePassWord; }
        set { SetTablePassWord(value); }
      }
      public Builder SetTablePassWord(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasTablePassWord = true;
        result.tablePassWord_ = value;
        return this;
      }
      public Builder ClearTablePassWord() {
        PrepareBuilder();
        result.hasTablePassWord = false;
        result.tablePassWord_ = "";
        return this;
      }
      
      public bool HasItemType {
        get { return result.hasItemType; }
      }
      public int ItemType {
        get { return result.ItemType; }
        set { SetItemType(value); }
      }
      public Builder SetItemType(int value) {
        PrepareBuilder();
        result.hasItemType = true;
        result.itemType_ = value;
        return this;
      }
      public Builder ClearItemType() {
        PrepareBuilder();
        result.hasItemType = false;
        result.itemType_ = 0;
        return this;
      }
    }
    static JoinFreeResponseddz() {
      object.ReferenceEquals(global::gt_msg.GtDdz.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ActionRequestddz : pb::GeneratedMessage<ActionRequestddz, ActionRequestddz.Builder> {
    private ActionRequestddz() { }
    private static readonly ActionRequestddz defaultInstance = new ActionRequestddz().MakeReadOnly();
    private static readonly string[] _actionRequestddzFieldNames = new string[] { "CardType", "Cards", "PayNumMin", "code" };
    private static readonly uint[] _actionRequestddzFieldTags = new uint[] { 32, 26, 16, 8 };
    public static ActionRequestddz DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ActionRequestddz DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ActionRequestddz ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_ActionRequestddz__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ActionRequestddz, ActionRequestddz.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_ActionRequestddz__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum ActionCode {
        MakeHost = 0,
        PlayCards = 1,
        GiveUp = 2,
      }
      
    }
    #endregion
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private global::gt_msg.ActionRequestddz.Types.ActionCode code_ = global::gt_msg.ActionRequestddz.Types.ActionCode.MakeHost;
    public bool HasCode {
      get { return hasCode; }
    }
    public global::gt_msg.ActionRequestddz.Types.ActionCode Code {
      get { return code_; }
    }
    
    public const int PayNumMinFieldNumber = 2;
    private bool hasPayNumMin;
    private int payNumMin_;
    public bool HasPayNumMin {
      get { return hasPayNumMin; }
    }
    public int PayNumMin {
      get { return payNumMin_; }
    }
    
    public const int CardsFieldNumber = 3;
    private int cardsMemoizedSerializedSize;
    private pbc::PopsicleList<int> cards_ = new pbc::PopsicleList<int>();
    public scg::IList<int> CardsList {
      get { return pbc::Lists.AsReadOnly(cards_); }
    }
    public int CardsCount {
      get { return cards_.Count; }
    }
    public int GetCards(int index) {
      return cards_[index];
    }
    
    public const int CardTypeFieldNumber = 4;
    private bool hasCardType;
    private global::gt_msg.CardsTypeddz cardType_ = global::gt_msg.CardsTypeddz.Rddz;
    public bool HasCardType {
      get { return hasCardType; }
    }
    public global::gt_msg.CardsTypeddz CardType {
      get { return cardType_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _actionRequestddzFieldNames;
      if (hasCode) {
        output.WriteEnum(1, field_names[3], (int) Code, Code);
      }
      if (hasPayNumMin) {
        output.WriteInt32(2, field_names[2], PayNumMin);
      }
      if (cards_.Count > 0) {
        output.WritePackedInt32Array(3, field_names[1], cardsMemoizedSerializedSize, cards_);
      }
      if (hasCardType) {
        output.WriteEnum(4, field_names[0], (int) CardType, CardType);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCode) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Code);
      }
      if (hasPayNumMin) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, PayNumMin);
      }
      {
        int dataSize = 0;
        foreach (int element in CardsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        if (cards_.Count != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
        }
        cardsMemoizedSerializedSize = dataSize;
      }
      if (hasCardType) {
        size += pb::CodedOutputStream.ComputeEnumSize(4, (int) CardType);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ActionRequestddz ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ActionRequestddz ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ActionRequestddz ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ActionRequestddz ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ActionRequestddz ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ActionRequestddz ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ActionRequestddz ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ActionRequestddz ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ActionRequestddz ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ActionRequestddz ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ActionRequestddz MakeReadOnly() {
      cards_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ActionRequestddz prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ActionRequestddz, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ActionRequestddz cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ActionRequestddz result;
      
      private ActionRequestddz PrepareBuilder() {
        if (resultIsReadOnly) {
          ActionRequestddz original = result;
          result = new ActionRequestddz();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ActionRequestddz MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.ActionRequestddz.Descriptor; }
      }
      
      public override ActionRequestddz DefaultInstanceForType {
        get { return global::gt_msg.ActionRequestddz.DefaultInstance; }
      }
      
      public override ActionRequestddz BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ActionRequestddz) {
          return MergeFrom((ActionRequestddz) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ActionRequestddz other) {
        if (other == global::gt_msg.ActionRequestddz.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        if (other.HasPayNumMin) {
          PayNumMin = other.PayNumMin;
        }
        if (other.cards_.Count != 0) {
          result.cards_.Add(other.cards_);
        }
        if (other.HasCardType) {
          CardType = other.CardType;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_actionRequestddzFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _actionRequestddzFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.code_, out unknown)) {
                result.hasCode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 16: {
              result.hasPayNumMin = input.ReadInt32(ref result.payNumMin_);
              break;
            }
            case 26:
            case 24: {
              input.ReadInt32Array(tag, field_name, result.cards_);
              break;
            }
            case 32: {
              object unknown;
              if(input.ReadEnum(ref result.cardType_, out unknown)) {
                result.hasCardType = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
       get { return result.hasCode; }
      }
      public global::gt_msg.ActionRequestddz.Types.ActionCode Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(global::gt_msg.ActionRequestddz.Types.ActionCode value) {
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = global::gt_msg.ActionRequestddz.Types.ActionCode.MakeHost;
        return this;
      }
      
      public bool HasPayNumMin {
        get { return result.hasPayNumMin; }
      }
      public int PayNumMin {
        get { return result.PayNumMin; }
        set { SetPayNumMin(value); }
      }
      public Builder SetPayNumMin(int value) {
        PrepareBuilder();
        result.hasPayNumMin = true;
        result.payNumMin_ = value;
        return this;
      }
      public Builder ClearPayNumMin() {
        PrepareBuilder();
        result.hasPayNumMin = false;
        result.payNumMin_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> CardsList {
        get { return PrepareBuilder().cards_; }
      }
      public int CardsCount {
        get { return result.CardsCount; }
      }
      public int GetCards(int index) {
        return result.GetCards(index);
      }
      public Builder SetCards(int index, int value) {
        PrepareBuilder();
        result.cards_[index] = value;
        return this;
      }
      public Builder AddCards(int value) {
        PrepareBuilder();
        result.cards_.Add(value);
        return this;
      }
      public Builder AddRangeCards(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.cards_.Add(values);
        return this;
      }
      public Builder ClearCards() {
        PrepareBuilder();
        result.cards_.Clear();
        return this;
      }
      
      public bool HasCardType {
       get { return result.hasCardType; }
      }
      public global::gt_msg.CardsTypeddz CardType {
        get { return result.CardType; }
        set { SetCardType(value); }
      }
      public Builder SetCardType(global::gt_msg.CardsTypeddz value) {
        PrepareBuilder();
        result.hasCardType = true;
        result.cardType_ = value;
        return this;
      }
      public Builder ClearCardType() {
        PrepareBuilder();
        result.hasCardType = false;
        result.cardType_ = global::gt_msg.CardsTypeddz.Rddz;
        return this;
      }
    }
    static ActionRequestddz() {
      object.ReferenceEquals(global::gt_msg.GtDdz.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ActionResponseddz : pb::GeneratedMessage<ActionResponseddz, ActionResponseddz.Builder> {
    private ActionResponseddz() { }
    private static readonly ActionResponseddz defaultInstance = new ActionResponseddz().MakeReadOnly();
    private static readonly string[] _actionResponseddzFieldNames = new string[] { "code" };
    private static readonly uint[] _actionResponseddzFieldTags = new uint[] { 8 };
    public static ActionResponseddz DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ActionResponseddz DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ActionResponseddz ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_ActionResponseddz__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ActionResponseddz, ActionResponseddz.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_ActionResponseddz__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum ActionResponseCode {
        OK = 0,
        CannotAction = 1,
        ErrType = 2,
        OtherType = 3,
      }
      
    }
    #endregion
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private global::gt_msg.ActionResponseddz.Types.ActionResponseCode code_ = global::gt_msg.ActionResponseddz.Types.ActionResponseCode.OK;
    public bool HasCode {
      get { return hasCode; }
    }
    public global::gt_msg.ActionResponseddz.Types.ActionResponseCode Code {
      get { return code_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _actionResponseddzFieldNames;
      if (hasCode) {
        output.WriteEnum(1, field_names[0], (int) Code, Code);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCode) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Code);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ActionResponseddz ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ActionResponseddz ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ActionResponseddz ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ActionResponseddz ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ActionResponseddz ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ActionResponseddz ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ActionResponseddz ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ActionResponseddz ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ActionResponseddz ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ActionResponseddz ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ActionResponseddz MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ActionResponseddz prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ActionResponseddz, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ActionResponseddz cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ActionResponseddz result;
      
      private ActionResponseddz PrepareBuilder() {
        if (resultIsReadOnly) {
          ActionResponseddz original = result;
          result = new ActionResponseddz();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ActionResponseddz MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.ActionResponseddz.Descriptor; }
      }
      
      public override ActionResponseddz DefaultInstanceForType {
        get { return global::gt_msg.ActionResponseddz.DefaultInstance; }
      }
      
      public override ActionResponseddz BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ActionResponseddz) {
          return MergeFrom((ActionResponseddz) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ActionResponseddz other) {
        if (other == global::gt_msg.ActionResponseddz.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_actionResponseddzFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _actionResponseddzFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.code_, out unknown)) {
                result.hasCode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
       get { return result.hasCode; }
      }
      public global::gt_msg.ActionResponseddz.Types.ActionResponseCode Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(global::gt_msg.ActionResponseddz.Types.ActionResponseCode value) {
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = global::gt_msg.ActionResponseddz.Types.ActionResponseCode.OK;
        return this;
      }
    }
    static ActionResponseddz() {
      object.ReferenceEquals(global::gt_msg.GtDdz.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TableUserStatsddz : pb::GeneratedMessage<TableUserStatsddz, TableUserStatsddz.Builder> {
    private TableUserStatsddz() { }
    private static readonly TableUserStatsddz defaultInstance = new TableUserStatsddz().MakeReadOnly();
    private static readonly string[] _tableUserStatsddzFieldNames = new string[] { "HandCards", "IsHost", "LeftCards", "NewActionList", "NowSeat", "OldActionList", "PlayState", "State", "TG", "user_info" };
    private static readonly uint[] _tableUserStatsddzFieldTags = new uint[] { 34, 40, 48, 74, 16, 66, 80, 24, 56, 10 };
    public static TableUserStatsddz DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TableUserStatsddz DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TableUserStatsddz ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_TableUserStatsddz__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TableUserStatsddz, TableUserStatsddz.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_TableUserStatsddz__FieldAccessorTable; }
    }
    
    public const int UserInfoFieldNumber = 1;
    private bool hasUserInfo;
    private global::gt_msg.User userInfo_;
    public bool HasUserInfo {
      get { return hasUserInfo; }
    }
    public global::gt_msg.User UserInfo {
      get { return userInfo_ ?? global::gt_msg.User.DefaultInstance; }
    }
    
    public const int NowSeatFieldNumber = 2;
    private bool hasNowSeat;
    private int nowSeat_;
    public bool HasNowSeat {
      get { return hasNowSeat; }
    }
    public int NowSeat {
      get { return nowSeat_; }
    }
    
    public const int StateFieldNumber = 3;
    private bool hasState;
    private int state_;
    public bool HasState {
      get { return hasState; }
    }
    public int State {
      get { return state_; }
    }
    
    public const int HandCardsFieldNumber = 4;
    private int handCardsMemoizedSerializedSize;
    private pbc::PopsicleList<int> handCards_ = new pbc::PopsicleList<int>();
    public scg::IList<int> HandCardsList {
      get { return pbc::Lists.AsReadOnly(handCards_); }
    }
    public int HandCardsCount {
      get { return handCards_.Count; }
    }
    public int GetHandCards(int index) {
      return handCards_[index];
    }
    
    public const int IsHostFieldNumber = 5;
    private bool hasIsHost;
    private int isHost_;
    public bool HasIsHost {
      get { return hasIsHost; }
    }
    public int IsHost {
      get { return isHost_; }
    }
    
    public const int LeftCardsFieldNumber = 6;
    private bool hasLeftCards;
    private int leftCards_;
    public bool HasLeftCards {
      get { return hasLeftCards; }
    }
    public int LeftCards {
      get { return leftCards_; }
    }
    
    public const int TGFieldNumber = 7;
    private bool hasTG;
    private int tG_;
    public bool HasTG {
      get { return hasTG; }
    }
    public int TG {
      get { return tG_; }
    }
    
    public const int OldActionListFieldNumber = 8;
    private pbc::PopsicleList<global::gt_msg.ActionRequestddz> oldActionList_ = new pbc::PopsicleList<global::gt_msg.ActionRequestddz>();
    public scg::IList<global::gt_msg.ActionRequestddz> OldActionListList {
      get { return oldActionList_; }
    }
    public int OldActionListCount {
      get { return oldActionList_.Count; }
    }
    public global::gt_msg.ActionRequestddz GetOldActionList(int index) {
      return oldActionList_[index];
    }
    
    public const int NewActionListFieldNumber = 9;
    private pbc::PopsicleList<global::gt_msg.ActionRequestddz> newActionList_ = new pbc::PopsicleList<global::gt_msg.ActionRequestddz>();
    public scg::IList<global::gt_msg.ActionRequestddz> NewActionListList {
      get { return newActionList_; }
    }
    public int NewActionListCount {
      get { return newActionList_.Count; }
    }
    public global::gt_msg.ActionRequestddz GetNewActionList(int index) {
      return newActionList_[index];
    }
    
    public const int PlayStateFieldNumber = 10;
    private bool hasPlayState;
    private int playState_;
    public bool HasPlayState {
      get { return hasPlayState; }
    }
    public int PlayState {
      get { return playState_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUserInfo) return false;
        if (!hasNowSeat) return false;
        if (!UserInfo.IsInitialized) return false;
        foreach (global::gt_msg.ActionRequestddz element in OldActionListList) {
          if (!element.IsInitialized) return false;
        }
        foreach (global::gt_msg.ActionRequestddz element in NewActionListList) {
          if (!element.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _tableUserStatsddzFieldNames;
      if (hasUserInfo) {
        output.WriteMessage(1, field_names[9], UserInfo);
      }
      if (hasNowSeat) {
        output.WriteInt32(2, field_names[4], NowSeat);
      }
      if (hasState) {
        output.WriteInt32(3, field_names[7], State);
      }
      if (handCards_.Count > 0) {
        output.WritePackedInt32Array(4, field_names[0], handCardsMemoizedSerializedSize, handCards_);
      }
      if (hasIsHost) {
        output.WriteInt32(5, field_names[1], IsHost);
      }
      if (hasLeftCards) {
        output.WriteInt32(6, field_names[2], LeftCards);
      }
      if (hasTG) {
        output.WriteInt32(7, field_names[8], TG);
      }
      if (oldActionList_.Count > 0) {
        output.WriteMessageArray(8, field_names[5], oldActionList_);
      }
      if (newActionList_.Count > 0) {
        output.WriteMessageArray(9, field_names[3], newActionList_);
      }
      if (hasPlayState) {
        output.WriteInt32(10, field_names[6], PlayState);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUserInfo) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, UserInfo);
      }
      if (hasNowSeat) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, NowSeat);
      }
      if (hasState) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, State);
      }
      {
        int dataSize = 0;
        foreach (int element in HandCardsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        if (handCards_.Count != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
        }
        handCardsMemoizedSerializedSize = dataSize;
      }
      if (hasIsHost) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, IsHost);
      }
      if (hasLeftCards) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, LeftCards);
      }
      if (hasTG) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, TG);
      }
      foreach (global::gt_msg.ActionRequestddz element in OldActionListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(8, element);
      }
      foreach (global::gt_msg.ActionRequestddz element in NewActionListList) {
        size += pb::CodedOutputStream.ComputeMessageSize(9, element);
      }
      if (hasPlayState) {
        size += pb::CodedOutputStream.ComputeInt32Size(10, PlayState);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static TableUserStatsddz ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TableUserStatsddz ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TableUserStatsddz ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TableUserStatsddz ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TableUserStatsddz ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TableUserStatsddz ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TableUserStatsddz ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TableUserStatsddz ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TableUserStatsddz ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TableUserStatsddz ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TableUserStatsddz MakeReadOnly() {
      handCards_.MakeReadOnly();
      oldActionList_.MakeReadOnly();
      newActionList_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TableUserStatsddz prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TableUserStatsddz, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TableUserStatsddz cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TableUserStatsddz result;
      
      private TableUserStatsddz PrepareBuilder() {
        if (resultIsReadOnly) {
          TableUserStatsddz original = result;
          result = new TableUserStatsddz();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TableUserStatsddz MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.TableUserStatsddz.Descriptor; }
      }
      
      public override TableUserStatsddz DefaultInstanceForType {
        get { return global::gt_msg.TableUserStatsddz.DefaultInstance; }
      }
      
      public override TableUserStatsddz BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TableUserStatsddz) {
          return MergeFrom((TableUserStatsddz) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TableUserStatsddz other) {
        if (other == global::gt_msg.TableUserStatsddz.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUserInfo) {
          MergeUserInfo(other.UserInfo);
        }
        if (other.HasNowSeat) {
          NowSeat = other.NowSeat;
        }
        if (other.HasState) {
          State = other.State;
        }
        if (other.handCards_.Count != 0) {
          result.handCards_.Add(other.handCards_);
        }
        if (other.HasIsHost) {
          IsHost = other.IsHost;
        }
        if (other.HasLeftCards) {
          LeftCards = other.LeftCards;
        }
        if (other.HasTG) {
          TG = other.TG;
        }
        if (other.oldActionList_.Count != 0) {
          result.oldActionList_.Add(other.oldActionList_);
        }
        if (other.newActionList_.Count != 0) {
          result.newActionList_.Add(other.newActionList_);
        }
        if (other.HasPlayState) {
          PlayState = other.PlayState;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tableUserStatsddzFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tableUserStatsddzFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::gt_msg.User.Builder subBuilder = global::gt_msg.User.CreateBuilder();
              if (result.hasUserInfo) {
                subBuilder.MergeFrom(UserInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserInfo = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasNowSeat = input.ReadInt32(ref result.nowSeat_);
              break;
            }
            case 24: {
              result.hasState = input.ReadInt32(ref result.state_);
              break;
            }
            case 34:
            case 32: {
              input.ReadInt32Array(tag, field_name, result.handCards_);
              break;
            }
            case 40: {
              result.hasIsHost = input.ReadInt32(ref result.isHost_);
              break;
            }
            case 48: {
              result.hasLeftCards = input.ReadInt32(ref result.leftCards_);
              break;
            }
            case 56: {
              result.hasTG = input.ReadInt32(ref result.tG_);
              break;
            }
            case 66: {
              input.ReadMessageArray(tag, field_name, result.oldActionList_, global::gt_msg.ActionRequestddz.DefaultInstance, extensionRegistry);
              break;
            }
            case 74: {
              input.ReadMessageArray(tag, field_name, result.newActionList_, global::gt_msg.ActionRequestddz.DefaultInstance, extensionRegistry);
              break;
            }
            case 80: {
              result.hasPlayState = input.ReadInt32(ref result.playState_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUserInfo {
       get { return result.hasUserInfo; }
      }
      public global::gt_msg.User UserInfo {
        get { return result.UserInfo; }
        set { SetUserInfo(value); }
      }
      public Builder SetUserInfo(global::gt_msg.User value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserInfo = true;
        result.userInfo_ = value;
        return this;
      }
      public Builder SetUserInfo(global::gt_msg.User.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserInfo = true;
        result.userInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserInfo(global::gt_msg.User value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserInfo &&
            result.userInfo_ != global::gt_msg.User.DefaultInstance) {
            result.userInfo_ = global::gt_msg.User.CreateBuilder(result.userInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.userInfo_ = value;
        }
        result.hasUserInfo = true;
        return this;
      }
      public Builder ClearUserInfo() {
        PrepareBuilder();
        result.hasUserInfo = false;
        result.userInfo_ = null;
        return this;
      }
      
      public bool HasNowSeat {
        get { return result.hasNowSeat; }
      }
      public int NowSeat {
        get { return result.NowSeat; }
        set { SetNowSeat(value); }
      }
      public Builder SetNowSeat(int value) {
        PrepareBuilder();
        result.hasNowSeat = true;
        result.nowSeat_ = value;
        return this;
      }
      public Builder ClearNowSeat() {
        PrepareBuilder();
        result.hasNowSeat = false;
        result.nowSeat_ = 0;
        return this;
      }
      
      public bool HasState {
        get { return result.hasState; }
      }
      public int State {
        get { return result.State; }
        set { SetState(value); }
      }
      public Builder SetState(int value) {
        PrepareBuilder();
        result.hasState = true;
        result.state_ = value;
        return this;
      }
      public Builder ClearState() {
        PrepareBuilder();
        result.hasState = false;
        result.state_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> HandCardsList {
        get { return PrepareBuilder().handCards_; }
      }
      public int HandCardsCount {
        get { return result.HandCardsCount; }
      }
      public int GetHandCards(int index) {
        return result.GetHandCards(index);
      }
      public Builder SetHandCards(int index, int value) {
        PrepareBuilder();
        result.handCards_[index] = value;
        return this;
      }
      public Builder AddHandCards(int value) {
        PrepareBuilder();
        result.handCards_.Add(value);
        return this;
      }
      public Builder AddRangeHandCards(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.handCards_.Add(values);
        return this;
      }
      public Builder ClearHandCards() {
        PrepareBuilder();
        result.handCards_.Clear();
        return this;
      }
      
      public bool HasIsHost {
        get { return result.hasIsHost; }
      }
      public int IsHost {
        get { return result.IsHost; }
        set { SetIsHost(value); }
      }
      public Builder SetIsHost(int value) {
        PrepareBuilder();
        result.hasIsHost = true;
        result.isHost_ = value;
        return this;
      }
      public Builder ClearIsHost() {
        PrepareBuilder();
        result.hasIsHost = false;
        result.isHost_ = 0;
        return this;
      }
      
      public bool HasLeftCards {
        get { return result.hasLeftCards; }
      }
      public int LeftCards {
        get { return result.LeftCards; }
        set { SetLeftCards(value); }
      }
      public Builder SetLeftCards(int value) {
        PrepareBuilder();
        result.hasLeftCards = true;
        result.leftCards_ = value;
        return this;
      }
      public Builder ClearLeftCards() {
        PrepareBuilder();
        result.hasLeftCards = false;
        result.leftCards_ = 0;
        return this;
      }
      
      public bool HasTG {
        get { return result.hasTG; }
      }
      public int TG {
        get { return result.TG; }
        set { SetTG(value); }
      }
      public Builder SetTG(int value) {
        PrepareBuilder();
        result.hasTG = true;
        result.tG_ = value;
        return this;
      }
      public Builder ClearTG() {
        PrepareBuilder();
        result.hasTG = false;
        result.tG_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<global::gt_msg.ActionRequestddz> OldActionListList {
        get { return PrepareBuilder().oldActionList_; }
      }
      public int OldActionListCount {
        get { return result.OldActionListCount; }
      }
      public global::gt_msg.ActionRequestddz GetOldActionList(int index) {
        return result.GetOldActionList(index);
      }
      public Builder SetOldActionList(int index, global::gt_msg.ActionRequestddz value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.oldActionList_[index] = value;
        return this;
      }
      public Builder SetOldActionList(int index, global::gt_msg.ActionRequestddz.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.oldActionList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddOldActionList(global::gt_msg.ActionRequestddz value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.oldActionList_.Add(value);
        return this;
      }
      public Builder AddOldActionList(global::gt_msg.ActionRequestddz.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.oldActionList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeOldActionList(scg::IEnumerable<global::gt_msg.ActionRequestddz> values) {
        PrepareBuilder();
        result.oldActionList_.Add(values);
        return this;
      }
      public Builder ClearOldActionList() {
        PrepareBuilder();
        result.oldActionList_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<global::gt_msg.ActionRequestddz> NewActionListList {
        get { return PrepareBuilder().newActionList_; }
      }
      public int NewActionListCount {
        get { return result.NewActionListCount; }
      }
      public global::gt_msg.ActionRequestddz GetNewActionList(int index) {
        return result.GetNewActionList(index);
      }
      public Builder SetNewActionList(int index, global::gt_msg.ActionRequestddz value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.newActionList_[index] = value;
        return this;
      }
      public Builder SetNewActionList(int index, global::gt_msg.ActionRequestddz.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.newActionList_[index] = builderForValue.Build();
        return this;
      }
      public Builder AddNewActionList(global::gt_msg.ActionRequestddz value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.newActionList_.Add(value);
        return this;
      }
      public Builder AddNewActionList(global::gt_msg.ActionRequestddz.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.newActionList_.Add(builderForValue.Build());
        return this;
      }
      public Builder AddRangeNewActionList(scg::IEnumerable<global::gt_msg.ActionRequestddz> values) {
        PrepareBuilder();
        result.newActionList_.Add(values);
        return this;
      }
      public Builder ClearNewActionList() {
        PrepareBuilder();
        result.newActionList_.Clear();
        return this;
      }
      
      public bool HasPlayState {
        get { return result.hasPlayState; }
      }
      public int PlayState {
        get { return result.PlayState; }
        set { SetPlayState(value); }
      }
      public Builder SetPlayState(int value) {
        PrepareBuilder();
        result.hasPlayState = true;
        result.playState_ = value;
        return this;
      }
      public Builder ClearPlayState() {
        PrepareBuilder();
        result.hasPlayState = false;
        result.playState_ = 0;
        return this;
      }
    }
    static TableUserStatsddz() {
      object.ReferenceEquals(global::gt_msg.GtDdz.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TableStatsddz : pb::GeneratedMessage<TableStatsddz, TableStatsddz.Builder> {
    private TableStatsddz() { }
    private static readonly TableStatsddz defaultInstance = new TableStatsddz().MakeReadOnly();
    private static readonly string[] _tableStatsddzFieldNames = new string[] { "B", "BaseCards", "BasePoint", "LastPlayCardsSeat", "MakeRate", "MySeat", "NextActionTimeOut", "NowSeat", "SeatUser1", "SeatUser2", "SeatUser3", "Stage", "Step", "TableID", "TableRate", "rank", "rule" };
    private static readonly uint[] _tableStatsddzFieldTags = new uint[] { 128, 138, 72, 56, 112, 64, 48, 82, 90, 98, 106, 16, 40, 8, 120, 24, 32 };
    public static TableStatsddz DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TableStatsddz DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TableStatsddz ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_TableStatsddz__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TableStatsddz, TableStatsddz.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_TableStatsddz__FieldAccessorTable; }
    }
    
    public const int TableIDFieldNumber = 1;
    private bool hasTableID;
    private int tableID_;
    public bool HasTableID {
      get { return hasTableID; }
    }
    public int TableID {
      get { return tableID_; }
    }
    
    public const int StageFieldNumber = 2;
    private bool hasStage;
    private int stage_;
    public bool HasStage {
      get { return hasStage; }
    }
    public int Stage {
      get { return stage_; }
    }
    
    public const int RankFieldNumber = 3;
    private bool hasRank;
    private global::gt_msg.Rank rank_ = global::gt_msg.Rank.LV0;
    public bool HasRank {
      get { return hasRank; }
    }
    public global::gt_msg.Rank Rank {
      get { return rank_; }
    }
    
    public const int RuleFieldNumber = 4;
    private bool hasRule;
    private global::gt_msg.Rule rule_ = global::gt_msg.Rule.RuleNormal;
    public bool HasRule {
      get { return hasRule; }
    }
    public global::gt_msg.Rule Rule {
      get { return rule_; }
    }
    
    public const int StepFieldNumber = 5;
    private bool hasStep;
    private int step_;
    public bool HasStep {
      get { return hasStep; }
    }
    public int Step {
      get { return step_; }
    }
    
    public const int NextActionTimeOutFieldNumber = 6;
    private bool hasNextActionTimeOut;
    private int nextActionTimeOut_;
    public bool HasNextActionTimeOut {
      get { return hasNextActionTimeOut; }
    }
    public int NextActionTimeOut {
      get { return nextActionTimeOut_; }
    }
    
    public const int LastPlayCardsSeatFieldNumber = 7;
    private bool hasLastPlayCardsSeat;
    private int lastPlayCardsSeat_;
    public bool HasLastPlayCardsSeat {
      get { return hasLastPlayCardsSeat; }
    }
    public int LastPlayCardsSeat {
      get { return lastPlayCardsSeat_; }
    }
    
    public const int MySeatFieldNumber = 8;
    private bool hasMySeat;
    private int mySeat_;
    public bool HasMySeat {
      get { return hasMySeat; }
    }
    public int MySeat {
      get { return mySeat_; }
    }
    
    public const int BasePointFieldNumber = 9;
    private bool hasBasePoint;
    private int basePoint_;
    public bool HasBasePoint {
      get { return hasBasePoint; }
    }
    public int BasePoint {
      get { return basePoint_; }
    }
    
    public const int NowSeatFieldNumber = 10;
    private int nowSeatMemoizedSerializedSize;
    private pbc::PopsicleList<int> nowSeat_ = new pbc::PopsicleList<int>();
    public scg::IList<int> NowSeatList {
      get { return pbc::Lists.AsReadOnly(nowSeat_); }
    }
    public int NowSeatCount {
      get { return nowSeat_.Count; }
    }
    public int GetNowSeat(int index) {
      return nowSeat_[index];
    }
    
    public const int SeatUser1FieldNumber = 11;
    private bool hasSeatUser1;
    private global::gt_msg.TableUserStatsddz seatUser1_;
    public bool HasSeatUser1 {
      get { return hasSeatUser1; }
    }
    public global::gt_msg.TableUserStatsddz SeatUser1 {
      get { return seatUser1_ ?? global::gt_msg.TableUserStatsddz.DefaultInstance; }
    }
    
    public const int SeatUser2FieldNumber = 12;
    private bool hasSeatUser2;
    private global::gt_msg.TableUserStatsddz seatUser2_;
    public bool HasSeatUser2 {
      get { return hasSeatUser2; }
    }
    public global::gt_msg.TableUserStatsddz SeatUser2 {
      get { return seatUser2_ ?? global::gt_msg.TableUserStatsddz.DefaultInstance; }
    }
    
    public const int SeatUser3FieldNumber = 13;
    private bool hasSeatUser3;
    private global::gt_msg.TableUserStatsddz seatUser3_;
    public bool HasSeatUser3 {
      get { return hasSeatUser3; }
    }
    public global::gt_msg.TableUserStatsddz SeatUser3 {
      get { return seatUser3_ ?? global::gt_msg.TableUserStatsddz.DefaultInstance; }
    }
    
    public const int MakeRateFieldNumber = 14;
    private bool hasMakeRate;
    private int makeRate_;
    public bool HasMakeRate {
      get { return hasMakeRate; }
    }
    public int MakeRate {
      get { return makeRate_; }
    }
    
    public const int TableRateFieldNumber = 15;
    private bool hasTableRate;
    private int tableRate_;
    public bool HasTableRate {
      get { return hasTableRate; }
    }
    public int TableRate {
      get { return tableRate_; }
    }
    
    public const int BFieldNumber = 16;
    private bool hasB;
    private int b_;
    public bool HasB {
      get { return hasB; }
    }
    public int B {
      get { return b_; }
    }
    
    public const int BaseCardsFieldNumber = 17;
    private int baseCardsMemoizedSerializedSize;
    private pbc::PopsicleList<int> baseCards_ = new pbc::PopsicleList<int>();
    public scg::IList<int> BaseCardsList {
      get { return pbc::Lists.AsReadOnly(baseCards_); }
    }
    public int BaseCardsCount {
      get { return baseCards_.Count; }
    }
    public int GetBaseCards(int index) {
      return baseCards_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTableID) return false;
        if (!hasStage) return false;
        if (!hasRank) return false;
        if (!hasRule) return false;
        if (!hasStep) return false;
        if (!hasNextActionTimeOut) return false;
        if (!hasLastPlayCardsSeat) return false;
        if (!hasMySeat) return false;
        if (!hasBasePoint) return false;
        if (!hasMakeRate) return false;
        if (!hasTableRate) return false;
        if (!hasB) return false;
        if (HasSeatUser1) {
          if (!SeatUser1.IsInitialized) return false;
        }
        if (HasSeatUser2) {
          if (!SeatUser2.IsInitialized) return false;
        }
        if (HasSeatUser3) {
          if (!SeatUser3.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _tableStatsddzFieldNames;
      if (hasTableID) {
        output.WriteInt32(1, field_names[13], TableID);
      }
      if (hasStage) {
        output.WriteInt32(2, field_names[11], Stage);
      }
      if (hasRank) {
        output.WriteEnum(3, field_names[15], (int) Rank, Rank);
      }
      if (hasRule) {
        output.WriteEnum(4, field_names[16], (int) Rule, Rule);
      }
      if (hasStep) {
        output.WriteInt32(5, field_names[12], Step);
      }
      if (hasNextActionTimeOut) {
        output.WriteInt32(6, field_names[6], NextActionTimeOut);
      }
      if (hasLastPlayCardsSeat) {
        output.WriteInt32(7, field_names[3], LastPlayCardsSeat);
      }
      if (hasMySeat) {
        output.WriteInt32(8, field_names[5], MySeat);
      }
      if (hasBasePoint) {
        output.WriteInt32(9, field_names[2], BasePoint);
      }
      if (nowSeat_.Count > 0) {
        output.WritePackedInt32Array(10, field_names[7], nowSeatMemoizedSerializedSize, nowSeat_);
      }
      if (hasSeatUser1) {
        output.WriteMessage(11, field_names[8], SeatUser1);
      }
      if (hasSeatUser2) {
        output.WriteMessage(12, field_names[9], SeatUser2);
      }
      if (hasSeatUser3) {
        output.WriteMessage(13, field_names[10], SeatUser3);
      }
      if (hasMakeRate) {
        output.WriteInt32(14, field_names[4], MakeRate);
      }
      if (hasTableRate) {
        output.WriteInt32(15, field_names[14], TableRate);
      }
      if (hasB) {
        output.WriteInt32(16, field_names[0], B);
      }
      if (baseCards_.Count > 0) {
        output.WritePackedInt32Array(17, field_names[1], baseCardsMemoizedSerializedSize, baseCards_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTableID) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, TableID);
      }
      if (hasStage) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Stage);
      }
      if (hasRank) {
        size += pb::CodedOutputStream.ComputeEnumSize(3, (int) Rank);
      }
      if (hasRule) {
        size += pb::CodedOutputStream.ComputeEnumSize(4, (int) Rule);
      }
      if (hasStep) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, Step);
      }
      if (hasNextActionTimeOut) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, NextActionTimeOut);
      }
      if (hasLastPlayCardsSeat) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, LastPlayCardsSeat);
      }
      if (hasMySeat) {
        size += pb::CodedOutputStream.ComputeInt32Size(8, MySeat);
      }
      if (hasBasePoint) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, BasePoint);
      }
      {
        int dataSize = 0;
        foreach (int element in NowSeatList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        if (nowSeat_.Count != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
        }
        nowSeatMemoizedSerializedSize = dataSize;
      }
      if (hasSeatUser1) {
        size += pb::CodedOutputStream.ComputeMessageSize(11, SeatUser1);
      }
      if (hasSeatUser2) {
        size += pb::CodedOutputStream.ComputeMessageSize(12, SeatUser2);
      }
      if (hasSeatUser3) {
        size += pb::CodedOutputStream.ComputeMessageSize(13, SeatUser3);
      }
      if (hasMakeRate) {
        size += pb::CodedOutputStream.ComputeInt32Size(14, MakeRate);
      }
      if (hasTableRate) {
        size += pb::CodedOutputStream.ComputeInt32Size(15, TableRate);
      }
      if (hasB) {
        size += pb::CodedOutputStream.ComputeInt32Size(16, B);
      }
      {
        int dataSize = 0;
        foreach (int element in BaseCardsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        if (baseCards_.Count != 0) {
          size += 2 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
        }
        baseCardsMemoizedSerializedSize = dataSize;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static TableStatsddz ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TableStatsddz ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TableStatsddz ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TableStatsddz ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TableStatsddz ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TableStatsddz ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TableStatsddz ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TableStatsddz ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TableStatsddz ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TableStatsddz ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TableStatsddz MakeReadOnly() {
      nowSeat_.MakeReadOnly();
      baseCards_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TableStatsddz prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TableStatsddz, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TableStatsddz cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TableStatsddz result;
      
      private TableStatsddz PrepareBuilder() {
        if (resultIsReadOnly) {
          TableStatsddz original = result;
          result = new TableStatsddz();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TableStatsddz MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.TableStatsddz.Descriptor; }
      }
      
      public override TableStatsddz DefaultInstanceForType {
        get { return global::gt_msg.TableStatsddz.DefaultInstance; }
      }
      
      public override TableStatsddz BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TableStatsddz) {
          return MergeFrom((TableStatsddz) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TableStatsddz other) {
        if (other == global::gt_msg.TableStatsddz.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTableID) {
          TableID = other.TableID;
        }
        if (other.HasStage) {
          Stage = other.Stage;
        }
        if (other.HasRank) {
          Rank = other.Rank;
        }
        if (other.HasRule) {
          Rule = other.Rule;
        }
        if (other.HasStep) {
          Step = other.Step;
        }
        if (other.HasNextActionTimeOut) {
          NextActionTimeOut = other.NextActionTimeOut;
        }
        if (other.HasLastPlayCardsSeat) {
          LastPlayCardsSeat = other.LastPlayCardsSeat;
        }
        if (other.HasMySeat) {
          MySeat = other.MySeat;
        }
        if (other.HasBasePoint) {
          BasePoint = other.BasePoint;
        }
        if (other.nowSeat_.Count != 0) {
          result.nowSeat_.Add(other.nowSeat_);
        }
        if (other.HasSeatUser1) {
          MergeSeatUser1(other.SeatUser1);
        }
        if (other.HasSeatUser2) {
          MergeSeatUser2(other.SeatUser2);
        }
        if (other.HasSeatUser3) {
          MergeSeatUser3(other.SeatUser3);
        }
        if (other.HasMakeRate) {
          MakeRate = other.MakeRate;
        }
        if (other.HasTableRate) {
          TableRate = other.TableRate;
        }
        if (other.HasB) {
          B = other.B;
        }
        if (other.baseCards_.Count != 0) {
          result.baseCards_.Add(other.baseCards_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tableStatsddzFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tableStatsddzFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTableID = input.ReadInt32(ref result.tableID_);
              break;
            }
            case 16: {
              result.hasStage = input.ReadInt32(ref result.stage_);
              break;
            }
            case 24: {
              object unknown;
              if(input.ReadEnum(ref result.rank_, out unknown)) {
                result.hasRank = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(3, (ulong)(int)unknown);
              }
              break;
            }
            case 32: {
              object unknown;
              if(input.ReadEnum(ref result.rule_, out unknown)) {
                result.hasRule = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(4, (ulong)(int)unknown);
              }
              break;
            }
            case 40: {
              result.hasStep = input.ReadInt32(ref result.step_);
              break;
            }
            case 48: {
              result.hasNextActionTimeOut = input.ReadInt32(ref result.nextActionTimeOut_);
              break;
            }
            case 56: {
              result.hasLastPlayCardsSeat = input.ReadInt32(ref result.lastPlayCardsSeat_);
              break;
            }
            case 64: {
              result.hasMySeat = input.ReadInt32(ref result.mySeat_);
              break;
            }
            case 72: {
              result.hasBasePoint = input.ReadInt32(ref result.basePoint_);
              break;
            }
            case 82:
            case 80: {
              input.ReadInt32Array(tag, field_name, result.nowSeat_);
              break;
            }
            case 90: {
              global::gt_msg.TableUserStatsddz.Builder subBuilder = global::gt_msg.TableUserStatsddz.CreateBuilder();
              if (result.hasSeatUser1) {
                subBuilder.MergeFrom(SeatUser1);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SeatUser1 = subBuilder.BuildPartial();
              break;
            }
            case 98: {
              global::gt_msg.TableUserStatsddz.Builder subBuilder = global::gt_msg.TableUserStatsddz.CreateBuilder();
              if (result.hasSeatUser2) {
                subBuilder.MergeFrom(SeatUser2);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SeatUser2 = subBuilder.BuildPartial();
              break;
            }
            case 106: {
              global::gt_msg.TableUserStatsddz.Builder subBuilder = global::gt_msg.TableUserStatsddz.CreateBuilder();
              if (result.hasSeatUser3) {
                subBuilder.MergeFrom(SeatUser3);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SeatUser3 = subBuilder.BuildPartial();
              break;
            }
            case 112: {
              result.hasMakeRate = input.ReadInt32(ref result.makeRate_);
              break;
            }
            case 120: {
              result.hasTableRate = input.ReadInt32(ref result.tableRate_);
              break;
            }
            case 128: {
              result.hasB = input.ReadInt32(ref result.b_);
              break;
            }
            case 138:
            case 136: {
              input.ReadInt32Array(tag, field_name, result.baseCards_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTableID {
        get { return result.hasTableID; }
      }
      public int TableID {
        get { return result.TableID; }
        set { SetTableID(value); }
      }
      public Builder SetTableID(int value) {
        PrepareBuilder();
        result.hasTableID = true;
        result.tableID_ = value;
        return this;
      }
      public Builder ClearTableID() {
        PrepareBuilder();
        result.hasTableID = false;
        result.tableID_ = 0;
        return this;
      }
      
      public bool HasStage {
        get { return result.hasStage; }
      }
      public int Stage {
        get { return result.Stage; }
        set { SetStage(value); }
      }
      public Builder SetStage(int value) {
        PrepareBuilder();
        result.hasStage = true;
        result.stage_ = value;
        return this;
      }
      public Builder ClearStage() {
        PrepareBuilder();
        result.hasStage = false;
        result.stage_ = 0;
        return this;
      }
      
      public bool HasRank {
       get { return result.hasRank; }
      }
      public global::gt_msg.Rank Rank {
        get { return result.Rank; }
        set { SetRank(value); }
      }
      public Builder SetRank(global::gt_msg.Rank value) {
        PrepareBuilder();
        result.hasRank = true;
        result.rank_ = value;
        return this;
      }
      public Builder ClearRank() {
        PrepareBuilder();
        result.hasRank = false;
        result.rank_ = global::gt_msg.Rank.LV0;
        return this;
      }
      
      public bool HasRule {
       get { return result.hasRule; }
      }
      public global::gt_msg.Rule Rule {
        get { return result.Rule; }
        set { SetRule(value); }
      }
      public Builder SetRule(global::gt_msg.Rule value) {
        PrepareBuilder();
        result.hasRule = true;
        result.rule_ = value;
        return this;
      }
      public Builder ClearRule() {
        PrepareBuilder();
        result.hasRule = false;
        result.rule_ = global::gt_msg.Rule.RuleNormal;
        return this;
      }
      
      public bool HasStep {
        get { return result.hasStep; }
      }
      public int Step {
        get { return result.Step; }
        set { SetStep(value); }
      }
      public Builder SetStep(int value) {
        PrepareBuilder();
        result.hasStep = true;
        result.step_ = value;
        return this;
      }
      public Builder ClearStep() {
        PrepareBuilder();
        result.hasStep = false;
        result.step_ = 0;
        return this;
      }
      
      public bool HasNextActionTimeOut {
        get { return result.hasNextActionTimeOut; }
      }
      public int NextActionTimeOut {
        get { return result.NextActionTimeOut; }
        set { SetNextActionTimeOut(value); }
      }
      public Builder SetNextActionTimeOut(int value) {
        PrepareBuilder();
        result.hasNextActionTimeOut = true;
        result.nextActionTimeOut_ = value;
        return this;
      }
      public Builder ClearNextActionTimeOut() {
        PrepareBuilder();
        result.hasNextActionTimeOut = false;
        result.nextActionTimeOut_ = 0;
        return this;
      }
      
      public bool HasLastPlayCardsSeat {
        get { return result.hasLastPlayCardsSeat; }
      }
      public int LastPlayCardsSeat {
        get { return result.LastPlayCardsSeat; }
        set { SetLastPlayCardsSeat(value); }
      }
      public Builder SetLastPlayCardsSeat(int value) {
        PrepareBuilder();
        result.hasLastPlayCardsSeat = true;
        result.lastPlayCardsSeat_ = value;
        return this;
      }
      public Builder ClearLastPlayCardsSeat() {
        PrepareBuilder();
        result.hasLastPlayCardsSeat = false;
        result.lastPlayCardsSeat_ = 0;
        return this;
      }
      
      public bool HasMySeat {
        get { return result.hasMySeat; }
      }
      public int MySeat {
        get { return result.MySeat; }
        set { SetMySeat(value); }
      }
      public Builder SetMySeat(int value) {
        PrepareBuilder();
        result.hasMySeat = true;
        result.mySeat_ = value;
        return this;
      }
      public Builder ClearMySeat() {
        PrepareBuilder();
        result.hasMySeat = false;
        result.mySeat_ = 0;
        return this;
      }
      
      public bool HasBasePoint {
        get { return result.hasBasePoint; }
      }
      public int BasePoint {
        get { return result.BasePoint; }
        set { SetBasePoint(value); }
      }
      public Builder SetBasePoint(int value) {
        PrepareBuilder();
        result.hasBasePoint = true;
        result.basePoint_ = value;
        return this;
      }
      public Builder ClearBasePoint() {
        PrepareBuilder();
        result.hasBasePoint = false;
        result.basePoint_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> NowSeatList {
        get { return PrepareBuilder().nowSeat_; }
      }
      public int NowSeatCount {
        get { return result.NowSeatCount; }
      }
      public int GetNowSeat(int index) {
        return result.GetNowSeat(index);
      }
      public Builder SetNowSeat(int index, int value) {
        PrepareBuilder();
        result.nowSeat_[index] = value;
        return this;
      }
      public Builder AddNowSeat(int value) {
        PrepareBuilder();
        result.nowSeat_.Add(value);
        return this;
      }
      public Builder AddRangeNowSeat(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.nowSeat_.Add(values);
        return this;
      }
      public Builder ClearNowSeat() {
        PrepareBuilder();
        result.nowSeat_.Clear();
        return this;
      }
      
      public bool HasSeatUser1 {
       get { return result.hasSeatUser1; }
      }
      public global::gt_msg.TableUserStatsddz SeatUser1 {
        get { return result.SeatUser1; }
        set { SetSeatUser1(value); }
      }
      public Builder SetSeatUser1(global::gt_msg.TableUserStatsddz value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSeatUser1 = true;
        result.seatUser1_ = value;
        return this;
      }
      public Builder SetSeatUser1(global::gt_msg.TableUserStatsddz.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSeatUser1 = true;
        result.seatUser1_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSeatUser1(global::gt_msg.TableUserStatsddz value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSeatUser1 &&
            result.seatUser1_ != global::gt_msg.TableUserStatsddz.DefaultInstance) {
            result.seatUser1_ = global::gt_msg.TableUserStatsddz.CreateBuilder(result.seatUser1_).MergeFrom(value).BuildPartial();
        } else {
          result.seatUser1_ = value;
        }
        result.hasSeatUser1 = true;
        return this;
      }
      public Builder ClearSeatUser1() {
        PrepareBuilder();
        result.hasSeatUser1 = false;
        result.seatUser1_ = null;
        return this;
      }
      
      public bool HasSeatUser2 {
       get { return result.hasSeatUser2; }
      }
      public global::gt_msg.TableUserStatsddz SeatUser2 {
        get { return result.SeatUser2; }
        set { SetSeatUser2(value); }
      }
      public Builder SetSeatUser2(global::gt_msg.TableUserStatsddz value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSeatUser2 = true;
        result.seatUser2_ = value;
        return this;
      }
      public Builder SetSeatUser2(global::gt_msg.TableUserStatsddz.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSeatUser2 = true;
        result.seatUser2_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSeatUser2(global::gt_msg.TableUserStatsddz value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSeatUser2 &&
            result.seatUser2_ != global::gt_msg.TableUserStatsddz.DefaultInstance) {
            result.seatUser2_ = global::gt_msg.TableUserStatsddz.CreateBuilder(result.seatUser2_).MergeFrom(value).BuildPartial();
        } else {
          result.seatUser2_ = value;
        }
        result.hasSeatUser2 = true;
        return this;
      }
      public Builder ClearSeatUser2() {
        PrepareBuilder();
        result.hasSeatUser2 = false;
        result.seatUser2_ = null;
        return this;
      }
      
      public bool HasSeatUser3 {
       get { return result.hasSeatUser3; }
      }
      public global::gt_msg.TableUserStatsddz SeatUser3 {
        get { return result.SeatUser3; }
        set { SetSeatUser3(value); }
      }
      public Builder SetSeatUser3(global::gt_msg.TableUserStatsddz value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSeatUser3 = true;
        result.seatUser3_ = value;
        return this;
      }
      public Builder SetSeatUser3(global::gt_msg.TableUserStatsddz.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSeatUser3 = true;
        result.seatUser3_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSeatUser3(global::gt_msg.TableUserStatsddz value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSeatUser3 &&
            result.seatUser3_ != global::gt_msg.TableUserStatsddz.DefaultInstance) {
            result.seatUser3_ = global::gt_msg.TableUserStatsddz.CreateBuilder(result.seatUser3_).MergeFrom(value).BuildPartial();
        } else {
          result.seatUser3_ = value;
        }
        result.hasSeatUser3 = true;
        return this;
      }
      public Builder ClearSeatUser3() {
        PrepareBuilder();
        result.hasSeatUser3 = false;
        result.seatUser3_ = null;
        return this;
      }
      
      public bool HasMakeRate {
        get { return result.hasMakeRate; }
      }
      public int MakeRate {
        get { return result.MakeRate; }
        set { SetMakeRate(value); }
      }
      public Builder SetMakeRate(int value) {
        PrepareBuilder();
        result.hasMakeRate = true;
        result.makeRate_ = value;
        return this;
      }
      public Builder ClearMakeRate() {
        PrepareBuilder();
        result.hasMakeRate = false;
        result.makeRate_ = 0;
        return this;
      }
      
      public bool HasTableRate {
        get { return result.hasTableRate; }
      }
      public int TableRate {
        get { return result.TableRate; }
        set { SetTableRate(value); }
      }
      public Builder SetTableRate(int value) {
        PrepareBuilder();
        result.hasTableRate = true;
        result.tableRate_ = value;
        return this;
      }
      public Builder ClearTableRate() {
        PrepareBuilder();
        result.hasTableRate = false;
        result.tableRate_ = 0;
        return this;
      }
      
      public bool HasB {
        get { return result.hasB; }
      }
      public int B {
        get { return result.B; }
        set { SetB(value); }
      }
      public Builder SetB(int value) {
        PrepareBuilder();
        result.hasB = true;
        result.b_ = value;
        return this;
      }
      public Builder ClearB() {
        PrepareBuilder();
        result.hasB = false;
        result.b_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> BaseCardsList {
        get { return PrepareBuilder().baseCards_; }
      }
      public int BaseCardsCount {
        get { return result.BaseCardsCount; }
      }
      public int GetBaseCards(int index) {
        return result.GetBaseCards(index);
      }
      public Builder SetBaseCards(int index, int value) {
        PrepareBuilder();
        result.baseCards_[index] = value;
        return this;
      }
      public Builder AddBaseCards(int value) {
        PrepareBuilder();
        result.baseCards_.Add(value);
        return this;
      }
      public Builder AddRangeBaseCards(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.baseCards_.Add(values);
        return this;
      }
      public Builder ClearBaseCards() {
        PrepareBuilder();
        result.baseCards_.Clear();
        return this;
      }
    }
    static TableStatsddz() {
      object.ReferenceEquals(global::gt_msg.GtDdz.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class TableUserResultddz : pb::GeneratedMessage<TableUserResultddz, TableUserResultddz.Builder> {
    private TableUserResultddz() { }
    private static readonly TableUserResultddz defaultInstance = new TableUserResultddz().MakeReadOnly();
    private static readonly string[] _tableUserResultddzFieldNames = new string[] { "BombTimes", "HandCards", "LostWin", "NowSeat", "Tax", "user_info" };
    private static readonly uint[] _tableUserResultddzFieldTags = new uint[] { 48, 42, 26, 16, 32, 10 };
    public static TableUserResultddz DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override TableUserResultddz DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override TableUserResultddz ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_TableUserResultddz__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<TableUserResultddz, TableUserResultddz.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_TableUserResultddz__FieldAccessorTable; }
    }
    
    public const int UserInfoFieldNumber = 1;
    private bool hasUserInfo;
    private global::gt_msg.User userInfo_;
    public bool HasUserInfo {
      get { return hasUserInfo; }
    }
    public global::gt_msg.User UserInfo {
      get { return userInfo_ ?? global::gt_msg.User.DefaultInstance; }
    }
    
    public const int NowSeatFieldNumber = 2;
    private bool hasNowSeat;
    private int nowSeat_;
    public bool HasNowSeat {
      get { return hasNowSeat; }
    }
    public int NowSeat {
      get { return nowSeat_; }
    }
    
    public const int LostWinFieldNumber = 3;
    private bool hasLostWin;
    private global::gt_msg.ItemChangedEvent lostWin_;
    public bool HasLostWin {
      get { return hasLostWin; }
    }
    public global::gt_msg.ItemChangedEvent LostWin {
      get { return lostWin_ ?? global::gt_msg.ItemChangedEvent.DefaultInstance; }
    }
    
    public const int TaxFieldNumber = 4;
    private bool hasTax;
    private int tax_;
    public bool HasTax {
      get { return hasTax; }
    }
    public int Tax {
      get { return tax_; }
    }
    
    public const int HandCardsFieldNumber = 5;
    private int handCardsMemoizedSerializedSize;
    private pbc::PopsicleList<int> handCards_ = new pbc::PopsicleList<int>();
    public scg::IList<int> HandCardsList {
      get { return pbc::Lists.AsReadOnly(handCards_); }
    }
    public int HandCardsCount {
      get { return handCards_.Count; }
    }
    public int GetHandCards(int index) {
      return handCards_[index];
    }
    
    public const int BombTimesFieldNumber = 6;
    private bool hasBombTimes;
    private int bombTimes_;
    public bool HasBombTimes {
      get { return hasBombTimes; }
    }
    public int BombTimes {
      get { return bombTimes_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasNowSeat) return false;
        if (HasUserInfo) {
          if (!UserInfo.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _tableUserResultddzFieldNames;
      if (hasUserInfo) {
        output.WriteMessage(1, field_names[5], UserInfo);
      }
      if (hasNowSeat) {
        output.WriteInt32(2, field_names[3], NowSeat);
      }
      if (hasLostWin) {
        output.WriteMessage(3, field_names[2], LostWin);
      }
      if (hasTax) {
        output.WriteInt32(4, field_names[4], Tax);
      }
      if (handCards_.Count > 0) {
        output.WritePackedInt32Array(5, field_names[1], handCardsMemoizedSerializedSize, handCards_);
      }
      if (hasBombTimes) {
        output.WriteInt32(6, field_names[0], BombTimes);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUserInfo) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, UserInfo);
      }
      if (hasNowSeat) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, NowSeat);
      }
      if (hasLostWin) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, LostWin);
      }
      if (hasTax) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, Tax);
      }
      {
        int dataSize = 0;
        foreach (int element in HandCardsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        if (handCards_.Count != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
        }
        handCardsMemoizedSerializedSize = dataSize;
      }
      if (hasBombTimes) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, BombTimes);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static TableUserResultddz ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TableUserResultddz ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TableUserResultddz ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static TableUserResultddz ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static TableUserResultddz ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TableUserResultddz ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static TableUserResultddz ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static TableUserResultddz ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static TableUserResultddz ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static TableUserResultddz ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private TableUserResultddz MakeReadOnly() {
      handCards_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(TableUserResultddz prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<TableUserResultddz, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(TableUserResultddz cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private TableUserResultddz result;
      
      private TableUserResultddz PrepareBuilder() {
        if (resultIsReadOnly) {
          TableUserResultddz original = result;
          result = new TableUserResultddz();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override TableUserResultddz MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.TableUserResultddz.Descriptor; }
      }
      
      public override TableUserResultddz DefaultInstanceForType {
        get { return global::gt_msg.TableUserResultddz.DefaultInstance; }
      }
      
      public override TableUserResultddz BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is TableUserResultddz) {
          return MergeFrom((TableUserResultddz) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(TableUserResultddz other) {
        if (other == global::gt_msg.TableUserResultddz.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUserInfo) {
          MergeUserInfo(other.UserInfo);
        }
        if (other.HasNowSeat) {
          NowSeat = other.NowSeat;
        }
        if (other.HasLostWin) {
          MergeLostWin(other.LostWin);
        }
        if (other.HasTax) {
          Tax = other.Tax;
        }
        if (other.handCards_.Count != 0) {
          result.handCards_.Add(other.handCards_);
        }
        if (other.HasBombTimes) {
          BombTimes = other.BombTimes;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_tableUserResultddzFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _tableUserResultddzFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              global::gt_msg.User.Builder subBuilder = global::gt_msg.User.CreateBuilder();
              if (result.hasUserInfo) {
                subBuilder.MergeFrom(UserInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserInfo = subBuilder.BuildPartial();
              break;
            }
            case 16: {
              result.hasNowSeat = input.ReadInt32(ref result.nowSeat_);
              break;
            }
            case 26: {
              global::gt_msg.ItemChangedEvent.Builder subBuilder = global::gt_msg.ItemChangedEvent.CreateBuilder();
              if (result.hasLostWin) {
                subBuilder.MergeFrom(LostWin);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              LostWin = subBuilder.BuildPartial();
              break;
            }
            case 32: {
              result.hasTax = input.ReadInt32(ref result.tax_);
              break;
            }
            case 42:
            case 40: {
              input.ReadInt32Array(tag, field_name, result.handCards_);
              break;
            }
            case 48: {
              result.hasBombTimes = input.ReadInt32(ref result.bombTimes_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUserInfo {
       get { return result.hasUserInfo; }
      }
      public global::gt_msg.User UserInfo {
        get { return result.UserInfo; }
        set { SetUserInfo(value); }
      }
      public Builder SetUserInfo(global::gt_msg.User value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserInfo = true;
        result.userInfo_ = value;
        return this;
      }
      public Builder SetUserInfo(global::gt_msg.User.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserInfo = true;
        result.userInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserInfo(global::gt_msg.User value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserInfo &&
            result.userInfo_ != global::gt_msg.User.DefaultInstance) {
            result.userInfo_ = global::gt_msg.User.CreateBuilder(result.userInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.userInfo_ = value;
        }
        result.hasUserInfo = true;
        return this;
      }
      public Builder ClearUserInfo() {
        PrepareBuilder();
        result.hasUserInfo = false;
        result.userInfo_ = null;
        return this;
      }
      
      public bool HasNowSeat {
        get { return result.hasNowSeat; }
      }
      public int NowSeat {
        get { return result.NowSeat; }
        set { SetNowSeat(value); }
      }
      public Builder SetNowSeat(int value) {
        PrepareBuilder();
        result.hasNowSeat = true;
        result.nowSeat_ = value;
        return this;
      }
      public Builder ClearNowSeat() {
        PrepareBuilder();
        result.hasNowSeat = false;
        result.nowSeat_ = 0;
        return this;
      }
      
      public bool HasLostWin {
       get { return result.hasLostWin; }
      }
      public global::gt_msg.ItemChangedEvent LostWin {
        get { return result.LostWin; }
        set { SetLostWin(value); }
      }
      public Builder SetLostWin(global::gt_msg.ItemChangedEvent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasLostWin = true;
        result.lostWin_ = value;
        return this;
      }
      public Builder SetLostWin(global::gt_msg.ItemChangedEvent.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasLostWin = true;
        result.lostWin_ = builderForValue.Build();
        return this;
      }
      public Builder MergeLostWin(global::gt_msg.ItemChangedEvent value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasLostWin &&
            result.lostWin_ != global::gt_msg.ItemChangedEvent.DefaultInstance) {
            result.lostWin_ = global::gt_msg.ItemChangedEvent.CreateBuilder(result.lostWin_).MergeFrom(value).BuildPartial();
        } else {
          result.lostWin_ = value;
        }
        result.hasLostWin = true;
        return this;
      }
      public Builder ClearLostWin() {
        PrepareBuilder();
        result.hasLostWin = false;
        result.lostWin_ = null;
        return this;
      }
      
      public bool HasTax {
        get { return result.hasTax; }
      }
      public int Tax {
        get { return result.Tax; }
        set { SetTax(value); }
      }
      public Builder SetTax(int value) {
        PrepareBuilder();
        result.hasTax = true;
        result.tax_ = value;
        return this;
      }
      public Builder ClearTax() {
        PrepareBuilder();
        result.hasTax = false;
        result.tax_ = 0;
        return this;
      }
      
      public pbc::IPopsicleList<int> HandCardsList {
        get { return PrepareBuilder().handCards_; }
      }
      public int HandCardsCount {
        get { return result.HandCardsCount; }
      }
      public int GetHandCards(int index) {
        return result.GetHandCards(index);
      }
      public Builder SetHandCards(int index, int value) {
        PrepareBuilder();
        result.handCards_[index] = value;
        return this;
      }
      public Builder AddHandCards(int value) {
        PrepareBuilder();
        result.handCards_.Add(value);
        return this;
      }
      public Builder AddRangeHandCards(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.handCards_.Add(values);
        return this;
      }
      public Builder ClearHandCards() {
        PrepareBuilder();
        result.handCards_.Clear();
        return this;
      }
      
      public bool HasBombTimes {
        get { return result.hasBombTimes; }
      }
      public int BombTimes {
        get { return result.BombTimes; }
        set { SetBombTimes(value); }
      }
      public Builder SetBombTimes(int value) {
        PrepareBuilder();
        result.hasBombTimes = true;
        result.bombTimes_ = value;
        return this;
      }
      public Builder ClearBombTimes() {
        PrepareBuilder();
        result.hasBombTimes = false;
        result.bombTimes_ = 0;
        return this;
      }
    }
    static TableUserResultddz() {
      object.ReferenceEquals(global::gt_msg.GtDdz.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class RoundEndedEventddz : pb::GeneratedMessage<RoundEndedEventddz, RoundEndedEventddz.Builder> {
    private RoundEndedEventddz() { }
    private static readonly RoundEndedEventddz defaultInstance = new RoundEndedEventddz().MakeReadOnly();
    private static readonly string[] _roundEndedEventddzFieldNames = new string[] { "BasePoint", "Hostlw", "MakeRate", "MySeat", "NextStartTimeoutSecs", "SeatUser1", "SeatUser2", "SeatUser3", "Spring", "TableID", "TableRate" };
    private static readonly uint[] _roundEndedEventddzFieldTags = new uint[] { 32, 24, 80, 16, 40, 50, 58, 66, 72, 8, 88 };
    public static RoundEndedEventddz DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override RoundEndedEventddz DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override RoundEndedEventddz ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_RoundEndedEventddz__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<RoundEndedEventddz, RoundEndedEventddz.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_RoundEndedEventddz__FieldAccessorTable; }
    }
    
    public const int TableIDFieldNumber = 1;
    private bool hasTableID;
    private int tableID_;
    public bool HasTableID {
      get { return hasTableID; }
    }
    public int TableID {
      get { return tableID_; }
    }
    
    public const int MySeatFieldNumber = 2;
    private bool hasMySeat;
    private int mySeat_;
    public bool HasMySeat {
      get { return hasMySeat; }
    }
    public int MySeat {
      get { return mySeat_; }
    }
    
    public const int HostlwFieldNumber = 3;
    private bool hasHostlw;
    private int hostlw_;
    public bool HasHostlw {
      get { return hasHostlw; }
    }
    public int Hostlw {
      get { return hostlw_; }
    }
    
    public const int BasePointFieldNumber = 4;
    private bool hasBasePoint;
    private int basePoint_;
    public bool HasBasePoint {
      get { return hasBasePoint; }
    }
    public int BasePoint {
      get { return basePoint_; }
    }
    
    public const int NextStartTimeoutSecsFieldNumber = 5;
    private bool hasNextStartTimeoutSecs;
    private int nextStartTimeoutSecs_;
    public bool HasNextStartTimeoutSecs {
      get { return hasNextStartTimeoutSecs; }
    }
    public int NextStartTimeoutSecs {
      get { return nextStartTimeoutSecs_; }
    }
    
    public const int SeatUser1FieldNumber = 6;
    private bool hasSeatUser1;
    private global::gt_msg.TableUserResultddz seatUser1_;
    public bool HasSeatUser1 {
      get { return hasSeatUser1; }
    }
    public global::gt_msg.TableUserResultddz SeatUser1 {
      get { return seatUser1_ ?? global::gt_msg.TableUserResultddz.DefaultInstance; }
    }
    
    public const int SeatUser2FieldNumber = 7;
    private bool hasSeatUser2;
    private global::gt_msg.TableUserResultddz seatUser2_;
    public bool HasSeatUser2 {
      get { return hasSeatUser2; }
    }
    public global::gt_msg.TableUserResultddz SeatUser2 {
      get { return seatUser2_ ?? global::gt_msg.TableUserResultddz.DefaultInstance; }
    }
    
    public const int SeatUser3FieldNumber = 8;
    private bool hasSeatUser3;
    private global::gt_msg.TableUserResultddz seatUser3_;
    public bool HasSeatUser3 {
      get { return hasSeatUser3; }
    }
    public global::gt_msg.TableUserResultddz SeatUser3 {
      get { return seatUser3_ ?? global::gt_msg.TableUserResultddz.DefaultInstance; }
    }
    
    public const int SpringFieldNumber = 9;
    private bool hasSpring;
    private int spring_;
    public bool HasSpring {
      get { return hasSpring; }
    }
    public int Spring {
      get { return spring_; }
    }
    
    public const int MakeRateFieldNumber = 10;
    private bool hasMakeRate;
    private int makeRate_;
    public bool HasMakeRate {
      get { return hasMakeRate; }
    }
    public int MakeRate {
      get { return makeRate_; }
    }
    
    public const int TableRateFieldNumber = 11;
    private bool hasTableRate;
    private int tableRate_;
    public bool HasTableRate {
      get { return hasTableRate; }
    }
    public int TableRate {
      get { return tableRate_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasTableID) return false;
        if (!hasMySeat) return false;
        if (!hasHostlw) return false;
        if (!hasBasePoint) return false;
        if (!hasNextStartTimeoutSecs) return false;
        if (!hasSpring) return false;
        if (!hasMakeRate) return false;
        if (!hasTableRate) return false;
        if (HasSeatUser1) {
          if (!SeatUser1.IsInitialized) return false;
        }
        if (HasSeatUser2) {
          if (!SeatUser2.IsInitialized) return false;
        }
        if (HasSeatUser3) {
          if (!SeatUser3.IsInitialized) return false;
        }
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _roundEndedEventddzFieldNames;
      if (hasTableID) {
        output.WriteInt32(1, field_names[9], TableID);
      }
      if (hasMySeat) {
        output.WriteInt32(2, field_names[3], MySeat);
      }
      if (hasHostlw) {
        output.WriteInt32(3, field_names[1], Hostlw);
      }
      if (hasBasePoint) {
        output.WriteInt32(4, field_names[0], BasePoint);
      }
      if (hasNextStartTimeoutSecs) {
        output.WriteInt32(5, field_names[4], NextStartTimeoutSecs);
      }
      if (hasSeatUser1) {
        output.WriteMessage(6, field_names[5], SeatUser1);
      }
      if (hasSeatUser2) {
        output.WriteMessage(7, field_names[6], SeatUser2);
      }
      if (hasSeatUser3) {
        output.WriteMessage(8, field_names[7], SeatUser3);
      }
      if (hasSpring) {
        output.WriteInt32(9, field_names[8], Spring);
      }
      if (hasMakeRate) {
        output.WriteInt32(10, field_names[2], MakeRate);
      }
      if (hasTableRate) {
        output.WriteInt32(11, field_names[10], TableRate);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTableID) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, TableID);
      }
      if (hasMySeat) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, MySeat);
      }
      if (hasHostlw) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Hostlw);
      }
      if (hasBasePoint) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, BasePoint);
      }
      if (hasNextStartTimeoutSecs) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, NextStartTimeoutSecs);
      }
      if (hasSeatUser1) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, SeatUser1);
      }
      if (hasSeatUser2) {
        size += pb::CodedOutputStream.ComputeMessageSize(7, SeatUser2);
      }
      if (hasSeatUser3) {
        size += pb::CodedOutputStream.ComputeMessageSize(8, SeatUser3);
      }
      if (hasSpring) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, Spring);
      }
      if (hasMakeRate) {
        size += pb::CodedOutputStream.ComputeInt32Size(10, MakeRate);
      }
      if (hasTableRate) {
        size += pb::CodedOutputStream.ComputeInt32Size(11, TableRate);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static RoundEndedEventddz ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RoundEndedEventddz ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RoundEndedEventddz ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static RoundEndedEventddz ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static RoundEndedEventddz ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RoundEndedEventddz ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static RoundEndedEventddz ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static RoundEndedEventddz ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static RoundEndedEventddz ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static RoundEndedEventddz ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private RoundEndedEventddz MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(RoundEndedEventddz prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<RoundEndedEventddz, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(RoundEndedEventddz cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private RoundEndedEventddz result;
      
      private RoundEndedEventddz PrepareBuilder() {
        if (resultIsReadOnly) {
          RoundEndedEventddz original = result;
          result = new RoundEndedEventddz();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override RoundEndedEventddz MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.RoundEndedEventddz.Descriptor; }
      }
      
      public override RoundEndedEventddz DefaultInstanceForType {
        get { return global::gt_msg.RoundEndedEventddz.DefaultInstance; }
      }
      
      public override RoundEndedEventddz BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is RoundEndedEventddz) {
          return MergeFrom((RoundEndedEventddz) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(RoundEndedEventddz other) {
        if (other == global::gt_msg.RoundEndedEventddz.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasTableID) {
          TableID = other.TableID;
        }
        if (other.HasMySeat) {
          MySeat = other.MySeat;
        }
        if (other.HasHostlw) {
          Hostlw = other.Hostlw;
        }
        if (other.HasBasePoint) {
          BasePoint = other.BasePoint;
        }
        if (other.HasNextStartTimeoutSecs) {
          NextStartTimeoutSecs = other.NextStartTimeoutSecs;
        }
        if (other.HasSeatUser1) {
          MergeSeatUser1(other.SeatUser1);
        }
        if (other.HasSeatUser2) {
          MergeSeatUser2(other.SeatUser2);
        }
        if (other.HasSeatUser3) {
          MergeSeatUser3(other.SeatUser3);
        }
        if (other.HasSpring) {
          Spring = other.Spring;
        }
        if (other.HasMakeRate) {
          MakeRate = other.MakeRate;
        }
        if (other.HasTableRate) {
          TableRate = other.TableRate;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_roundEndedEventddzFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _roundEndedEventddzFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              result.hasTableID = input.ReadInt32(ref result.tableID_);
              break;
            }
            case 16: {
              result.hasMySeat = input.ReadInt32(ref result.mySeat_);
              break;
            }
            case 24: {
              result.hasHostlw = input.ReadInt32(ref result.hostlw_);
              break;
            }
            case 32: {
              result.hasBasePoint = input.ReadInt32(ref result.basePoint_);
              break;
            }
            case 40: {
              result.hasNextStartTimeoutSecs = input.ReadInt32(ref result.nextStartTimeoutSecs_);
              break;
            }
            case 50: {
              global::gt_msg.TableUserResultddz.Builder subBuilder = global::gt_msg.TableUserResultddz.CreateBuilder();
              if (result.hasSeatUser1) {
                subBuilder.MergeFrom(SeatUser1);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SeatUser1 = subBuilder.BuildPartial();
              break;
            }
            case 58: {
              global::gt_msg.TableUserResultddz.Builder subBuilder = global::gt_msg.TableUserResultddz.CreateBuilder();
              if (result.hasSeatUser2) {
                subBuilder.MergeFrom(SeatUser2);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SeatUser2 = subBuilder.BuildPartial();
              break;
            }
            case 66: {
              global::gt_msg.TableUserResultddz.Builder subBuilder = global::gt_msg.TableUserResultddz.CreateBuilder();
              if (result.hasSeatUser3) {
                subBuilder.MergeFrom(SeatUser3);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              SeatUser3 = subBuilder.BuildPartial();
              break;
            }
            case 72: {
              result.hasSpring = input.ReadInt32(ref result.spring_);
              break;
            }
            case 80: {
              result.hasMakeRate = input.ReadInt32(ref result.makeRate_);
              break;
            }
            case 88: {
              result.hasTableRate = input.ReadInt32(ref result.tableRate_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasTableID {
        get { return result.hasTableID; }
      }
      public int TableID {
        get { return result.TableID; }
        set { SetTableID(value); }
      }
      public Builder SetTableID(int value) {
        PrepareBuilder();
        result.hasTableID = true;
        result.tableID_ = value;
        return this;
      }
      public Builder ClearTableID() {
        PrepareBuilder();
        result.hasTableID = false;
        result.tableID_ = 0;
        return this;
      }
      
      public bool HasMySeat {
        get { return result.hasMySeat; }
      }
      public int MySeat {
        get { return result.MySeat; }
        set { SetMySeat(value); }
      }
      public Builder SetMySeat(int value) {
        PrepareBuilder();
        result.hasMySeat = true;
        result.mySeat_ = value;
        return this;
      }
      public Builder ClearMySeat() {
        PrepareBuilder();
        result.hasMySeat = false;
        result.mySeat_ = 0;
        return this;
      }
      
      public bool HasHostlw {
        get { return result.hasHostlw; }
      }
      public int Hostlw {
        get { return result.Hostlw; }
        set { SetHostlw(value); }
      }
      public Builder SetHostlw(int value) {
        PrepareBuilder();
        result.hasHostlw = true;
        result.hostlw_ = value;
        return this;
      }
      public Builder ClearHostlw() {
        PrepareBuilder();
        result.hasHostlw = false;
        result.hostlw_ = 0;
        return this;
      }
      
      public bool HasBasePoint {
        get { return result.hasBasePoint; }
      }
      public int BasePoint {
        get { return result.BasePoint; }
        set { SetBasePoint(value); }
      }
      public Builder SetBasePoint(int value) {
        PrepareBuilder();
        result.hasBasePoint = true;
        result.basePoint_ = value;
        return this;
      }
      public Builder ClearBasePoint() {
        PrepareBuilder();
        result.hasBasePoint = false;
        result.basePoint_ = 0;
        return this;
      }
      
      public bool HasNextStartTimeoutSecs {
        get { return result.hasNextStartTimeoutSecs; }
      }
      public int NextStartTimeoutSecs {
        get { return result.NextStartTimeoutSecs; }
        set { SetNextStartTimeoutSecs(value); }
      }
      public Builder SetNextStartTimeoutSecs(int value) {
        PrepareBuilder();
        result.hasNextStartTimeoutSecs = true;
        result.nextStartTimeoutSecs_ = value;
        return this;
      }
      public Builder ClearNextStartTimeoutSecs() {
        PrepareBuilder();
        result.hasNextStartTimeoutSecs = false;
        result.nextStartTimeoutSecs_ = 0;
        return this;
      }
      
      public bool HasSeatUser1 {
       get { return result.hasSeatUser1; }
      }
      public global::gt_msg.TableUserResultddz SeatUser1 {
        get { return result.SeatUser1; }
        set { SetSeatUser1(value); }
      }
      public Builder SetSeatUser1(global::gt_msg.TableUserResultddz value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSeatUser1 = true;
        result.seatUser1_ = value;
        return this;
      }
      public Builder SetSeatUser1(global::gt_msg.TableUserResultddz.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSeatUser1 = true;
        result.seatUser1_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSeatUser1(global::gt_msg.TableUserResultddz value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSeatUser1 &&
            result.seatUser1_ != global::gt_msg.TableUserResultddz.DefaultInstance) {
            result.seatUser1_ = global::gt_msg.TableUserResultddz.CreateBuilder(result.seatUser1_).MergeFrom(value).BuildPartial();
        } else {
          result.seatUser1_ = value;
        }
        result.hasSeatUser1 = true;
        return this;
      }
      public Builder ClearSeatUser1() {
        PrepareBuilder();
        result.hasSeatUser1 = false;
        result.seatUser1_ = null;
        return this;
      }
      
      public bool HasSeatUser2 {
       get { return result.hasSeatUser2; }
      }
      public global::gt_msg.TableUserResultddz SeatUser2 {
        get { return result.SeatUser2; }
        set { SetSeatUser2(value); }
      }
      public Builder SetSeatUser2(global::gt_msg.TableUserResultddz value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSeatUser2 = true;
        result.seatUser2_ = value;
        return this;
      }
      public Builder SetSeatUser2(global::gt_msg.TableUserResultddz.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSeatUser2 = true;
        result.seatUser2_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSeatUser2(global::gt_msg.TableUserResultddz value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSeatUser2 &&
            result.seatUser2_ != global::gt_msg.TableUserResultddz.DefaultInstance) {
            result.seatUser2_ = global::gt_msg.TableUserResultddz.CreateBuilder(result.seatUser2_).MergeFrom(value).BuildPartial();
        } else {
          result.seatUser2_ = value;
        }
        result.hasSeatUser2 = true;
        return this;
      }
      public Builder ClearSeatUser2() {
        PrepareBuilder();
        result.hasSeatUser2 = false;
        result.seatUser2_ = null;
        return this;
      }
      
      public bool HasSeatUser3 {
       get { return result.hasSeatUser3; }
      }
      public global::gt_msg.TableUserResultddz SeatUser3 {
        get { return result.SeatUser3; }
        set { SetSeatUser3(value); }
      }
      public Builder SetSeatUser3(global::gt_msg.TableUserResultddz value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasSeatUser3 = true;
        result.seatUser3_ = value;
        return this;
      }
      public Builder SetSeatUser3(global::gt_msg.TableUserResultddz.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasSeatUser3 = true;
        result.seatUser3_ = builderForValue.Build();
        return this;
      }
      public Builder MergeSeatUser3(global::gt_msg.TableUserResultddz value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasSeatUser3 &&
            result.seatUser3_ != global::gt_msg.TableUserResultddz.DefaultInstance) {
            result.seatUser3_ = global::gt_msg.TableUserResultddz.CreateBuilder(result.seatUser3_).MergeFrom(value).BuildPartial();
        } else {
          result.seatUser3_ = value;
        }
        result.hasSeatUser3 = true;
        return this;
      }
      public Builder ClearSeatUser3() {
        PrepareBuilder();
        result.hasSeatUser3 = false;
        result.seatUser3_ = null;
        return this;
      }
      
      public bool HasSpring {
        get { return result.hasSpring; }
      }
      public int Spring {
        get { return result.Spring; }
        set { SetSpring(value); }
      }
      public Builder SetSpring(int value) {
        PrepareBuilder();
        result.hasSpring = true;
        result.spring_ = value;
        return this;
      }
      public Builder ClearSpring() {
        PrepareBuilder();
        result.hasSpring = false;
        result.spring_ = 0;
        return this;
      }
      
      public bool HasMakeRate {
        get { return result.hasMakeRate; }
      }
      public int MakeRate {
        get { return result.MakeRate; }
        set { SetMakeRate(value); }
      }
      public Builder SetMakeRate(int value) {
        PrepareBuilder();
        result.hasMakeRate = true;
        result.makeRate_ = value;
        return this;
      }
      public Builder ClearMakeRate() {
        PrepareBuilder();
        result.hasMakeRate = false;
        result.makeRate_ = 0;
        return this;
      }
      
      public bool HasTableRate {
        get { return result.hasTableRate; }
      }
      public int TableRate {
        get { return result.TableRate; }
        set { SetTableRate(value); }
      }
      public Builder SetTableRate(int value) {
        PrepareBuilder();
        result.hasTableRate = true;
        result.tableRate_ = value;
        return this;
      }
      public Builder ClearTableRate() {
        PrepareBuilder();
        result.hasTableRate = false;
        result.tableRate_ = 0;
        return this;
      }
    }
    static RoundEndedEventddz() {
      object.ReferenceEquals(global::gt_msg.GtDdz.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ForceExitTableRequestddz : pb::GeneratedMessage<ForceExitTableRequestddz, ForceExitTableRequestddz.Builder> {
    private ForceExitTableRequestddz() { }
    private static readonly ForceExitTableRequestddz defaultInstance = new ForceExitTableRequestddz().MakeReadOnly();
    private static readonly string[] _forceExitTableRequestddzFieldNames = new string[] {  };
    private static readonly uint[] _forceExitTableRequestddzFieldTags = new uint[] {  };
    public static ForceExitTableRequestddz DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ForceExitTableRequestddz DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ForceExitTableRequestddz ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_ForceExitTableRequestddz__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ForceExitTableRequestddz, ForceExitTableRequestddz.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_ForceExitTableRequestddz__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _forceExitTableRequestddzFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ForceExitTableRequestddz ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ForceExitTableRequestddz ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ForceExitTableRequestddz ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ForceExitTableRequestddz ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ForceExitTableRequestddz ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ForceExitTableRequestddz ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ForceExitTableRequestddz ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ForceExitTableRequestddz ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ForceExitTableRequestddz ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ForceExitTableRequestddz ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ForceExitTableRequestddz MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ForceExitTableRequestddz prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ForceExitTableRequestddz, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ForceExitTableRequestddz cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ForceExitTableRequestddz result;
      
      private ForceExitTableRequestddz PrepareBuilder() {
        if (resultIsReadOnly) {
          ForceExitTableRequestddz original = result;
          result = new ForceExitTableRequestddz();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ForceExitTableRequestddz MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.ForceExitTableRequestddz.Descriptor; }
      }
      
      public override ForceExitTableRequestddz DefaultInstanceForType {
        get { return global::gt_msg.ForceExitTableRequestddz.DefaultInstance; }
      }
      
      public override ForceExitTableRequestddz BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ForceExitTableRequestddz) {
          return MergeFrom((ForceExitTableRequestddz) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ForceExitTableRequestddz other) {
        if (other == global::gt_msg.ForceExitTableRequestddz.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_forceExitTableRequestddzFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _forceExitTableRequestddzFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static ForceExitTableRequestddz() {
      object.ReferenceEquals(global::gt_msg.GtDdz.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ForceExitTableResponseddz : pb::GeneratedMessage<ForceExitTableResponseddz, ForceExitTableResponseddz.Builder> {
    private ForceExitTableResponseddz() { }
    private static readonly ForceExitTableResponseddz defaultInstance = new ForceExitTableResponseddz().MakeReadOnly();
    private static readonly string[] _forceExitTableResponseddzFieldNames = new string[] { "code" };
    private static readonly uint[] _forceExitTableResponseddzFieldTags = new uint[] { 8 };
    public static ForceExitTableResponseddz DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override ForceExitTableResponseddz DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override ForceExitTableResponseddz ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_ForceExitTableResponseddz__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<ForceExitTableResponseddz, ForceExitTableResponseddz.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_ForceExitTableResponseddz__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Code {
        Normal = 0,
        GiveUp = 1,
        NoEnoughMoney = 2,
        ChangeTable = 3,
        PlayingNoExit = 4,
      }
      
    }
    #endregion
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private global::gt_msg.ForceExitTableResponseddz.Types.Code code_ = global::gt_msg.ForceExitTableResponseddz.Types.Code.Normal;
    public bool HasCode {
      get { return hasCode; }
    }
    public global::gt_msg.ForceExitTableResponseddz.Types.Code Code {
      get { return code_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _forceExitTableResponseddzFieldNames;
      if (hasCode) {
        output.WriteEnum(1, field_names[0], (int) Code, Code);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCode) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Code);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static ForceExitTableResponseddz ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ForceExitTableResponseddz ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ForceExitTableResponseddz ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static ForceExitTableResponseddz ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static ForceExitTableResponseddz ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ForceExitTableResponseddz ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static ForceExitTableResponseddz ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static ForceExitTableResponseddz ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static ForceExitTableResponseddz ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static ForceExitTableResponseddz ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private ForceExitTableResponseddz MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(ForceExitTableResponseddz prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<ForceExitTableResponseddz, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(ForceExitTableResponseddz cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private ForceExitTableResponseddz result;
      
      private ForceExitTableResponseddz PrepareBuilder() {
        if (resultIsReadOnly) {
          ForceExitTableResponseddz original = result;
          result = new ForceExitTableResponseddz();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override ForceExitTableResponseddz MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.ForceExitTableResponseddz.Descriptor; }
      }
      
      public override ForceExitTableResponseddz DefaultInstanceForType {
        get { return global::gt_msg.ForceExitTableResponseddz.DefaultInstance; }
      }
      
      public override ForceExitTableResponseddz BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is ForceExitTableResponseddz) {
          return MergeFrom((ForceExitTableResponseddz) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(ForceExitTableResponseddz other) {
        if (other == global::gt_msg.ForceExitTableResponseddz.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_forceExitTableResponseddzFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _forceExitTableResponseddzFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.code_, out unknown)) {
                result.hasCode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
       get { return result.hasCode; }
      }
      public global::gt_msg.ForceExitTableResponseddz.Types.Code Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(global::gt_msg.ForceExitTableResponseddz.Types.Code value) {
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = global::gt_msg.ForceExitTableResponseddz.Types.Code.Normal;
        return this;
      }
    }
    static ForceExitTableResponseddz() {
      object.ReferenceEquals(global::gt_msg.GtDdz.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GameLifeRequestddz : pb::GeneratedMessage<GameLifeRequestddz, GameLifeRequestddz.Builder> {
    private GameLifeRequestddz() { }
    private static readonly GameLifeRequestddz defaultInstance = new GameLifeRequestddz().MakeReadOnly();
    private static readonly string[] _gameLifeRequestddzFieldNames = new string[] { "uid" };
    private static readonly uint[] _gameLifeRequestddzFieldTags = new uint[] { 10 };
    public static GameLifeRequestddz DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameLifeRequestddz DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameLifeRequestddz ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_GameLifeRequestddz__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameLifeRequestddz, GameLifeRequestddz.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_GameLifeRequestddz__FieldAccessorTable; }
    }
    
    public const int UidFieldNumber = 1;
    private bool hasUid;
    private string uid_ = "";
    public bool HasUid {
      get { return hasUid; }
    }
    public string Uid {
      get { return uid_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasUid) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _gameLifeRequestddzFieldNames;
      if (hasUid) {
        output.WriteString(1, field_names[0], Uid);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasUid) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Uid);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GameLifeRequestddz ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameLifeRequestddz ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameLifeRequestddz ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameLifeRequestddz ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameLifeRequestddz ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameLifeRequestddz ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameLifeRequestddz ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameLifeRequestddz ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameLifeRequestddz ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameLifeRequestddz ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameLifeRequestddz MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameLifeRequestddz prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GameLifeRequestddz, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameLifeRequestddz cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameLifeRequestddz result;
      
      private GameLifeRequestddz PrepareBuilder() {
        if (resultIsReadOnly) {
          GameLifeRequestddz original = result;
          result = new GameLifeRequestddz();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameLifeRequestddz MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.GameLifeRequestddz.Descriptor; }
      }
      
      public override GameLifeRequestddz DefaultInstanceForType {
        get { return global::gt_msg.GameLifeRequestddz.DefaultInstance; }
      }
      
      public override GameLifeRequestddz BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameLifeRequestddz) {
          return MergeFrom((GameLifeRequestddz) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameLifeRequestddz other) {
        if (other == global::gt_msg.GameLifeRequestddz.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasUid) {
          Uid = other.Uid;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameLifeRequestddzFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameLifeRequestddzFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10: {
              result.hasUid = input.ReadString(ref result.uid_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasUid {
        get { return result.hasUid; }
      }
      public string Uid {
        get { return result.Uid; }
        set { SetUid(value); }
      }
      public Builder SetUid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUid = true;
        result.uid_ = value;
        return this;
      }
      public Builder ClearUid() {
        PrepareBuilder();
        result.hasUid = false;
        result.uid_ = "";
        return this;
      }
    }
    static GameLifeRequestddz() {
      object.ReferenceEquals(global::gt_msg.GtDdz.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GameLifeResponseddz : pb::GeneratedMessage<GameLifeResponseddz, GameLifeResponseddz.Builder> {
    private GameLifeResponseddz() { }
    private static readonly GameLifeResponseddz defaultInstance = new GameLifeResponseddz().MakeReadOnly();
    private static readonly string[] _gameLifeResponseddzFieldNames = new string[] { "code", "continueWin", "gameAllUserNum", "level1WinChips", "level1WinChipsRank", "level2WinChips", "level2WinChipsRank", "level3WinChips", "level3WinChipsRank", "level4WinChips", "level4WinChipsRank", "level5WinChips", "level5WinChipsRank", "lostTimes", "user_info", "winTimes" };
    private static readonly uint[] _gameLifeResponseddzFieldTags = new uint[] { 8, 40, 128, 48, 56, 64, 72, 80, 88, 96, 104, 112, 120, 32, 18, 24 };
    public static GameLifeResponseddz DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameLifeResponseddz DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameLifeResponseddz ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_GameLifeResponseddz__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameLifeResponseddz, GameLifeResponseddz.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_GameLifeResponseddz__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Code {
        Ok = 0,
        Failed = 1,
      }
      
    }
    #endregion
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private global::gt_msg.GameLifeResponseddz.Types.Code code_ = global::gt_msg.GameLifeResponseddz.Types.Code.Ok;
    public bool HasCode {
      get { return hasCode; }
    }
    public global::gt_msg.GameLifeResponseddz.Types.Code Code {
      get { return code_; }
    }
    
    public const int UserInfoFieldNumber = 2;
    private bool hasUserInfo;
    private global::gt_msg.User userInfo_;
    public bool HasUserInfo {
      get { return hasUserInfo; }
    }
    public global::gt_msg.User UserInfo {
      get { return userInfo_ ?? global::gt_msg.User.DefaultInstance; }
    }
    
    public const int WinTimesFieldNumber = 3;
    private bool hasWinTimes;
    private int winTimes_;
    public bool HasWinTimes {
      get { return hasWinTimes; }
    }
    public int WinTimes {
      get { return winTimes_; }
    }
    
    public const int LostTimesFieldNumber = 4;
    private bool hasLostTimes;
    private int lostTimes_;
    public bool HasLostTimes {
      get { return hasLostTimes; }
    }
    public int LostTimes {
      get { return lostTimes_; }
    }
    
    public const int ContinueWinFieldNumber = 5;
    private bool hasContinueWin;
    private int continueWin_;
    public bool HasContinueWin {
      get { return hasContinueWin; }
    }
    public int ContinueWin {
      get { return continueWin_; }
    }
    
    public const int Level1WinChipsFieldNumber = 6;
    private bool hasLevel1WinChips;
    private long level1WinChips_;
    public bool HasLevel1WinChips {
      get { return hasLevel1WinChips; }
    }
    public long Level1WinChips {
      get { return level1WinChips_; }
    }
    
    public const int Level1WinChipsRankFieldNumber = 7;
    private bool hasLevel1WinChipsRank;
    private int level1WinChipsRank_;
    public bool HasLevel1WinChipsRank {
      get { return hasLevel1WinChipsRank; }
    }
    public int Level1WinChipsRank {
      get { return level1WinChipsRank_; }
    }
    
    public const int Level2WinChipsFieldNumber = 8;
    private bool hasLevel2WinChips;
    private long level2WinChips_;
    public bool HasLevel2WinChips {
      get { return hasLevel2WinChips; }
    }
    public long Level2WinChips {
      get { return level2WinChips_; }
    }
    
    public const int Level2WinChipsRankFieldNumber = 9;
    private bool hasLevel2WinChipsRank;
    private int level2WinChipsRank_;
    public bool HasLevel2WinChipsRank {
      get { return hasLevel2WinChipsRank; }
    }
    public int Level2WinChipsRank {
      get { return level2WinChipsRank_; }
    }
    
    public const int Level3WinChipsFieldNumber = 10;
    private bool hasLevel3WinChips;
    private long level3WinChips_;
    public bool HasLevel3WinChips {
      get { return hasLevel3WinChips; }
    }
    public long Level3WinChips {
      get { return level3WinChips_; }
    }
    
    public const int Level3WinChipsRankFieldNumber = 11;
    private bool hasLevel3WinChipsRank;
    private int level3WinChipsRank_;
    public bool HasLevel3WinChipsRank {
      get { return hasLevel3WinChipsRank; }
    }
    public int Level3WinChipsRank {
      get { return level3WinChipsRank_; }
    }
    
    public const int Level4WinChipsFieldNumber = 12;
    private bool hasLevel4WinChips;
    private long level4WinChips_;
    public bool HasLevel4WinChips {
      get { return hasLevel4WinChips; }
    }
    public long Level4WinChips {
      get { return level4WinChips_; }
    }
    
    public const int Level4WinChipsRankFieldNumber = 13;
    private bool hasLevel4WinChipsRank;
    private int level4WinChipsRank_;
    public bool HasLevel4WinChipsRank {
      get { return hasLevel4WinChipsRank; }
    }
    public int Level4WinChipsRank {
      get { return level4WinChipsRank_; }
    }
    
    public const int Level5WinChipsFieldNumber = 14;
    private bool hasLevel5WinChips;
    private long level5WinChips_;
    public bool HasLevel5WinChips {
      get { return hasLevel5WinChips; }
    }
    public long Level5WinChips {
      get { return level5WinChips_; }
    }
    
    public const int Level5WinChipsRankFieldNumber = 15;
    private bool hasLevel5WinChipsRank;
    private int level5WinChipsRank_;
    public bool HasLevel5WinChipsRank {
      get { return hasLevel5WinChipsRank; }
    }
    public int Level5WinChipsRank {
      get { return level5WinChipsRank_; }
    }
    
    public const int GameAllUserNumFieldNumber = 16;
    private bool hasGameAllUserNum;
    private int gameAllUserNum_;
    public bool HasGameAllUserNum {
      get { return hasGameAllUserNum; }
    }
    public int GameAllUserNum {
      get { return gameAllUserNum_; }
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        if (!hasUserInfo) return false;
        if (!UserInfo.IsInitialized) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _gameLifeResponseddzFieldNames;
      if (hasCode) {
        output.WriteEnum(1, field_names[0], (int) Code, Code);
      }
      if (hasUserInfo) {
        output.WriteMessage(2, field_names[14], UserInfo);
      }
      if (hasWinTimes) {
        output.WriteInt32(3, field_names[15], WinTimes);
      }
      if (hasLostTimes) {
        output.WriteInt32(4, field_names[13], LostTimes);
      }
      if (hasContinueWin) {
        output.WriteInt32(5, field_names[1], ContinueWin);
      }
      if (hasLevel1WinChips) {
        output.WriteInt64(6, field_names[3], Level1WinChips);
      }
      if (hasLevel1WinChipsRank) {
        output.WriteInt32(7, field_names[4], Level1WinChipsRank);
      }
      if (hasLevel2WinChips) {
        output.WriteInt64(8, field_names[5], Level2WinChips);
      }
      if (hasLevel2WinChipsRank) {
        output.WriteInt32(9, field_names[6], Level2WinChipsRank);
      }
      if (hasLevel3WinChips) {
        output.WriteInt64(10, field_names[7], Level3WinChips);
      }
      if (hasLevel3WinChipsRank) {
        output.WriteInt32(11, field_names[8], Level3WinChipsRank);
      }
      if (hasLevel4WinChips) {
        output.WriteInt64(12, field_names[9], Level4WinChips);
      }
      if (hasLevel4WinChipsRank) {
        output.WriteInt32(13, field_names[10], Level4WinChipsRank);
      }
      if (hasLevel5WinChips) {
        output.WriteInt64(14, field_names[11], Level5WinChips);
      }
      if (hasLevel5WinChipsRank) {
        output.WriteInt32(15, field_names[12], Level5WinChipsRank);
      }
      if (hasGameAllUserNum) {
        output.WriteInt32(16, field_names[2], GameAllUserNum);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCode) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Code);
      }
      if (hasUserInfo) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, UserInfo);
      }
      if (hasWinTimes) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, WinTimes);
      }
      if (hasLostTimes) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, LostTimes);
      }
      if (hasContinueWin) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, ContinueWin);
      }
      if (hasLevel1WinChips) {
        size += pb::CodedOutputStream.ComputeInt64Size(6, Level1WinChips);
      }
      if (hasLevel1WinChipsRank) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, Level1WinChipsRank);
      }
      if (hasLevel2WinChips) {
        size += pb::CodedOutputStream.ComputeInt64Size(8, Level2WinChips);
      }
      if (hasLevel2WinChipsRank) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, Level2WinChipsRank);
      }
      if (hasLevel3WinChips) {
        size += pb::CodedOutputStream.ComputeInt64Size(10, Level3WinChips);
      }
      if (hasLevel3WinChipsRank) {
        size += pb::CodedOutputStream.ComputeInt32Size(11, Level3WinChipsRank);
      }
      if (hasLevel4WinChips) {
        size += pb::CodedOutputStream.ComputeInt64Size(12, Level4WinChips);
      }
      if (hasLevel4WinChipsRank) {
        size += pb::CodedOutputStream.ComputeInt32Size(13, Level4WinChipsRank);
      }
      if (hasLevel5WinChips) {
        size += pb::CodedOutputStream.ComputeInt64Size(14, Level5WinChips);
      }
      if (hasLevel5WinChipsRank) {
        size += pb::CodedOutputStream.ComputeInt32Size(15, Level5WinChipsRank);
      }
      if (hasGameAllUserNum) {
        size += pb::CodedOutputStream.ComputeInt32Size(16, GameAllUserNum);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GameLifeResponseddz ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameLifeResponseddz ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameLifeResponseddz ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameLifeResponseddz ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameLifeResponseddz ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameLifeResponseddz ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameLifeResponseddz ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameLifeResponseddz ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameLifeResponseddz ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameLifeResponseddz ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameLifeResponseddz MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameLifeResponseddz prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GameLifeResponseddz, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameLifeResponseddz cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameLifeResponseddz result;
      
      private GameLifeResponseddz PrepareBuilder() {
        if (resultIsReadOnly) {
          GameLifeResponseddz original = result;
          result = new GameLifeResponseddz();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameLifeResponseddz MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.GameLifeResponseddz.Descriptor; }
      }
      
      public override GameLifeResponseddz DefaultInstanceForType {
        get { return global::gt_msg.GameLifeResponseddz.DefaultInstance; }
      }
      
      public override GameLifeResponseddz BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameLifeResponseddz) {
          return MergeFrom((GameLifeResponseddz) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameLifeResponseddz other) {
        if (other == global::gt_msg.GameLifeResponseddz.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        if (other.HasUserInfo) {
          MergeUserInfo(other.UserInfo);
        }
        if (other.HasWinTimes) {
          WinTimes = other.WinTimes;
        }
        if (other.HasLostTimes) {
          LostTimes = other.LostTimes;
        }
        if (other.HasContinueWin) {
          ContinueWin = other.ContinueWin;
        }
        if (other.HasLevel1WinChips) {
          Level1WinChips = other.Level1WinChips;
        }
        if (other.HasLevel1WinChipsRank) {
          Level1WinChipsRank = other.Level1WinChipsRank;
        }
        if (other.HasLevel2WinChips) {
          Level2WinChips = other.Level2WinChips;
        }
        if (other.HasLevel2WinChipsRank) {
          Level2WinChipsRank = other.Level2WinChipsRank;
        }
        if (other.HasLevel3WinChips) {
          Level3WinChips = other.Level3WinChips;
        }
        if (other.HasLevel3WinChipsRank) {
          Level3WinChipsRank = other.Level3WinChipsRank;
        }
        if (other.HasLevel4WinChips) {
          Level4WinChips = other.Level4WinChips;
        }
        if (other.HasLevel4WinChipsRank) {
          Level4WinChipsRank = other.Level4WinChipsRank;
        }
        if (other.HasLevel5WinChips) {
          Level5WinChips = other.Level5WinChips;
        }
        if (other.HasLevel5WinChipsRank) {
          Level5WinChipsRank = other.Level5WinChipsRank;
        }
        if (other.HasGameAllUserNum) {
          GameAllUserNum = other.GameAllUserNum;
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameLifeResponseddzFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameLifeResponseddzFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.code_, out unknown)) {
                result.hasCode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              global::gt_msg.User.Builder subBuilder = global::gt_msg.User.CreateBuilder();
              if (result.hasUserInfo) {
                subBuilder.MergeFrom(UserInfo);
              }
              input.ReadMessage(subBuilder, extensionRegistry);
              UserInfo = subBuilder.BuildPartial();
              break;
            }
            case 24: {
              result.hasWinTimes = input.ReadInt32(ref result.winTimes_);
              break;
            }
            case 32: {
              result.hasLostTimes = input.ReadInt32(ref result.lostTimes_);
              break;
            }
            case 40: {
              result.hasContinueWin = input.ReadInt32(ref result.continueWin_);
              break;
            }
            case 48: {
              result.hasLevel1WinChips = input.ReadInt64(ref result.level1WinChips_);
              break;
            }
            case 56: {
              result.hasLevel1WinChipsRank = input.ReadInt32(ref result.level1WinChipsRank_);
              break;
            }
            case 64: {
              result.hasLevel2WinChips = input.ReadInt64(ref result.level2WinChips_);
              break;
            }
            case 72: {
              result.hasLevel2WinChipsRank = input.ReadInt32(ref result.level2WinChipsRank_);
              break;
            }
            case 80: {
              result.hasLevel3WinChips = input.ReadInt64(ref result.level3WinChips_);
              break;
            }
            case 88: {
              result.hasLevel3WinChipsRank = input.ReadInt32(ref result.level3WinChipsRank_);
              break;
            }
            case 96: {
              result.hasLevel4WinChips = input.ReadInt64(ref result.level4WinChips_);
              break;
            }
            case 104: {
              result.hasLevel4WinChipsRank = input.ReadInt32(ref result.level4WinChipsRank_);
              break;
            }
            case 112: {
              result.hasLevel5WinChips = input.ReadInt64(ref result.level5WinChips_);
              break;
            }
            case 120: {
              result.hasLevel5WinChipsRank = input.ReadInt32(ref result.level5WinChipsRank_);
              break;
            }
            case 128: {
              result.hasGameAllUserNum = input.ReadInt32(ref result.gameAllUserNum_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
       get { return result.hasCode; }
      }
      public global::gt_msg.GameLifeResponseddz.Types.Code Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(global::gt_msg.GameLifeResponseddz.Types.Code value) {
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = global::gt_msg.GameLifeResponseddz.Types.Code.Ok;
        return this;
      }
      
      public bool HasUserInfo {
       get { return result.hasUserInfo; }
      }
      public global::gt_msg.User UserInfo {
        get { return result.UserInfo; }
        set { SetUserInfo(value); }
      }
      public Builder SetUserInfo(global::gt_msg.User value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUserInfo = true;
        result.userInfo_ = value;
        return this;
      }
      public Builder SetUserInfo(global::gt_msg.User.Builder builderForValue) {
        pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
        PrepareBuilder();
        result.hasUserInfo = true;
        result.userInfo_ = builderForValue.Build();
        return this;
      }
      public Builder MergeUserInfo(global::gt_msg.User value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        if (result.hasUserInfo &&
            result.userInfo_ != global::gt_msg.User.DefaultInstance) {
            result.userInfo_ = global::gt_msg.User.CreateBuilder(result.userInfo_).MergeFrom(value).BuildPartial();
        } else {
          result.userInfo_ = value;
        }
        result.hasUserInfo = true;
        return this;
      }
      public Builder ClearUserInfo() {
        PrepareBuilder();
        result.hasUserInfo = false;
        result.userInfo_ = null;
        return this;
      }
      
      public bool HasWinTimes {
        get { return result.hasWinTimes; }
      }
      public int WinTimes {
        get { return result.WinTimes; }
        set { SetWinTimes(value); }
      }
      public Builder SetWinTimes(int value) {
        PrepareBuilder();
        result.hasWinTimes = true;
        result.winTimes_ = value;
        return this;
      }
      public Builder ClearWinTimes() {
        PrepareBuilder();
        result.hasWinTimes = false;
        result.winTimes_ = 0;
        return this;
      }
      
      public bool HasLostTimes {
        get { return result.hasLostTimes; }
      }
      public int LostTimes {
        get { return result.LostTimes; }
        set { SetLostTimes(value); }
      }
      public Builder SetLostTimes(int value) {
        PrepareBuilder();
        result.hasLostTimes = true;
        result.lostTimes_ = value;
        return this;
      }
      public Builder ClearLostTimes() {
        PrepareBuilder();
        result.hasLostTimes = false;
        result.lostTimes_ = 0;
        return this;
      }
      
      public bool HasContinueWin {
        get { return result.hasContinueWin; }
      }
      public int ContinueWin {
        get { return result.ContinueWin; }
        set { SetContinueWin(value); }
      }
      public Builder SetContinueWin(int value) {
        PrepareBuilder();
        result.hasContinueWin = true;
        result.continueWin_ = value;
        return this;
      }
      public Builder ClearContinueWin() {
        PrepareBuilder();
        result.hasContinueWin = false;
        result.continueWin_ = 0;
        return this;
      }
      
      public bool HasLevel1WinChips {
        get { return result.hasLevel1WinChips; }
      }
      public long Level1WinChips {
        get { return result.Level1WinChips; }
        set { SetLevel1WinChips(value); }
      }
      public Builder SetLevel1WinChips(long value) {
        PrepareBuilder();
        result.hasLevel1WinChips = true;
        result.level1WinChips_ = value;
        return this;
      }
      public Builder ClearLevel1WinChips() {
        PrepareBuilder();
        result.hasLevel1WinChips = false;
        result.level1WinChips_ = 0L;
        return this;
      }
      
      public bool HasLevel1WinChipsRank {
        get { return result.hasLevel1WinChipsRank; }
      }
      public int Level1WinChipsRank {
        get { return result.Level1WinChipsRank; }
        set { SetLevel1WinChipsRank(value); }
      }
      public Builder SetLevel1WinChipsRank(int value) {
        PrepareBuilder();
        result.hasLevel1WinChipsRank = true;
        result.level1WinChipsRank_ = value;
        return this;
      }
      public Builder ClearLevel1WinChipsRank() {
        PrepareBuilder();
        result.hasLevel1WinChipsRank = false;
        result.level1WinChipsRank_ = 0;
        return this;
      }
      
      public bool HasLevel2WinChips {
        get { return result.hasLevel2WinChips; }
      }
      public long Level2WinChips {
        get { return result.Level2WinChips; }
        set { SetLevel2WinChips(value); }
      }
      public Builder SetLevel2WinChips(long value) {
        PrepareBuilder();
        result.hasLevel2WinChips = true;
        result.level2WinChips_ = value;
        return this;
      }
      public Builder ClearLevel2WinChips() {
        PrepareBuilder();
        result.hasLevel2WinChips = false;
        result.level2WinChips_ = 0L;
        return this;
      }
      
      public bool HasLevel2WinChipsRank {
        get { return result.hasLevel2WinChipsRank; }
      }
      public int Level2WinChipsRank {
        get { return result.Level2WinChipsRank; }
        set { SetLevel2WinChipsRank(value); }
      }
      public Builder SetLevel2WinChipsRank(int value) {
        PrepareBuilder();
        result.hasLevel2WinChipsRank = true;
        result.level2WinChipsRank_ = value;
        return this;
      }
      public Builder ClearLevel2WinChipsRank() {
        PrepareBuilder();
        result.hasLevel2WinChipsRank = false;
        result.level2WinChipsRank_ = 0;
        return this;
      }
      
      public bool HasLevel3WinChips {
        get { return result.hasLevel3WinChips; }
      }
      public long Level3WinChips {
        get { return result.Level3WinChips; }
        set { SetLevel3WinChips(value); }
      }
      public Builder SetLevel3WinChips(long value) {
        PrepareBuilder();
        result.hasLevel3WinChips = true;
        result.level3WinChips_ = value;
        return this;
      }
      public Builder ClearLevel3WinChips() {
        PrepareBuilder();
        result.hasLevel3WinChips = false;
        result.level3WinChips_ = 0L;
        return this;
      }
      
      public bool HasLevel3WinChipsRank {
        get { return result.hasLevel3WinChipsRank; }
      }
      public int Level3WinChipsRank {
        get { return result.Level3WinChipsRank; }
        set { SetLevel3WinChipsRank(value); }
      }
      public Builder SetLevel3WinChipsRank(int value) {
        PrepareBuilder();
        result.hasLevel3WinChipsRank = true;
        result.level3WinChipsRank_ = value;
        return this;
      }
      public Builder ClearLevel3WinChipsRank() {
        PrepareBuilder();
        result.hasLevel3WinChipsRank = false;
        result.level3WinChipsRank_ = 0;
        return this;
      }
      
      public bool HasLevel4WinChips {
        get { return result.hasLevel4WinChips; }
      }
      public long Level4WinChips {
        get { return result.Level4WinChips; }
        set { SetLevel4WinChips(value); }
      }
      public Builder SetLevel4WinChips(long value) {
        PrepareBuilder();
        result.hasLevel4WinChips = true;
        result.level4WinChips_ = value;
        return this;
      }
      public Builder ClearLevel4WinChips() {
        PrepareBuilder();
        result.hasLevel4WinChips = false;
        result.level4WinChips_ = 0L;
        return this;
      }
      
      public bool HasLevel4WinChipsRank {
        get { return result.hasLevel4WinChipsRank; }
      }
      public int Level4WinChipsRank {
        get { return result.Level4WinChipsRank; }
        set { SetLevel4WinChipsRank(value); }
      }
      public Builder SetLevel4WinChipsRank(int value) {
        PrepareBuilder();
        result.hasLevel4WinChipsRank = true;
        result.level4WinChipsRank_ = value;
        return this;
      }
      public Builder ClearLevel4WinChipsRank() {
        PrepareBuilder();
        result.hasLevel4WinChipsRank = false;
        result.level4WinChipsRank_ = 0;
        return this;
      }
      
      public bool HasLevel5WinChips {
        get { return result.hasLevel5WinChips; }
      }
      public long Level5WinChips {
        get { return result.Level5WinChips; }
        set { SetLevel5WinChips(value); }
      }
      public Builder SetLevel5WinChips(long value) {
        PrepareBuilder();
        result.hasLevel5WinChips = true;
        result.level5WinChips_ = value;
        return this;
      }
      public Builder ClearLevel5WinChips() {
        PrepareBuilder();
        result.hasLevel5WinChips = false;
        result.level5WinChips_ = 0L;
        return this;
      }
      
      public bool HasLevel5WinChipsRank {
        get { return result.hasLevel5WinChipsRank; }
      }
      public int Level5WinChipsRank {
        get { return result.Level5WinChipsRank; }
        set { SetLevel5WinChipsRank(value); }
      }
      public Builder SetLevel5WinChipsRank(int value) {
        PrepareBuilder();
        result.hasLevel5WinChipsRank = true;
        result.level5WinChipsRank_ = value;
        return this;
      }
      public Builder ClearLevel5WinChipsRank() {
        PrepareBuilder();
        result.hasLevel5WinChipsRank = false;
        result.level5WinChipsRank_ = 0;
        return this;
      }
      
      public bool HasGameAllUserNum {
        get { return result.hasGameAllUserNum; }
      }
      public int GameAllUserNum {
        get { return result.GameAllUserNum; }
        set { SetGameAllUserNum(value); }
      }
      public Builder SetGameAllUserNum(int value) {
        PrepareBuilder();
        result.hasGameAllUserNum = true;
        result.gameAllUserNum_ = value;
        return this;
      }
      public Builder ClearGameAllUserNum() {
        PrepareBuilder();
        result.hasGameAllUserNum = false;
        result.gameAllUserNum_ = 0;
        return this;
      }
    }
    static GameLifeResponseddz() {
      object.ReferenceEquals(global::gt_msg.GtDdz.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GameRankListRequestddz : pb::GeneratedMessage<GameRankListRequestddz, GameRankListRequestddz.Builder> {
    private GameRankListRequestddz() { }
    private static readonly GameRankListRequestddz defaultInstance = new GameRankListRequestddz().MakeReadOnly();
    private static readonly string[] _gameRankListRequestddzFieldNames = new string[] {  };
    private static readonly uint[] _gameRankListRequestddzFieldTags = new uint[] {  };
    public static GameRankListRequestddz DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameRankListRequestddz DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameRankListRequestddz ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_GameRankListRequestddz__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameRankListRequestddz, GameRankListRequestddz.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_GameRankListRequestddz__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _gameRankListRequestddzFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GameRankListRequestddz ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameRankListRequestddz ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameRankListRequestddz ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameRankListRequestddz ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameRankListRequestddz ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameRankListRequestddz ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameRankListRequestddz ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameRankListRequestddz ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameRankListRequestddz ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameRankListRequestddz ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameRankListRequestddz MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameRankListRequestddz prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GameRankListRequestddz, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameRankListRequestddz cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameRankListRequestddz result;
      
      private GameRankListRequestddz PrepareBuilder() {
        if (resultIsReadOnly) {
          GameRankListRequestddz original = result;
          result = new GameRankListRequestddz();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameRankListRequestddz MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.GameRankListRequestddz.Descriptor; }
      }
      
      public override GameRankListRequestddz DefaultInstanceForType {
        get { return global::gt_msg.GameRankListRequestddz.DefaultInstance; }
      }
      
      public override GameRankListRequestddz BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameRankListRequestddz) {
          return MergeFrom((GameRankListRequestddz) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameRankListRequestddz other) {
        if (other == global::gt_msg.GameRankListRequestddz.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameRankListRequestddzFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameRankListRequestddzFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static GameRankListRequestddz() {
      object.ReferenceEquals(global::gt_msg.GtDdz.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GameRankListResponseddz : pb::GeneratedMessage<GameRankListResponseddz, GameRankListResponseddz.Builder> {
    private GameRankListResponseddz() { }
    private static readonly GameRankListResponseddz defaultInstance = new GameRankListResponseddz().MakeReadOnly();
    private static readonly string[] _gameRankListResponseddzFieldNames = new string[] { "all_chips", "all_times", "code", "day_win_chips", "uid" };
    private static readonly uint[] _gameRankListResponseddzFieldTags = new uint[] { 42, 34, 8, 26, 18 };
    public static GameRankListResponseddz DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameRankListResponseddz DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameRankListResponseddz ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_GameRankListResponseddz__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameRankListResponseddz, GameRankListResponseddz.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_GameRankListResponseddz__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Code {
        Ok = 0,
        Failed = 1,
      }
      
    }
    #endregion
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private global::gt_msg.GameRankListResponseddz.Types.Code code_ = global::gt_msg.GameRankListResponseddz.Types.Code.Ok;
    public bool HasCode {
      get { return hasCode; }
    }
    public global::gt_msg.GameRankListResponseddz.Types.Code Code {
      get { return code_; }
    }
    
    public const int UidFieldNumber = 2;
    private bool hasUid;
    private string uid_ = "";
    public bool HasUid {
      get { return hasUid; }
    }
    public string Uid {
      get { return uid_; }
    }
    
    public const int DayWinChipsFieldNumber = 3;
    private pbc::PopsicleList<string> dayWinChips_ = new pbc::PopsicleList<string>();
    public scg::IList<string> DayWinChipsList {
      get { return pbc::Lists.AsReadOnly(dayWinChips_); }
    }
    public int DayWinChipsCount {
      get { return dayWinChips_.Count; }
    }
    public string GetDayWinChips(int index) {
      return dayWinChips_[index];
    }
    
    public const int AllTimesFieldNumber = 4;
    private pbc::PopsicleList<string> allTimes_ = new pbc::PopsicleList<string>();
    public scg::IList<string> AllTimesList {
      get { return pbc::Lists.AsReadOnly(allTimes_); }
    }
    public int AllTimesCount {
      get { return allTimes_.Count; }
    }
    public string GetAllTimes(int index) {
      return allTimes_[index];
    }
    
    public const int AllChipsFieldNumber = 5;
    private pbc::PopsicleList<string> allChips_ = new pbc::PopsicleList<string>();
    public scg::IList<string> AllChipsList {
      get { return pbc::Lists.AsReadOnly(allChips_); }
    }
    public int AllChipsCount {
      get { return allChips_.Count; }
    }
    public string GetAllChips(int index) {
      return allChips_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        if (!hasUid) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _gameRankListResponseddzFieldNames;
      if (hasCode) {
        output.WriteEnum(1, field_names[2], (int) Code, Code);
      }
      if (hasUid) {
        output.WriteString(2, field_names[4], Uid);
      }
      if (dayWinChips_.Count > 0) {
        output.WriteStringArray(3, field_names[3], dayWinChips_);
      }
      if (allTimes_.Count > 0) {
        output.WriteStringArray(4, field_names[1], allTimes_);
      }
      if (allChips_.Count > 0) {
        output.WriteStringArray(5, field_names[0], allChips_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCode) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Code);
      }
      if (hasUid) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Uid);
      }
      {
        int dataSize = 0;
        foreach (string element in DayWinChipsList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * dayWinChips_.Count;
      }
      {
        int dataSize = 0;
        foreach (string element in AllTimesList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * allTimes_.Count;
      }
      {
        int dataSize = 0;
        foreach (string element in AllChipsList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * allChips_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GameRankListResponseddz ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameRankListResponseddz ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameRankListResponseddz ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameRankListResponseddz ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameRankListResponseddz ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameRankListResponseddz ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameRankListResponseddz ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameRankListResponseddz ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameRankListResponseddz ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameRankListResponseddz ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameRankListResponseddz MakeReadOnly() {
      dayWinChips_.MakeReadOnly();
      allTimes_.MakeReadOnly();
      allChips_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameRankListResponseddz prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GameRankListResponseddz, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameRankListResponseddz cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameRankListResponseddz result;
      
      private GameRankListResponseddz PrepareBuilder() {
        if (resultIsReadOnly) {
          GameRankListResponseddz original = result;
          result = new GameRankListResponseddz();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameRankListResponseddz MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.GameRankListResponseddz.Descriptor; }
      }
      
      public override GameRankListResponseddz DefaultInstanceForType {
        get { return global::gt_msg.GameRankListResponseddz.DefaultInstance; }
      }
      
      public override GameRankListResponseddz BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameRankListResponseddz) {
          return MergeFrom((GameRankListResponseddz) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameRankListResponseddz other) {
        if (other == global::gt_msg.GameRankListResponseddz.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        if (other.HasUid) {
          Uid = other.Uid;
        }
        if (other.dayWinChips_.Count != 0) {
          result.dayWinChips_.Add(other.dayWinChips_);
        }
        if (other.allTimes_.Count != 0) {
          result.allTimes_.Add(other.allTimes_);
        }
        if (other.allChips_.Count != 0) {
          result.allChips_.Add(other.allChips_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameRankListResponseddzFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameRankListResponseddzFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.code_, out unknown)) {
                result.hasCode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18: {
              result.hasUid = input.ReadString(ref result.uid_);
              break;
            }
            case 26: {
              input.ReadStringArray(tag, field_name, result.dayWinChips_);
              break;
            }
            case 34: {
              input.ReadStringArray(tag, field_name, result.allTimes_);
              break;
            }
            case 42: {
              input.ReadStringArray(tag, field_name, result.allChips_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
       get { return result.hasCode; }
      }
      public global::gt_msg.GameRankListResponseddz.Types.Code Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(global::gt_msg.GameRankListResponseddz.Types.Code value) {
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = global::gt_msg.GameRankListResponseddz.Types.Code.Ok;
        return this;
      }
      
      public bool HasUid {
        get { return result.hasUid; }
      }
      public string Uid {
        get { return result.Uid; }
        set { SetUid(value); }
      }
      public Builder SetUid(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.hasUid = true;
        result.uid_ = value;
        return this;
      }
      public Builder ClearUid() {
        PrepareBuilder();
        result.hasUid = false;
        result.uid_ = "";
        return this;
      }
      
      public pbc::IPopsicleList<string> DayWinChipsList {
        get { return PrepareBuilder().dayWinChips_; }
      }
      public int DayWinChipsCount {
        get { return result.DayWinChipsCount; }
      }
      public string GetDayWinChips(int index) {
        return result.GetDayWinChips(index);
      }
      public Builder SetDayWinChips(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.dayWinChips_[index] = value;
        return this;
      }
      public Builder AddDayWinChips(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.dayWinChips_.Add(value);
        return this;
      }
      public Builder AddRangeDayWinChips(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.dayWinChips_.Add(values);
        return this;
      }
      public Builder ClearDayWinChips() {
        PrepareBuilder();
        result.dayWinChips_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> AllTimesList {
        get { return PrepareBuilder().allTimes_; }
      }
      public int AllTimesCount {
        get { return result.AllTimesCount; }
      }
      public string GetAllTimes(int index) {
        return result.GetAllTimes(index);
      }
      public Builder SetAllTimes(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.allTimes_[index] = value;
        return this;
      }
      public Builder AddAllTimes(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.allTimes_.Add(value);
        return this;
      }
      public Builder AddRangeAllTimes(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.allTimes_.Add(values);
        return this;
      }
      public Builder ClearAllTimes() {
        PrepareBuilder();
        result.allTimes_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<string> AllChipsList {
        get { return PrepareBuilder().allChips_; }
      }
      public int AllChipsCount {
        get { return result.AllChipsCount; }
      }
      public string GetAllChips(int index) {
        return result.GetAllChips(index);
      }
      public Builder SetAllChips(int index, string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.allChips_[index] = value;
        return this;
      }
      public Builder AddAllChips(string value) {
        pb::ThrowHelper.ThrowIfNull(value, "value");
        PrepareBuilder();
        result.allChips_.Add(value);
        return this;
      }
      public Builder AddRangeAllChips(scg::IEnumerable<string> values) {
        PrepareBuilder();
        result.allChips_.Add(values);
        return this;
      }
      public Builder ClearAllChips() {
        PrepareBuilder();
        result.allChips_.Clear();
        return this;
      }
    }
    static GameRankListResponseddz() {
      object.ReferenceEquals(global::gt_msg.GtDdz.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GameReadyRequestddz : pb::GeneratedMessage<GameReadyRequestddz, GameReadyRequestddz.Builder> {
    private GameReadyRequestddz() { }
    private static readonly GameReadyRequestddz defaultInstance = new GameReadyRequestddz().MakeReadOnly();
    private static readonly string[] _gameReadyRequestddzFieldNames = new string[] {  };
    private static readonly uint[] _gameReadyRequestddzFieldTags = new uint[] {  };
    public static GameReadyRequestddz DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameReadyRequestddz DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameReadyRequestddz ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_GameReadyRequestddz__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameReadyRequestddz, GameReadyRequestddz.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_GameReadyRequestddz__FieldAccessorTable; }
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _gameReadyRequestddzFieldNames;
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GameReadyRequestddz ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameReadyRequestddz ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameReadyRequestddz ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameReadyRequestddz ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameReadyRequestddz ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameReadyRequestddz ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameReadyRequestddz ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameReadyRequestddz ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameReadyRequestddz ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameReadyRequestddz ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameReadyRequestddz MakeReadOnly() {
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameReadyRequestddz prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GameReadyRequestddz, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameReadyRequestddz cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameReadyRequestddz result;
      
      private GameReadyRequestddz PrepareBuilder() {
        if (resultIsReadOnly) {
          GameReadyRequestddz original = result;
          result = new GameReadyRequestddz();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameReadyRequestddz MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.GameReadyRequestddz.Descriptor; }
      }
      
      public override GameReadyRequestddz DefaultInstanceForType {
        get { return global::gt_msg.GameReadyRequestddz.DefaultInstance; }
      }
      
      public override GameReadyRequestddz BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameReadyRequestddz) {
          return MergeFrom((GameReadyRequestddz) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameReadyRequestddz other) {
        if (other == global::gt_msg.GameReadyRequestddz.DefaultInstance) return this;
        PrepareBuilder();
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameReadyRequestddzFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameReadyRequestddzFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
    }
    static GameReadyRequestddz() {
      object.ReferenceEquals(global::gt_msg.GtDdz.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GameReadyResponseddz : pb::GeneratedMessage<GameReadyResponseddz, GameReadyResponseddz.Builder> {
    private GameReadyResponseddz() { }
    private static readonly GameReadyResponseddz defaultInstance = new GameReadyResponseddz().MakeReadOnly();
    private static readonly string[] _gameReadyResponseddzFieldNames = new string[] { "code", "playerReady" };
    private static readonly uint[] _gameReadyResponseddzFieldTags = new uint[] { 8, 16 };
    public static GameReadyResponseddz DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GameReadyResponseddz DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GameReadyResponseddz ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_GameReadyResponseddz__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GameReadyResponseddz, GameReadyResponseddz.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_GameReadyResponseddz__FieldAccessorTable; }
    }
    
    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      public enum Code {
        OK = 0,
        Failed = 1,
      }
      
    }
    #endregion
    
    public const int CodeFieldNumber = 1;
    private bool hasCode;
    private global::gt_msg.GameReadyResponseddz.Types.Code code_ = global::gt_msg.GameReadyResponseddz.Types.Code.OK;
    public bool HasCode {
      get { return hasCode; }
    }
    public global::gt_msg.GameReadyResponseddz.Types.Code Code {
      get { return code_; }
    }
    
    public const int PlayerReadyFieldNumber = 2;
    private pbc::PopsicleList<int> playerReady_ = new pbc::PopsicleList<int>();
    public scg::IList<int> PlayerReadyList {
      get { return pbc::Lists.AsReadOnly(playerReady_); }
    }
    public int PlayerReadyCount {
      get { return playerReady_.Count; }
    }
    public int GetPlayerReady(int index) {
      return playerReady_[index];
    }
    
    public override bool IsInitialized {
      get {
        if (!hasCode) return false;
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _gameReadyResponseddzFieldNames;
      if (hasCode) {
        output.WriteEnum(1, field_names[0], (int) Code, Code);
      }
      if (playerReady_.Count > 0) {
        output.WriteInt32Array(2, field_names[1], playerReady_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCode) {
        size += pb::CodedOutputStream.ComputeEnumSize(1, (int) Code);
      }
      {
        int dataSize = 0;
        foreach (int element in PlayerReadyList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * playerReady_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GameReadyResponseddz ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameReadyResponseddz ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameReadyResponseddz ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GameReadyResponseddz ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GameReadyResponseddz ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameReadyResponseddz ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GameReadyResponseddz ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GameReadyResponseddz ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GameReadyResponseddz ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GameReadyResponseddz ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GameReadyResponseddz MakeReadOnly() {
      playerReady_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GameReadyResponseddz prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GameReadyResponseddz, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GameReadyResponseddz cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GameReadyResponseddz result;
      
      private GameReadyResponseddz PrepareBuilder() {
        if (resultIsReadOnly) {
          GameReadyResponseddz original = result;
          result = new GameReadyResponseddz();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GameReadyResponseddz MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.GameReadyResponseddz.Descriptor; }
      }
      
      public override GameReadyResponseddz DefaultInstanceForType {
        get { return global::gt_msg.GameReadyResponseddz.DefaultInstance; }
      }
      
      public override GameReadyResponseddz BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GameReadyResponseddz) {
          return MergeFrom((GameReadyResponseddz) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GameReadyResponseddz other) {
        if (other == global::gt_msg.GameReadyResponseddz.DefaultInstance) return this;
        PrepareBuilder();
        if (other.HasCode) {
          Code = other.Code;
        }
        if (other.playerReady_.Count != 0) {
          result.playerReady_.Add(other.playerReady_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gameReadyResponseddzFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gameReadyResponseddzFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 8: {
              object unknown;
              if(input.ReadEnum(ref result.code_, out unknown)) {
                result.hasCode = true;
              } else if(unknown is int) {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                unknownFields.MergeVarintField(1, (ulong)(int)unknown);
              }
              break;
            }
            case 18:
            case 16: {
              input.ReadInt32Array(tag, field_name, result.playerReady_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public bool HasCode {
       get { return result.hasCode; }
      }
      public global::gt_msg.GameReadyResponseddz.Types.Code Code {
        get { return result.Code; }
        set { SetCode(value); }
      }
      public Builder SetCode(global::gt_msg.GameReadyResponseddz.Types.Code value) {
        PrepareBuilder();
        result.hasCode = true;
        result.code_ = value;
        return this;
      }
      public Builder ClearCode() {
        PrepareBuilder();
        result.hasCode = false;
        result.code_ = global::gt_msg.GameReadyResponseddz.Types.Code.OK;
        return this;
      }
      
      public pbc::IPopsicleList<int> PlayerReadyList {
        get { return PrepareBuilder().playerReady_; }
      }
      public int PlayerReadyCount {
        get { return result.PlayerReadyCount; }
      }
      public int GetPlayerReady(int index) {
        return result.GetPlayerReady(index);
      }
      public Builder SetPlayerReady(int index, int value) {
        PrepareBuilder();
        result.playerReady_[index] = value;
        return this;
      }
      public Builder AddPlayerReady(int value) {
        PrepareBuilder();
        result.playerReady_.Add(value);
        return this;
      }
      public Builder AddRangePlayerReady(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.playerReady_.Add(values);
        return this;
      }
      public Builder ClearPlayerReady() {
        PrepareBuilder();
        result.playerReady_.Clear();
        return this;
      }
    }
    static GameReadyResponseddz() {
      object.ReferenceEquals(global::gt_msg.GtDdz.Descriptor, null);
    }
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class GMInfoddz : pb::GeneratedMessage<GMInfoddz, GMInfoddz.Builder> {
    private GMInfoddz() { }
    private static readonly GMInfoddz defaultInstance = new GMInfoddz().MakeReadOnly();
    private static readonly string[] _gMInfoddzFieldNames = new string[] { "HandCards1", "HandCards2", "HandCards3" };
    private static readonly uint[] _gMInfoddzFieldTags = new uint[] { 10, 18, 26 };
    public static GMInfoddz DefaultInstance {
      get { return defaultInstance; }
    }
    
    public override GMInfoddz DefaultInstanceForType {
      get { return DefaultInstance; }
    }
    
    protected override GMInfoddz ThisMessage {
      get { return this; }
    }
    
    public static pbd::MessageDescriptor Descriptor {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_GMInfoddz__Descriptor; }
    }
    
    protected override pb::FieldAccess.FieldAccessorTable<GMInfoddz, GMInfoddz.Builder> InternalFieldAccessors {
      get { return global::gt_msg.GtDdz.internal__static_gt_msg_GMInfoddz__FieldAccessorTable; }
    }
    
    public const int HandCards1FieldNumber = 1;
    private int handCards1MemoizedSerializedSize;
    private pbc::PopsicleList<int> handCards1_ = new pbc::PopsicleList<int>();
    public scg::IList<int> HandCards1List {
      get { return pbc::Lists.AsReadOnly(handCards1_); }
    }
    public int HandCards1Count {
      get { return handCards1_.Count; }
    }
    public int GetHandCards1(int index) {
      return handCards1_[index];
    }
    
    public const int HandCards2FieldNumber = 2;
    private int handCards2MemoizedSerializedSize;
    private pbc::PopsicleList<int> handCards2_ = new pbc::PopsicleList<int>();
    public scg::IList<int> HandCards2List {
      get { return pbc::Lists.AsReadOnly(handCards2_); }
    }
    public int HandCards2Count {
      get { return handCards2_.Count; }
    }
    public int GetHandCards2(int index) {
      return handCards2_[index];
    }
    
    public const int HandCards3FieldNumber = 3;
    private int handCards3MemoizedSerializedSize;
    private pbc::PopsicleList<int> handCards3_ = new pbc::PopsicleList<int>();
    public scg::IList<int> HandCards3List {
      get { return pbc::Lists.AsReadOnly(handCards3_); }
    }
    public int HandCards3Count {
      get { return handCards3_.Count; }
    }
    public int GetHandCards3(int index) {
      return handCards3_[index];
    }
    
    public override bool IsInitialized {
      get {
        return true;
      }
    }
    
    public override void WriteTo(pb::ICodedOutputStream output) {
      CalcSerializedSize();
      string[] field_names = _gMInfoddzFieldNames;
      if (handCards1_.Count > 0) {
        output.WritePackedInt32Array(1, field_names[0], handCards1MemoizedSerializedSize, handCards1_);
      }
      if (handCards2_.Count > 0) {
        output.WritePackedInt32Array(2, field_names[1], handCards2MemoizedSerializedSize, handCards2_);
      }
      if (handCards3_.Count > 0) {
        output.WritePackedInt32Array(3, field_names[2], handCards3MemoizedSerializedSize, handCards3_);
      }
      UnknownFields.WriteTo(output);
    }
    
    private int memoizedSerializedSize = -1;
    public override int SerializedSize {
      get {
        int size = memoizedSerializedSize;
        if (size != -1) return size;
        return CalcSerializedSize();
      }
    }
    
    private int CalcSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      {
        int dataSize = 0;
        foreach (int element in HandCards1List) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        if (handCards1_.Count != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
        }
        handCards1MemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        foreach (int element in HandCards2List) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        if (handCards2_.Count != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
        }
        handCards2MemoizedSerializedSize = dataSize;
      }
      {
        int dataSize = 0;
        foreach (int element in HandCards3List) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        if (handCards3_.Count != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32SizeNoTag(dataSize);
        }
        handCards3MemoizedSerializedSize = dataSize;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
    public static GMInfoddz ParseFrom(pb::ByteString data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GMInfoddz ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GMInfoddz ParseFrom(byte[] data) {
      return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
    }
    public static GMInfoddz ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
    }
    public static GMInfoddz ParseFrom(global::System.IO.Stream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GMInfoddz ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    public static GMInfoddz ParseDelimitedFrom(global::System.IO.Stream input) {
      return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
    }
    public static GMInfoddz ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
      return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
    }
    public static GMInfoddz ParseFrom(pb::ICodedInputStream input) {
      return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
    }
    public static GMInfoddz ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
    }
    private GMInfoddz MakeReadOnly() {
      handCards1_.MakeReadOnly();
      handCards2_.MakeReadOnly();
      handCards3_.MakeReadOnly();
      return this;
    }
    
    public static Builder CreateBuilder() { return new Builder(); }
    public override Builder ToBuilder() { return CreateBuilder(this); }
    public override Builder CreateBuilderForType() { return new Builder(); }
    public static Builder CreateBuilder(GMInfoddz prototype) {
      return new Builder(prototype);
    }
    
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Builder : pb::GeneratedBuilder<GMInfoddz, Builder> {
      protected override Builder ThisBuilder {
        get { return this; }
      }
      public Builder() {
        result = DefaultInstance;
        resultIsReadOnly = true;
      }
      internal Builder(GMInfoddz cloneFrom) {
        result = cloneFrom;
        resultIsReadOnly = true;
      }
      
      private bool resultIsReadOnly;
      private GMInfoddz result;
      
      private GMInfoddz PrepareBuilder() {
        if (resultIsReadOnly) {
          GMInfoddz original = result;
          result = new GMInfoddz();
          resultIsReadOnly = false;
          MergeFrom(original);
        }
        return result;
      }
      
      public override bool IsInitialized {
        get { return result.IsInitialized; }
      }
      
      protected override GMInfoddz MessageBeingBuilt {
        get { return PrepareBuilder(); }
      }
      
      public override Builder Clear() {
        result = DefaultInstance;
        resultIsReadOnly = true;
        return this;
      }
      
      public override Builder Clone() {
        if (resultIsReadOnly) {
          return new Builder(result);
        } else {
          return new Builder().MergeFrom(result);
        }
      }
      
      public override pbd::MessageDescriptor DescriptorForType {
        get { return global::gt_msg.GMInfoddz.Descriptor; }
      }
      
      public override GMInfoddz DefaultInstanceForType {
        get { return global::gt_msg.GMInfoddz.DefaultInstance; }
      }
      
      public override GMInfoddz BuildPartial() {
        if (resultIsReadOnly) {
          return result;
        }
        resultIsReadOnly = true;
        return result.MakeReadOnly();
      }
      
      public override Builder MergeFrom(pb::IMessage other) {
        if (other is GMInfoddz) {
          return MergeFrom((GMInfoddz) other);
        } else {
          base.MergeFrom(other);
          return this;
        }
      }
      
      public override Builder MergeFrom(GMInfoddz other) {
        if (other == global::gt_msg.GMInfoddz.DefaultInstance) return this;
        PrepareBuilder();
        if (other.handCards1_.Count != 0) {
          result.handCards1_.Add(other.handCards1_);
        }
        if (other.handCards2_.Count != 0) {
          result.handCards2_.Add(other.handCards2_);
        }
        if (other.handCards3_.Count != 0) {
          result.handCards3_.Add(other.handCards3_);
        }
        this.MergeUnknownFields(other.UnknownFields);
        return this;
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input) {
        return MergeFrom(input, pb::ExtensionRegistry.Empty);
      }
      
      public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        PrepareBuilder();
        pb::UnknownFieldSet.Builder unknownFields = null;
        uint tag;
        string field_name;
        while (input.ReadTag(out tag, out field_name)) {
          if(tag == 0 && field_name != null) {
            int field_ordinal = global::System.Array.BinarySearch(_gMInfoddzFieldNames, field_name, global::System.StringComparer.Ordinal);
            if(field_ordinal >= 0)
              tag = _gMInfoddzFieldTags[field_ordinal];
            else {
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              continue;
            }
          }
          switch (tag) {
            case 0: {
              throw pb::InvalidProtocolBufferException.InvalidTag();
            }
            default: {
              if (pb::WireFormat.IsEndGroupTag(tag)) {
                if (unknownFields != null) {
                  this.UnknownFields = unknownFields.Build();
                }
                return this;
              }
              if (unknownFields == null) {
                unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
              }
              ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
              break;
            }
            case 10:
            case 8: {
              input.ReadInt32Array(tag, field_name, result.handCards1_);
              break;
            }
            case 18:
            case 16: {
              input.ReadInt32Array(tag, field_name, result.handCards2_);
              break;
            }
            case 26:
            case 24: {
              input.ReadInt32Array(tag, field_name, result.handCards3_);
              break;
            }
          }
        }
        
        if (unknownFields != null) {
          this.UnknownFields = unknownFields.Build();
        }
        return this;
      }
      
      
      public pbc::IPopsicleList<int> HandCards1List {
        get { return PrepareBuilder().handCards1_; }
      }
      public int HandCards1Count {
        get { return result.HandCards1Count; }
      }
      public int GetHandCards1(int index) {
        return result.GetHandCards1(index);
      }
      public Builder SetHandCards1(int index, int value) {
        PrepareBuilder();
        result.handCards1_[index] = value;
        return this;
      }
      public Builder AddHandCards1(int value) {
        PrepareBuilder();
        result.handCards1_.Add(value);
        return this;
      }
      public Builder AddRangeHandCards1(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.handCards1_.Add(values);
        return this;
      }
      public Builder ClearHandCards1() {
        PrepareBuilder();
        result.handCards1_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> HandCards2List {
        get { return PrepareBuilder().handCards2_; }
      }
      public int HandCards2Count {
        get { return result.HandCards2Count; }
      }
      public int GetHandCards2(int index) {
        return result.GetHandCards2(index);
      }
      public Builder SetHandCards2(int index, int value) {
        PrepareBuilder();
        result.handCards2_[index] = value;
        return this;
      }
      public Builder AddHandCards2(int value) {
        PrepareBuilder();
        result.handCards2_.Add(value);
        return this;
      }
      public Builder AddRangeHandCards2(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.handCards2_.Add(values);
        return this;
      }
      public Builder ClearHandCards2() {
        PrepareBuilder();
        result.handCards2_.Clear();
        return this;
      }
      
      public pbc::IPopsicleList<int> HandCards3List {
        get { return PrepareBuilder().handCards3_; }
      }
      public int HandCards3Count {
        get { return result.HandCards3Count; }
      }
      public int GetHandCards3(int index) {
        return result.GetHandCards3(index);
      }
      public Builder SetHandCards3(int index, int value) {
        PrepareBuilder();
        result.handCards3_[index] = value;
        return this;
      }
      public Builder AddHandCards3(int value) {
        PrepareBuilder();
        result.handCards3_.Add(value);
        return this;
      }
      public Builder AddRangeHandCards3(scg::IEnumerable<int> values) {
        PrepareBuilder();
        result.handCards3_.Add(values);
        return this;
      }
      public Builder ClearHandCards3() {
        PrepareBuilder();
        result.handCards3_.Clear();
        return this;
      }
    }
    static GMInfoddz() {
      object.ReferenceEquals(global::gt_msg.GtDdz.Descriptor, null);
    }
  }
  
  #endregion
  
}

#endregion Designer generated code
